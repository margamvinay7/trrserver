
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Student
 * 
 */
export type Student = $Result.DefaultSelection<Prisma.$StudentPayload>
/**
 * Model Year
 * 
 */
export type Year = $Result.DefaultSelection<Prisma.$YearPayload>
/**
 * Model Academicyear
 * 
 */
export type Academicyear = $Result.DefaultSelection<Prisma.$AcademicyearPayload>
/**
 * Model Timetable
 * 
 */
export type Timetable = $Result.DefaultSelection<Prisma.$TimetablePayload>
/**
 * Model Days
 * 
 */
export type Days = $Result.DefaultSelection<Prisma.$DaysPayload>
/**
 * Model Periods
 * 
 */
export type Periods = $Result.DefaultSelection<Prisma.$PeriodsPayload>
/**
 * Model Attendence
 * 
 */
export type Attendence = $Result.DefaultSelection<Prisma.$AttendencePayload>
/**
 * Model Subject
 * 
 */
export type Subject = $Result.DefaultSelection<Prisma.$SubjectPayload>
/**
 * Model Assessment
 * 
 */
export type Assessment = $Result.DefaultSelection<Prisma.$AssessmentPayload>
/**
 * Model AssessmentSubject
 * 
 */
export type AssessmentSubject = $Result.DefaultSelection<Prisma.$AssessmentSubjectPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Students
 * const students = await prisma.student.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Students
   * const students = await prisma.student.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<ExtArgs>;

  /**
   * `prisma.year`: Exposes CRUD operations for the **Year** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Years
    * const years = await prisma.year.findMany()
    * ```
    */
  get year(): Prisma.YearDelegate<ExtArgs>;

  /**
   * `prisma.academicyear`: Exposes CRUD operations for the **Academicyear** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Academicyears
    * const academicyears = await prisma.academicyear.findMany()
    * ```
    */
  get academicyear(): Prisma.AcademicyearDelegate<ExtArgs>;

  /**
   * `prisma.timetable`: Exposes CRUD operations for the **Timetable** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Timetables
    * const timetables = await prisma.timetable.findMany()
    * ```
    */
  get timetable(): Prisma.TimetableDelegate<ExtArgs>;

  /**
   * `prisma.days`: Exposes CRUD operations for the **Days** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Days
    * const days = await prisma.days.findMany()
    * ```
    */
  get days(): Prisma.DaysDelegate<ExtArgs>;

  /**
   * `prisma.periods`: Exposes CRUD operations for the **Periods** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Periods
    * const periods = await prisma.periods.findMany()
    * ```
    */
  get periods(): Prisma.PeriodsDelegate<ExtArgs>;

  /**
   * `prisma.attendence`: Exposes CRUD operations for the **Attendence** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attendences
    * const attendences = await prisma.attendence.findMany()
    * ```
    */
  get attendence(): Prisma.AttendenceDelegate<ExtArgs>;

  /**
   * `prisma.subject`: Exposes CRUD operations for the **Subject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subjects
    * const subjects = await prisma.subject.findMany()
    * ```
    */
  get subject(): Prisma.SubjectDelegate<ExtArgs>;

  /**
   * `prisma.assessment`: Exposes CRUD operations for the **Assessment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assessments
    * const assessments = await prisma.assessment.findMany()
    * ```
    */
  get assessment(): Prisma.AssessmentDelegate<ExtArgs>;

  /**
   * `prisma.assessmentSubject`: Exposes CRUD operations for the **AssessmentSubject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AssessmentSubjects
    * const assessmentSubjects = await prisma.assessmentSubject.findMany()
    * ```
    */
  get assessmentSubject(): Prisma.AssessmentSubjectDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.9.1
   * Query Engine version: 23fdc5965b1e05fc54e5f26ed3de66776b93de64
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Student: 'Student',
    Year: 'Year',
    Academicyear: 'Academicyear',
    Timetable: 'Timetable',
    Days: 'Days',
    Periods: 'Periods',
    Attendence: 'Attendence',
    Subject: 'Subject',
    Assessment: 'Assessment',
    AssessmentSubject: 'AssessmentSubject'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'student' | 'year' | 'academicyear' | 'timetable' | 'days' | 'periods' | 'attendence' | 'subject' | 'assessment' | 'assessmentSubject'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Student: {
        payload: Prisma.$StudentPayload<ExtArgs>
        fields: Prisma.StudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findFirst: {
            args: Prisma.StudentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findMany: {
            args: Prisma.StudentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          create: {
            args: Prisma.StudentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          createMany: {
            args: Prisma.StudentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StudentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          update: {
            args: Prisma.StudentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          deleteMany: {
            args: Prisma.StudentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StudentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StudentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.StudentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentCountArgs<ExtArgs>,
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
      Year: {
        payload: Prisma.$YearPayload<ExtArgs>
        fields: Prisma.YearFieldRefs
        operations: {
          findUnique: {
            args: Prisma.YearFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$YearPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.YearFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$YearPayload>
          }
          findFirst: {
            args: Prisma.YearFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$YearPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.YearFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$YearPayload>
          }
          findMany: {
            args: Prisma.YearFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$YearPayload>[]
          }
          create: {
            args: Prisma.YearCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$YearPayload>
          }
          createMany: {
            args: Prisma.YearCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.YearDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$YearPayload>
          }
          update: {
            args: Prisma.YearUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$YearPayload>
          }
          deleteMany: {
            args: Prisma.YearDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.YearUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.YearUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$YearPayload>
          }
          aggregate: {
            args: Prisma.YearAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateYear>
          }
          groupBy: {
            args: Prisma.YearGroupByArgs<ExtArgs>,
            result: $Utils.Optional<YearGroupByOutputType>[]
          }
          count: {
            args: Prisma.YearCountArgs<ExtArgs>,
            result: $Utils.Optional<YearCountAggregateOutputType> | number
          }
        }
      }
      Academicyear: {
        payload: Prisma.$AcademicyearPayload<ExtArgs>
        fields: Prisma.AcademicyearFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AcademicyearFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicyearPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AcademicyearFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicyearPayload>
          }
          findFirst: {
            args: Prisma.AcademicyearFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicyearPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AcademicyearFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicyearPayload>
          }
          findMany: {
            args: Prisma.AcademicyearFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicyearPayload>[]
          }
          create: {
            args: Prisma.AcademicyearCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicyearPayload>
          }
          createMany: {
            args: Prisma.AcademicyearCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AcademicyearDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicyearPayload>
          }
          update: {
            args: Prisma.AcademicyearUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicyearPayload>
          }
          deleteMany: {
            args: Prisma.AcademicyearDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AcademicyearUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AcademicyearUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicyearPayload>
          }
          aggregate: {
            args: Prisma.AcademicyearAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAcademicyear>
          }
          groupBy: {
            args: Prisma.AcademicyearGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AcademicyearGroupByOutputType>[]
          }
          count: {
            args: Prisma.AcademicyearCountArgs<ExtArgs>,
            result: $Utils.Optional<AcademicyearCountAggregateOutputType> | number
          }
        }
      }
      Timetable: {
        payload: Prisma.$TimetablePayload<ExtArgs>
        fields: Prisma.TimetableFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TimetableFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TimetablePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TimetableFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TimetablePayload>
          }
          findFirst: {
            args: Prisma.TimetableFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TimetablePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TimetableFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TimetablePayload>
          }
          findMany: {
            args: Prisma.TimetableFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TimetablePayload>[]
          }
          create: {
            args: Prisma.TimetableCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TimetablePayload>
          }
          createMany: {
            args: Prisma.TimetableCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TimetableDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TimetablePayload>
          }
          update: {
            args: Prisma.TimetableUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TimetablePayload>
          }
          deleteMany: {
            args: Prisma.TimetableDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TimetableUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TimetableUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TimetablePayload>
          }
          aggregate: {
            args: Prisma.TimetableAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTimetable>
          }
          groupBy: {
            args: Prisma.TimetableGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TimetableGroupByOutputType>[]
          }
          count: {
            args: Prisma.TimetableCountArgs<ExtArgs>,
            result: $Utils.Optional<TimetableCountAggregateOutputType> | number
          }
        }
      }
      Days: {
        payload: Prisma.$DaysPayload<ExtArgs>
        fields: Prisma.DaysFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DaysFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DaysPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DaysFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DaysPayload>
          }
          findFirst: {
            args: Prisma.DaysFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DaysPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DaysFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DaysPayload>
          }
          findMany: {
            args: Prisma.DaysFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DaysPayload>[]
          }
          create: {
            args: Prisma.DaysCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DaysPayload>
          }
          createMany: {
            args: Prisma.DaysCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DaysDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DaysPayload>
          }
          update: {
            args: Prisma.DaysUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DaysPayload>
          }
          deleteMany: {
            args: Prisma.DaysDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DaysUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DaysUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DaysPayload>
          }
          aggregate: {
            args: Prisma.DaysAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDays>
          }
          groupBy: {
            args: Prisma.DaysGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DaysGroupByOutputType>[]
          }
          count: {
            args: Prisma.DaysCountArgs<ExtArgs>,
            result: $Utils.Optional<DaysCountAggregateOutputType> | number
          }
        }
      }
      Periods: {
        payload: Prisma.$PeriodsPayload<ExtArgs>
        fields: Prisma.PeriodsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PeriodsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PeriodsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PeriodsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PeriodsPayload>
          }
          findFirst: {
            args: Prisma.PeriodsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PeriodsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PeriodsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PeriodsPayload>
          }
          findMany: {
            args: Prisma.PeriodsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PeriodsPayload>[]
          }
          create: {
            args: Prisma.PeriodsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PeriodsPayload>
          }
          createMany: {
            args: Prisma.PeriodsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PeriodsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PeriodsPayload>
          }
          update: {
            args: Prisma.PeriodsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PeriodsPayload>
          }
          deleteMany: {
            args: Prisma.PeriodsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PeriodsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PeriodsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PeriodsPayload>
          }
          aggregate: {
            args: Prisma.PeriodsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePeriods>
          }
          groupBy: {
            args: Prisma.PeriodsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PeriodsGroupByOutputType>[]
          }
          count: {
            args: Prisma.PeriodsCountArgs<ExtArgs>,
            result: $Utils.Optional<PeriodsCountAggregateOutputType> | number
          }
        }
      }
      Attendence: {
        payload: Prisma.$AttendencePayload<ExtArgs>
        fields: Prisma.AttendenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttendenceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AttendencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttendenceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AttendencePayload>
          }
          findFirst: {
            args: Prisma.AttendenceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AttendencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttendenceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AttendencePayload>
          }
          findMany: {
            args: Prisma.AttendenceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AttendencePayload>[]
          }
          create: {
            args: Prisma.AttendenceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AttendencePayload>
          }
          createMany: {
            args: Prisma.AttendenceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AttendenceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AttendencePayload>
          }
          update: {
            args: Prisma.AttendenceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AttendencePayload>
          }
          deleteMany: {
            args: Prisma.AttendenceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AttendenceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AttendenceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AttendencePayload>
          }
          aggregate: {
            args: Prisma.AttendenceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAttendence>
          }
          groupBy: {
            args: Prisma.AttendenceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AttendenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttendenceCountArgs<ExtArgs>,
            result: $Utils.Optional<AttendenceCountAggregateOutputType> | number
          }
        }
      }
      Subject: {
        payload: Prisma.$SubjectPayload<ExtArgs>
        fields: Prisma.SubjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubjectFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubjectFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findFirst: {
            args: Prisma.SubjectFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubjectFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findMany: {
            args: Prisma.SubjectFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          create: {
            args: Prisma.SubjectCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          createMany: {
            args: Prisma.SubjectCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SubjectDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          update: {
            args: Prisma.SubjectUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          deleteMany: {
            args: Prisma.SubjectDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SubjectUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SubjectUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          aggregate: {
            args: Prisma.SubjectAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSubject>
          }
          groupBy: {
            args: Prisma.SubjectGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SubjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubjectCountArgs<ExtArgs>,
            result: $Utils.Optional<SubjectCountAggregateOutputType> | number
          }
        }
      }
      Assessment: {
        payload: Prisma.$AssessmentPayload<ExtArgs>
        fields: Prisma.AssessmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssessmentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssessmentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>
          }
          findFirst: {
            args: Prisma.AssessmentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssessmentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>
          }
          findMany: {
            args: Prisma.AssessmentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>[]
          }
          create: {
            args: Prisma.AssessmentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>
          }
          createMany: {
            args: Prisma.AssessmentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AssessmentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>
          }
          update: {
            args: Prisma.AssessmentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>
          }
          deleteMany: {
            args: Prisma.AssessmentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AssessmentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AssessmentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>
          }
          aggregate: {
            args: Prisma.AssessmentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAssessment>
          }
          groupBy: {
            args: Prisma.AssessmentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AssessmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssessmentCountArgs<ExtArgs>,
            result: $Utils.Optional<AssessmentCountAggregateOutputType> | number
          }
        }
      }
      AssessmentSubject: {
        payload: Prisma.$AssessmentSubjectPayload<ExtArgs>
        fields: Prisma.AssessmentSubjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssessmentSubjectFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssessmentSubjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssessmentSubjectFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssessmentSubjectPayload>
          }
          findFirst: {
            args: Prisma.AssessmentSubjectFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssessmentSubjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssessmentSubjectFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssessmentSubjectPayload>
          }
          findMany: {
            args: Prisma.AssessmentSubjectFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssessmentSubjectPayload>[]
          }
          create: {
            args: Prisma.AssessmentSubjectCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssessmentSubjectPayload>
          }
          createMany: {
            args: Prisma.AssessmentSubjectCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AssessmentSubjectDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssessmentSubjectPayload>
          }
          update: {
            args: Prisma.AssessmentSubjectUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssessmentSubjectPayload>
          }
          deleteMany: {
            args: Prisma.AssessmentSubjectDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AssessmentSubjectUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AssessmentSubjectUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssessmentSubjectPayload>
          }
          aggregate: {
            args: Prisma.AssessmentSubjectAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAssessmentSubject>
          }
          groupBy: {
            args: Prisma.AssessmentSubjectGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AssessmentSubjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssessmentSubjectCountArgs<ExtArgs>,
            result: $Utils.Optional<AssessmentSubjectCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StudentCountOutputType
   */

  export type StudentCountOutputType = {
    year: number
    academicyear: number
    Attendence: number
    Assessment: number
  }

  export type StudentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    year?: boolean | StudentCountOutputTypeCountYearArgs
    academicyear?: boolean | StudentCountOutputTypeCountAcademicyearArgs
    Attendence?: boolean | StudentCountOutputTypeCountAttendenceArgs
    Assessment?: boolean | StudentCountOutputTypeCountAssessmentArgs
  }

  // Custom InputTypes

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCountOutputType
     */
    select?: StudentCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountYearArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: YearWhereInput
  }


  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountAcademicyearArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AcademicyearWhereInput
  }


  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountAttendenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendenceWhereInput
  }


  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountAssessmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssessmentWhereInput
  }



  /**
   * Count Type TimetableCountOutputType
   */

  export type TimetableCountOutputType = {
    Days: number
  }

  export type TimetableCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Days?: boolean | TimetableCountOutputTypeCountDaysArgs
  }

  // Custom InputTypes

  /**
   * TimetableCountOutputType without action
   */
  export type TimetableCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimetableCountOutputType
     */
    select?: TimetableCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TimetableCountOutputType without action
   */
  export type TimetableCountOutputTypeCountDaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DaysWhereInput
  }



  /**
   * Count Type DaysCountOutputType
   */

  export type DaysCountOutputType = {
    Periods: number
  }

  export type DaysCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Periods?: boolean | DaysCountOutputTypeCountPeriodsArgs
  }

  // Custom InputTypes

  /**
   * DaysCountOutputType without action
   */
  export type DaysCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DaysCountOutputType
     */
    select?: DaysCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * DaysCountOutputType without action
   */
  export type DaysCountOutputTypeCountPeriodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PeriodsWhereInput
  }



  /**
   * Count Type AttendenceCountOutputType
   */

  export type AttendenceCountOutputType = {
    Subject: number
  }

  export type AttendenceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Subject?: boolean | AttendenceCountOutputTypeCountSubjectArgs
  }

  // Custom InputTypes

  /**
   * AttendenceCountOutputType without action
   */
  export type AttendenceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendenceCountOutputType
     */
    select?: AttendenceCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AttendenceCountOutputType without action
   */
  export type AttendenceCountOutputTypeCountSubjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
  }



  /**
   * Count Type AssessmentCountOutputType
   */

  export type AssessmentCountOutputType = {
    AssessmentSubject: number
  }

  export type AssessmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    AssessmentSubject?: boolean | AssessmentCountOutputTypeCountAssessmentSubjectArgs
  }

  // Custom InputTypes

  /**
   * AssessmentCountOutputType without action
   */
  export type AssessmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentCountOutputType
     */
    select?: AssessmentCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AssessmentCountOutputType without action
   */
  export type AssessmentCountOutputTypeCountAssessmentSubjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssessmentSubjectWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentAvgAggregateOutputType = {
    rollNo: number | null
  }

  export type StudentSumAggregateOutputType = {
    rollNo: number | null
  }

  export type StudentMinAggregateOutputType = {
    id: string | null
    fullName: string | null
    rollNo: number | null
    email: string | null
    mobile: string | null
    gender: string | null
    password: string | null
    role: string | null
  }

  export type StudentMaxAggregateOutputType = {
    id: string | null
    fullName: string | null
    rollNo: number | null
    email: string | null
    mobile: string | null
    gender: string | null
    password: string | null
    role: string | null
  }

  export type StudentCountAggregateOutputType = {
    id: number
    fullName: number
    rollNo: number
    email: number
    mobile: number
    gender: number
    password: number
    role: number
    _all: number
  }


  export type StudentAvgAggregateInputType = {
    rollNo?: true
  }

  export type StudentSumAggregateInputType = {
    rollNo?: true
  }

  export type StudentMinAggregateInputType = {
    id?: true
    fullName?: true
    rollNo?: true
    email?: true
    mobile?: true
    gender?: true
    password?: true
    role?: true
  }

  export type StudentMaxAggregateInputType = {
    id?: true
    fullName?: true
    rollNo?: true
    email?: true
    mobile?: true
    gender?: true
    password?: true
    role?: true
  }

  export type StudentCountAggregateInputType = {
    id?: true
    fullName?: true
    rollNo?: true
    email?: true
    mobile?: true
    gender?: true
    password?: true
    role?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student to aggregate.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithAggregationInput | StudentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _avg?: StudentAvgAggregateInputType
    _sum?: StudentSumAggregateInputType
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    id: string
    fullName: string
    rollNo: number | null
    email: string | null
    mobile: string | null
    gender: string | null
    password: string | null
    role: string
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    rollNo?: boolean
    email?: boolean
    mobile?: boolean
    gender?: boolean
    password?: boolean
    role?: boolean
    year?: boolean | Student$yearArgs<ExtArgs>
    academicyear?: boolean | Student$academicyearArgs<ExtArgs>
    Attendence?: boolean | Student$AttendenceArgs<ExtArgs>
    Assessment?: boolean | Student$AssessmentArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectScalar = {
    id?: boolean
    fullName?: boolean
    rollNo?: boolean
    email?: boolean
    mobile?: boolean
    gender?: boolean
    password?: boolean
    role?: boolean
  }

  export type StudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    year?: boolean | Student$yearArgs<ExtArgs>
    academicyear?: boolean | Student$academicyearArgs<ExtArgs>
    Attendence?: boolean | Student$AttendenceArgs<ExtArgs>
    Assessment?: boolean | Student$AssessmentArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $StudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student"
    objects: {
      year: Prisma.$YearPayload<ExtArgs>[]
      academicyear: Prisma.$AcademicyearPayload<ExtArgs>[]
      Attendence: Prisma.$AttendencePayload<ExtArgs>[]
      Assessment: Prisma.$AssessmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullName: string
      rollNo: number | null
      email: string | null
      mobile: string | null
      gender: string | null
      password: string | null
      role: string
    }, ExtArgs["result"]["student"]>
    composites: {}
  }


  type StudentGetPayload<S extends boolean | null | undefined | StudentDefaultArgs> = $Result.GetResult<Prisma.$StudentPayload, S>

  type StudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StudentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudentCountAggregateInputType | true
    }

  export interface StudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student'], meta: { name: 'Student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StudentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StudentFindUniqueArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Student that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StudentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentFindFirstArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentWithIdOnly = await prisma.student.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StudentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
    **/
    create<T extends StudentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StudentCreateArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Students.
     *     @param {StudentCreateManyArgs} args - Arguments to create many Students.
     *     @example
     *     // Create many Students
     *     const student = await prisma.student.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StudentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
    **/
    delete<T extends StudentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StudentDeleteArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StudentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StudentUpdateArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StudentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StudentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StudentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
    **/
    upsert<T extends StudentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StudentUpsertArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student model
   */
  readonly fields: StudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    year<T extends Student$yearArgs<ExtArgs> = {}>(args?: Subset<T, Student$yearArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$YearPayload<ExtArgs>, T, 'findMany'> | Null>;

    academicyear<T extends Student$academicyearArgs<ExtArgs> = {}>(args?: Subset<T, Student$academicyearArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AcademicyearPayload<ExtArgs>, T, 'findMany'> | Null>;

    Attendence<T extends Student$AttendenceArgs<ExtArgs> = {}>(args?: Subset<T, Student$AttendenceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendencePayload<ExtArgs>, T, 'findMany'> | Null>;

    Assessment<T extends Student$AssessmentArgs<ExtArgs> = {}>(args?: Subset<T, Student$AssessmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Student model
   */ 
  interface StudentFieldRefs {
    readonly id: FieldRef<"Student", 'String'>
    readonly fullName: FieldRef<"Student", 'String'>
    readonly rollNo: FieldRef<"Student", 'Int'>
    readonly email: FieldRef<"Student", 'String'>
    readonly mobile: FieldRef<"Student", 'String'>
    readonly gender: FieldRef<"Student", 'String'>
    readonly password: FieldRef<"Student", 'String'>
    readonly role: FieldRef<"Student", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Student findUnique
   */
  export type StudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }


  /**
   * Student findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }


  /**
   * Student findFirst
   */
  export type StudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }


  /**
   * Student findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }


  /**
   * Student findMany
   */
  export type StudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }


  /**
   * Student create
   */
  export type StudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to create a Student.
     */
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }


  /**
   * Student createMany
   */
  export type StudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Student update
   */
  export type StudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to update a Student.
     */
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     */
    where: StudentWhereUniqueInput
  }


  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
  }


  /**
   * Student upsert
   */
  export type StudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The filter to search for the Student to update in case it exists.
     */
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     */
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }


  /**
   * Student delete
   */
  export type StudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter which Student to delete.
     */
    where: StudentWhereUniqueInput
  }


  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to delete
     */
    where?: StudentWhereInput
  }


  /**
   * Student.year
   */
  export type Student$yearArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Year
     */
    select?: YearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YearInclude<ExtArgs> | null
    where?: YearWhereInput
    orderBy?: YearOrderByWithRelationInput | YearOrderByWithRelationInput[]
    cursor?: YearWhereUniqueInput
    take?: number
    skip?: number
    distinct?: YearScalarFieldEnum | YearScalarFieldEnum[]
  }


  /**
   * Student.academicyear
   */
  export type Student$academicyearArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Academicyear
     */
    select?: AcademicyearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicyearInclude<ExtArgs> | null
    where?: AcademicyearWhereInput
    orderBy?: AcademicyearOrderByWithRelationInput | AcademicyearOrderByWithRelationInput[]
    cursor?: AcademicyearWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AcademicyearScalarFieldEnum | AcademicyearScalarFieldEnum[]
  }


  /**
   * Student.Attendence
   */
  export type Student$AttendenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendence
     */
    select?: AttendenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttendenceInclude<ExtArgs> | null
    where?: AttendenceWhereInput
    orderBy?: AttendenceOrderByWithRelationInput | AttendenceOrderByWithRelationInput[]
    cursor?: AttendenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendenceScalarFieldEnum | AttendenceScalarFieldEnum[]
  }


  /**
   * Student.Assessment
   */
  export type Student$AssessmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssessmentInclude<ExtArgs> | null
    where?: AssessmentWhereInput
    orderBy?: AssessmentOrderByWithRelationInput | AssessmentOrderByWithRelationInput[]
    cursor?: AssessmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssessmentScalarFieldEnum | AssessmentScalarFieldEnum[]
  }


  /**
   * Student without action
   */
  export type StudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
  }



  /**
   * Model Year
   */

  export type AggregateYear = {
    _count: YearCountAggregateOutputType | null
    _avg: YearAvgAggregateOutputType | null
    _sum: YearSumAggregateOutputType | null
    _min: YearMinAggregateOutputType | null
    _max: YearMaxAggregateOutputType | null
  }

  export type YearAvgAggregateOutputType = {
    id: number | null
  }

  export type YearSumAggregateOutputType = {
    id: number | null
  }

  export type YearMinAggregateOutputType = {
    id: number | null
    year: string | null
    studentId: string | null
  }

  export type YearMaxAggregateOutputType = {
    id: number | null
    year: string | null
    studentId: string | null
  }

  export type YearCountAggregateOutputType = {
    id: number
    year: number
    studentId: number
    _all: number
  }


  export type YearAvgAggregateInputType = {
    id?: true
  }

  export type YearSumAggregateInputType = {
    id?: true
  }

  export type YearMinAggregateInputType = {
    id?: true
    year?: true
    studentId?: true
  }

  export type YearMaxAggregateInputType = {
    id?: true
    year?: true
    studentId?: true
  }

  export type YearCountAggregateInputType = {
    id?: true
    year?: true
    studentId?: true
    _all?: true
  }

  export type YearAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Year to aggregate.
     */
    where?: YearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Years to fetch.
     */
    orderBy?: YearOrderByWithRelationInput | YearOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Years from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Years.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Years
    **/
    _count?: true | YearCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YearAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YearSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YearMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YearMaxAggregateInputType
  }

  export type GetYearAggregateType<T extends YearAggregateArgs> = {
        [P in keyof T & keyof AggregateYear]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYear[P]>
      : GetScalarType<T[P], AggregateYear[P]>
  }




  export type YearGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: YearWhereInput
    orderBy?: YearOrderByWithAggregationInput | YearOrderByWithAggregationInput[]
    by: YearScalarFieldEnum[] | YearScalarFieldEnum
    having?: YearScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YearCountAggregateInputType | true
    _avg?: YearAvgAggregateInputType
    _sum?: YearSumAggregateInputType
    _min?: YearMinAggregateInputType
    _max?: YearMaxAggregateInputType
  }

  export type YearGroupByOutputType = {
    id: number
    year: string
    studentId: string
    _count: YearCountAggregateOutputType | null
    _avg: YearAvgAggregateOutputType | null
    _sum: YearSumAggregateOutputType | null
    _min: YearMinAggregateOutputType | null
    _max: YearMaxAggregateOutputType | null
  }

  type GetYearGroupByPayload<T extends YearGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<YearGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YearGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YearGroupByOutputType[P]>
            : GetScalarType<T[P], YearGroupByOutputType[P]>
        }
      >
    >


  export type YearSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    year?: boolean
    studentId?: boolean
    Student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["year"]>

  export type YearSelectScalar = {
    id?: boolean
    year?: boolean
    studentId?: boolean
  }

  export type YearInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Student?: boolean | StudentDefaultArgs<ExtArgs>
  }


  export type $YearPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Year"
    objects: {
      Student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      year: string
      studentId: string
    }, ExtArgs["result"]["year"]>
    composites: {}
  }


  type YearGetPayload<S extends boolean | null | undefined | YearDefaultArgs> = $Result.GetResult<Prisma.$YearPayload, S>

  type YearCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<YearFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: YearCountAggregateInputType | true
    }

  export interface YearDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Year'], meta: { name: 'Year' } }
    /**
     * Find zero or one Year that matches the filter.
     * @param {YearFindUniqueArgs} args - Arguments to find a Year
     * @example
     * // Get one Year
     * const year = await prisma.year.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends YearFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, YearFindUniqueArgs<ExtArgs>>
    ): Prisma__YearClient<$Result.GetResult<Prisma.$YearPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Year that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {YearFindUniqueOrThrowArgs} args - Arguments to find a Year
     * @example
     * // Get one Year
     * const year = await prisma.year.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends YearFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, YearFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__YearClient<$Result.GetResult<Prisma.$YearPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Year that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YearFindFirstArgs} args - Arguments to find a Year
     * @example
     * // Get one Year
     * const year = await prisma.year.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends YearFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, YearFindFirstArgs<ExtArgs>>
    ): Prisma__YearClient<$Result.GetResult<Prisma.$YearPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Year that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YearFindFirstOrThrowArgs} args - Arguments to find a Year
     * @example
     * // Get one Year
     * const year = await prisma.year.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends YearFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, YearFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__YearClient<$Result.GetResult<Prisma.$YearPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Years that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YearFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Years
     * const years = await prisma.year.findMany()
     * 
     * // Get first 10 Years
     * const years = await prisma.year.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const yearWithIdOnly = await prisma.year.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends YearFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, YearFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$YearPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Year.
     * @param {YearCreateArgs} args - Arguments to create a Year.
     * @example
     * // Create one Year
     * const Year = await prisma.year.create({
     *   data: {
     *     // ... data to create a Year
     *   }
     * })
     * 
    **/
    create<T extends YearCreateArgs<ExtArgs>>(
      args: SelectSubset<T, YearCreateArgs<ExtArgs>>
    ): Prisma__YearClient<$Result.GetResult<Prisma.$YearPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Years.
     *     @param {YearCreateManyArgs} args - Arguments to create many Years.
     *     @example
     *     // Create many Years
     *     const year = await prisma.year.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends YearCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, YearCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Year.
     * @param {YearDeleteArgs} args - Arguments to delete one Year.
     * @example
     * // Delete one Year
     * const Year = await prisma.year.delete({
     *   where: {
     *     // ... filter to delete one Year
     *   }
     * })
     * 
    **/
    delete<T extends YearDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, YearDeleteArgs<ExtArgs>>
    ): Prisma__YearClient<$Result.GetResult<Prisma.$YearPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Year.
     * @param {YearUpdateArgs} args - Arguments to update one Year.
     * @example
     * // Update one Year
     * const year = await prisma.year.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends YearUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, YearUpdateArgs<ExtArgs>>
    ): Prisma__YearClient<$Result.GetResult<Prisma.$YearPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Years.
     * @param {YearDeleteManyArgs} args - Arguments to filter Years to delete.
     * @example
     * // Delete a few Years
     * const { count } = await prisma.year.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends YearDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, YearDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Years.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YearUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Years
     * const year = await prisma.year.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends YearUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, YearUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Year.
     * @param {YearUpsertArgs} args - Arguments to update or create a Year.
     * @example
     * // Update or create a Year
     * const year = await prisma.year.upsert({
     *   create: {
     *     // ... data to create a Year
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Year we want to update
     *   }
     * })
    **/
    upsert<T extends YearUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, YearUpsertArgs<ExtArgs>>
    ): Prisma__YearClient<$Result.GetResult<Prisma.$YearPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Years.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YearCountArgs} args - Arguments to filter Years to count.
     * @example
     * // Count the number of Years
     * const count = await prisma.year.count({
     *   where: {
     *     // ... the filter for the Years we want to count
     *   }
     * })
    **/
    count<T extends YearCountArgs>(
      args?: Subset<T, YearCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YearCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Year.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YearAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YearAggregateArgs>(args: Subset<T, YearAggregateArgs>): Prisma.PrismaPromise<GetYearAggregateType<T>>

    /**
     * Group by Year.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YearGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YearGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YearGroupByArgs['orderBy'] }
        : { orderBy?: YearGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YearGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYearGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Year model
   */
  readonly fields: YearFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Year.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__YearClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Year model
   */ 
  interface YearFieldRefs {
    readonly id: FieldRef<"Year", 'Int'>
    readonly year: FieldRef<"Year", 'String'>
    readonly studentId: FieldRef<"Year", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Year findUnique
   */
  export type YearFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Year
     */
    select?: YearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YearInclude<ExtArgs> | null
    /**
     * Filter, which Year to fetch.
     */
    where: YearWhereUniqueInput
  }


  /**
   * Year findUniqueOrThrow
   */
  export type YearFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Year
     */
    select?: YearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YearInclude<ExtArgs> | null
    /**
     * Filter, which Year to fetch.
     */
    where: YearWhereUniqueInput
  }


  /**
   * Year findFirst
   */
  export type YearFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Year
     */
    select?: YearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YearInclude<ExtArgs> | null
    /**
     * Filter, which Year to fetch.
     */
    where?: YearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Years to fetch.
     */
    orderBy?: YearOrderByWithRelationInput | YearOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Years.
     */
    cursor?: YearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Years from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Years.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Years.
     */
    distinct?: YearScalarFieldEnum | YearScalarFieldEnum[]
  }


  /**
   * Year findFirstOrThrow
   */
  export type YearFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Year
     */
    select?: YearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YearInclude<ExtArgs> | null
    /**
     * Filter, which Year to fetch.
     */
    where?: YearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Years to fetch.
     */
    orderBy?: YearOrderByWithRelationInput | YearOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Years.
     */
    cursor?: YearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Years from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Years.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Years.
     */
    distinct?: YearScalarFieldEnum | YearScalarFieldEnum[]
  }


  /**
   * Year findMany
   */
  export type YearFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Year
     */
    select?: YearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YearInclude<ExtArgs> | null
    /**
     * Filter, which Years to fetch.
     */
    where?: YearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Years to fetch.
     */
    orderBy?: YearOrderByWithRelationInput | YearOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Years.
     */
    cursor?: YearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Years from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Years.
     */
    skip?: number
    distinct?: YearScalarFieldEnum | YearScalarFieldEnum[]
  }


  /**
   * Year create
   */
  export type YearCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Year
     */
    select?: YearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YearInclude<ExtArgs> | null
    /**
     * The data needed to create a Year.
     */
    data: XOR<YearCreateInput, YearUncheckedCreateInput>
  }


  /**
   * Year createMany
   */
  export type YearCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Years.
     */
    data: YearCreateManyInput | YearCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Year update
   */
  export type YearUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Year
     */
    select?: YearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YearInclude<ExtArgs> | null
    /**
     * The data needed to update a Year.
     */
    data: XOR<YearUpdateInput, YearUncheckedUpdateInput>
    /**
     * Choose, which Year to update.
     */
    where: YearWhereUniqueInput
  }


  /**
   * Year updateMany
   */
  export type YearUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Years.
     */
    data: XOR<YearUpdateManyMutationInput, YearUncheckedUpdateManyInput>
    /**
     * Filter which Years to update
     */
    where?: YearWhereInput
  }


  /**
   * Year upsert
   */
  export type YearUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Year
     */
    select?: YearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YearInclude<ExtArgs> | null
    /**
     * The filter to search for the Year to update in case it exists.
     */
    where: YearWhereUniqueInput
    /**
     * In case the Year found by the `where` argument doesn't exist, create a new Year with this data.
     */
    create: XOR<YearCreateInput, YearUncheckedCreateInput>
    /**
     * In case the Year was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YearUpdateInput, YearUncheckedUpdateInput>
  }


  /**
   * Year delete
   */
  export type YearDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Year
     */
    select?: YearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YearInclude<ExtArgs> | null
    /**
     * Filter which Year to delete.
     */
    where: YearWhereUniqueInput
  }


  /**
   * Year deleteMany
   */
  export type YearDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Years to delete
     */
    where?: YearWhereInput
  }


  /**
   * Year without action
   */
  export type YearDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Year
     */
    select?: YearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YearInclude<ExtArgs> | null
  }



  /**
   * Model Academicyear
   */

  export type AggregateAcademicyear = {
    _count: AcademicyearCountAggregateOutputType | null
    _avg: AcademicyearAvgAggregateOutputType | null
    _sum: AcademicyearSumAggregateOutputType | null
    _min: AcademicyearMinAggregateOutputType | null
    _max: AcademicyearMaxAggregateOutputType | null
  }

  export type AcademicyearAvgAggregateOutputType = {
    id: number | null
  }

  export type AcademicyearSumAggregateOutputType = {
    id: number | null
  }

  export type AcademicyearMinAggregateOutputType = {
    id: number | null
    academicyear: string | null
    studentId: string | null
  }

  export type AcademicyearMaxAggregateOutputType = {
    id: number | null
    academicyear: string | null
    studentId: string | null
  }

  export type AcademicyearCountAggregateOutputType = {
    id: number
    academicyear: number
    studentId: number
    _all: number
  }


  export type AcademicyearAvgAggregateInputType = {
    id?: true
  }

  export type AcademicyearSumAggregateInputType = {
    id?: true
  }

  export type AcademicyearMinAggregateInputType = {
    id?: true
    academicyear?: true
    studentId?: true
  }

  export type AcademicyearMaxAggregateInputType = {
    id?: true
    academicyear?: true
    studentId?: true
  }

  export type AcademicyearCountAggregateInputType = {
    id?: true
    academicyear?: true
    studentId?: true
    _all?: true
  }

  export type AcademicyearAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Academicyear to aggregate.
     */
    where?: AcademicyearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Academicyears to fetch.
     */
    orderBy?: AcademicyearOrderByWithRelationInput | AcademicyearOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AcademicyearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Academicyears from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Academicyears.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Academicyears
    **/
    _count?: true | AcademicyearCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AcademicyearAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AcademicyearSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AcademicyearMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AcademicyearMaxAggregateInputType
  }

  export type GetAcademicyearAggregateType<T extends AcademicyearAggregateArgs> = {
        [P in keyof T & keyof AggregateAcademicyear]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAcademicyear[P]>
      : GetScalarType<T[P], AggregateAcademicyear[P]>
  }




  export type AcademicyearGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AcademicyearWhereInput
    orderBy?: AcademicyearOrderByWithAggregationInput | AcademicyearOrderByWithAggregationInput[]
    by: AcademicyearScalarFieldEnum[] | AcademicyearScalarFieldEnum
    having?: AcademicyearScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AcademicyearCountAggregateInputType | true
    _avg?: AcademicyearAvgAggregateInputType
    _sum?: AcademicyearSumAggregateInputType
    _min?: AcademicyearMinAggregateInputType
    _max?: AcademicyearMaxAggregateInputType
  }

  export type AcademicyearGroupByOutputType = {
    id: number
    academicyear: string
    studentId: string
    _count: AcademicyearCountAggregateOutputType | null
    _avg: AcademicyearAvgAggregateOutputType | null
    _sum: AcademicyearSumAggregateOutputType | null
    _min: AcademicyearMinAggregateOutputType | null
    _max: AcademicyearMaxAggregateOutputType | null
  }

  type GetAcademicyearGroupByPayload<T extends AcademicyearGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AcademicyearGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AcademicyearGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AcademicyearGroupByOutputType[P]>
            : GetScalarType<T[P], AcademicyearGroupByOutputType[P]>
        }
      >
    >


  export type AcademicyearSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    academicyear?: boolean
    studentId?: boolean
    Student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["academicyear"]>

  export type AcademicyearSelectScalar = {
    id?: boolean
    academicyear?: boolean
    studentId?: boolean
  }

  export type AcademicyearInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Student?: boolean | StudentDefaultArgs<ExtArgs>
  }


  export type $AcademicyearPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Academicyear"
    objects: {
      Student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      academicyear: string
      studentId: string
    }, ExtArgs["result"]["academicyear"]>
    composites: {}
  }


  type AcademicyearGetPayload<S extends boolean | null | undefined | AcademicyearDefaultArgs> = $Result.GetResult<Prisma.$AcademicyearPayload, S>

  type AcademicyearCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AcademicyearFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AcademicyearCountAggregateInputType | true
    }

  export interface AcademicyearDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Academicyear'], meta: { name: 'Academicyear' } }
    /**
     * Find zero or one Academicyear that matches the filter.
     * @param {AcademicyearFindUniqueArgs} args - Arguments to find a Academicyear
     * @example
     * // Get one Academicyear
     * const academicyear = await prisma.academicyear.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AcademicyearFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AcademicyearFindUniqueArgs<ExtArgs>>
    ): Prisma__AcademicyearClient<$Result.GetResult<Prisma.$AcademicyearPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Academicyear that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AcademicyearFindUniqueOrThrowArgs} args - Arguments to find a Academicyear
     * @example
     * // Get one Academicyear
     * const academicyear = await prisma.academicyear.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AcademicyearFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AcademicyearFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AcademicyearClient<$Result.GetResult<Prisma.$AcademicyearPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Academicyear that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicyearFindFirstArgs} args - Arguments to find a Academicyear
     * @example
     * // Get one Academicyear
     * const academicyear = await prisma.academicyear.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AcademicyearFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AcademicyearFindFirstArgs<ExtArgs>>
    ): Prisma__AcademicyearClient<$Result.GetResult<Prisma.$AcademicyearPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Academicyear that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicyearFindFirstOrThrowArgs} args - Arguments to find a Academicyear
     * @example
     * // Get one Academicyear
     * const academicyear = await prisma.academicyear.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AcademicyearFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AcademicyearFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AcademicyearClient<$Result.GetResult<Prisma.$AcademicyearPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Academicyears that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicyearFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Academicyears
     * const academicyears = await prisma.academicyear.findMany()
     * 
     * // Get first 10 Academicyears
     * const academicyears = await prisma.academicyear.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const academicyearWithIdOnly = await prisma.academicyear.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AcademicyearFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AcademicyearFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AcademicyearPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Academicyear.
     * @param {AcademicyearCreateArgs} args - Arguments to create a Academicyear.
     * @example
     * // Create one Academicyear
     * const Academicyear = await prisma.academicyear.create({
     *   data: {
     *     // ... data to create a Academicyear
     *   }
     * })
     * 
    **/
    create<T extends AcademicyearCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AcademicyearCreateArgs<ExtArgs>>
    ): Prisma__AcademicyearClient<$Result.GetResult<Prisma.$AcademicyearPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Academicyears.
     *     @param {AcademicyearCreateManyArgs} args - Arguments to create many Academicyears.
     *     @example
     *     // Create many Academicyears
     *     const academicyear = await prisma.academicyear.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AcademicyearCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AcademicyearCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Academicyear.
     * @param {AcademicyearDeleteArgs} args - Arguments to delete one Academicyear.
     * @example
     * // Delete one Academicyear
     * const Academicyear = await prisma.academicyear.delete({
     *   where: {
     *     // ... filter to delete one Academicyear
     *   }
     * })
     * 
    **/
    delete<T extends AcademicyearDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AcademicyearDeleteArgs<ExtArgs>>
    ): Prisma__AcademicyearClient<$Result.GetResult<Prisma.$AcademicyearPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Academicyear.
     * @param {AcademicyearUpdateArgs} args - Arguments to update one Academicyear.
     * @example
     * // Update one Academicyear
     * const academicyear = await prisma.academicyear.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AcademicyearUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AcademicyearUpdateArgs<ExtArgs>>
    ): Prisma__AcademicyearClient<$Result.GetResult<Prisma.$AcademicyearPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Academicyears.
     * @param {AcademicyearDeleteManyArgs} args - Arguments to filter Academicyears to delete.
     * @example
     * // Delete a few Academicyears
     * const { count } = await prisma.academicyear.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AcademicyearDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AcademicyearDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Academicyears.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicyearUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Academicyears
     * const academicyear = await prisma.academicyear.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AcademicyearUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AcademicyearUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Academicyear.
     * @param {AcademicyearUpsertArgs} args - Arguments to update or create a Academicyear.
     * @example
     * // Update or create a Academicyear
     * const academicyear = await prisma.academicyear.upsert({
     *   create: {
     *     // ... data to create a Academicyear
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Academicyear we want to update
     *   }
     * })
    **/
    upsert<T extends AcademicyearUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AcademicyearUpsertArgs<ExtArgs>>
    ): Prisma__AcademicyearClient<$Result.GetResult<Prisma.$AcademicyearPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Academicyears.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicyearCountArgs} args - Arguments to filter Academicyears to count.
     * @example
     * // Count the number of Academicyears
     * const count = await prisma.academicyear.count({
     *   where: {
     *     // ... the filter for the Academicyears we want to count
     *   }
     * })
    **/
    count<T extends AcademicyearCountArgs>(
      args?: Subset<T, AcademicyearCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AcademicyearCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Academicyear.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicyearAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AcademicyearAggregateArgs>(args: Subset<T, AcademicyearAggregateArgs>): Prisma.PrismaPromise<GetAcademicyearAggregateType<T>>

    /**
     * Group by Academicyear.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicyearGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AcademicyearGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AcademicyearGroupByArgs['orderBy'] }
        : { orderBy?: AcademicyearGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AcademicyearGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAcademicyearGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Academicyear model
   */
  readonly fields: AcademicyearFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Academicyear.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AcademicyearClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Academicyear model
   */ 
  interface AcademicyearFieldRefs {
    readonly id: FieldRef<"Academicyear", 'Int'>
    readonly academicyear: FieldRef<"Academicyear", 'String'>
    readonly studentId: FieldRef<"Academicyear", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Academicyear findUnique
   */
  export type AcademicyearFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Academicyear
     */
    select?: AcademicyearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicyearInclude<ExtArgs> | null
    /**
     * Filter, which Academicyear to fetch.
     */
    where: AcademicyearWhereUniqueInput
  }


  /**
   * Academicyear findUniqueOrThrow
   */
  export type AcademicyearFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Academicyear
     */
    select?: AcademicyearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicyearInclude<ExtArgs> | null
    /**
     * Filter, which Academicyear to fetch.
     */
    where: AcademicyearWhereUniqueInput
  }


  /**
   * Academicyear findFirst
   */
  export type AcademicyearFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Academicyear
     */
    select?: AcademicyearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicyearInclude<ExtArgs> | null
    /**
     * Filter, which Academicyear to fetch.
     */
    where?: AcademicyearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Academicyears to fetch.
     */
    orderBy?: AcademicyearOrderByWithRelationInput | AcademicyearOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Academicyears.
     */
    cursor?: AcademicyearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Academicyears from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Academicyears.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Academicyears.
     */
    distinct?: AcademicyearScalarFieldEnum | AcademicyearScalarFieldEnum[]
  }


  /**
   * Academicyear findFirstOrThrow
   */
  export type AcademicyearFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Academicyear
     */
    select?: AcademicyearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicyearInclude<ExtArgs> | null
    /**
     * Filter, which Academicyear to fetch.
     */
    where?: AcademicyearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Academicyears to fetch.
     */
    orderBy?: AcademicyearOrderByWithRelationInput | AcademicyearOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Academicyears.
     */
    cursor?: AcademicyearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Academicyears from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Academicyears.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Academicyears.
     */
    distinct?: AcademicyearScalarFieldEnum | AcademicyearScalarFieldEnum[]
  }


  /**
   * Academicyear findMany
   */
  export type AcademicyearFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Academicyear
     */
    select?: AcademicyearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicyearInclude<ExtArgs> | null
    /**
     * Filter, which Academicyears to fetch.
     */
    where?: AcademicyearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Academicyears to fetch.
     */
    orderBy?: AcademicyearOrderByWithRelationInput | AcademicyearOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Academicyears.
     */
    cursor?: AcademicyearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Academicyears from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Academicyears.
     */
    skip?: number
    distinct?: AcademicyearScalarFieldEnum | AcademicyearScalarFieldEnum[]
  }


  /**
   * Academicyear create
   */
  export type AcademicyearCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Academicyear
     */
    select?: AcademicyearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicyearInclude<ExtArgs> | null
    /**
     * The data needed to create a Academicyear.
     */
    data: XOR<AcademicyearCreateInput, AcademicyearUncheckedCreateInput>
  }


  /**
   * Academicyear createMany
   */
  export type AcademicyearCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Academicyears.
     */
    data: AcademicyearCreateManyInput | AcademicyearCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Academicyear update
   */
  export type AcademicyearUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Academicyear
     */
    select?: AcademicyearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicyearInclude<ExtArgs> | null
    /**
     * The data needed to update a Academicyear.
     */
    data: XOR<AcademicyearUpdateInput, AcademicyearUncheckedUpdateInput>
    /**
     * Choose, which Academicyear to update.
     */
    where: AcademicyearWhereUniqueInput
  }


  /**
   * Academicyear updateMany
   */
  export type AcademicyearUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Academicyears.
     */
    data: XOR<AcademicyearUpdateManyMutationInput, AcademicyearUncheckedUpdateManyInput>
    /**
     * Filter which Academicyears to update
     */
    where?: AcademicyearWhereInput
  }


  /**
   * Academicyear upsert
   */
  export type AcademicyearUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Academicyear
     */
    select?: AcademicyearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicyearInclude<ExtArgs> | null
    /**
     * The filter to search for the Academicyear to update in case it exists.
     */
    where: AcademicyearWhereUniqueInput
    /**
     * In case the Academicyear found by the `where` argument doesn't exist, create a new Academicyear with this data.
     */
    create: XOR<AcademicyearCreateInput, AcademicyearUncheckedCreateInput>
    /**
     * In case the Academicyear was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AcademicyearUpdateInput, AcademicyearUncheckedUpdateInput>
  }


  /**
   * Academicyear delete
   */
  export type AcademicyearDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Academicyear
     */
    select?: AcademicyearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicyearInclude<ExtArgs> | null
    /**
     * Filter which Academicyear to delete.
     */
    where: AcademicyearWhereUniqueInput
  }


  /**
   * Academicyear deleteMany
   */
  export type AcademicyearDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Academicyears to delete
     */
    where?: AcademicyearWhereInput
  }


  /**
   * Academicyear without action
   */
  export type AcademicyearDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Academicyear
     */
    select?: AcademicyearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicyearInclude<ExtArgs> | null
  }



  /**
   * Model Timetable
   */

  export type AggregateTimetable = {
    _count: TimetableCountAggregateOutputType | null
    _min: TimetableMinAggregateOutputType | null
    _max: TimetableMaxAggregateOutputType | null
  }

  export type TimetableMinAggregateOutputType = {
    id: string | null
    year: string | null
    academicyear: string | null
  }

  export type TimetableMaxAggregateOutputType = {
    id: string | null
    year: string | null
    academicyear: string | null
  }

  export type TimetableCountAggregateOutputType = {
    id: number
    year: number
    academicyear: number
    _all: number
  }


  export type TimetableMinAggregateInputType = {
    id?: true
    year?: true
    academicyear?: true
  }

  export type TimetableMaxAggregateInputType = {
    id?: true
    year?: true
    academicyear?: true
  }

  export type TimetableCountAggregateInputType = {
    id?: true
    year?: true
    academicyear?: true
    _all?: true
  }

  export type TimetableAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Timetable to aggregate.
     */
    where?: TimetableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Timetables to fetch.
     */
    orderBy?: TimetableOrderByWithRelationInput | TimetableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TimetableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Timetables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Timetables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Timetables
    **/
    _count?: true | TimetableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TimetableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TimetableMaxAggregateInputType
  }

  export type GetTimetableAggregateType<T extends TimetableAggregateArgs> = {
        [P in keyof T & keyof AggregateTimetable]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTimetable[P]>
      : GetScalarType<T[P], AggregateTimetable[P]>
  }




  export type TimetableGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimetableWhereInput
    orderBy?: TimetableOrderByWithAggregationInput | TimetableOrderByWithAggregationInput[]
    by: TimetableScalarFieldEnum[] | TimetableScalarFieldEnum
    having?: TimetableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TimetableCountAggregateInputType | true
    _min?: TimetableMinAggregateInputType
    _max?: TimetableMaxAggregateInputType
  }

  export type TimetableGroupByOutputType = {
    id: string
    year: string
    academicyear: string
    _count: TimetableCountAggregateOutputType | null
    _min: TimetableMinAggregateOutputType | null
    _max: TimetableMaxAggregateOutputType | null
  }

  type GetTimetableGroupByPayload<T extends TimetableGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TimetableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TimetableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TimetableGroupByOutputType[P]>
            : GetScalarType<T[P], TimetableGroupByOutputType[P]>
        }
      >
    >


  export type TimetableSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    year?: boolean
    academicyear?: boolean
    Days?: boolean | Timetable$DaysArgs<ExtArgs>
    _count?: boolean | TimetableCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["timetable"]>

  export type TimetableSelectScalar = {
    id?: boolean
    year?: boolean
    academicyear?: boolean
  }

  export type TimetableInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Days?: boolean | Timetable$DaysArgs<ExtArgs>
    _count?: boolean | TimetableCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TimetablePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Timetable"
    objects: {
      Days: Prisma.$DaysPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      year: string
      academicyear: string
    }, ExtArgs["result"]["timetable"]>
    composites: {}
  }


  type TimetableGetPayload<S extends boolean | null | undefined | TimetableDefaultArgs> = $Result.GetResult<Prisma.$TimetablePayload, S>

  type TimetableCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TimetableFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TimetableCountAggregateInputType | true
    }

  export interface TimetableDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Timetable'], meta: { name: 'Timetable' } }
    /**
     * Find zero or one Timetable that matches the filter.
     * @param {TimetableFindUniqueArgs} args - Arguments to find a Timetable
     * @example
     * // Get one Timetable
     * const timetable = await prisma.timetable.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TimetableFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TimetableFindUniqueArgs<ExtArgs>>
    ): Prisma__TimetableClient<$Result.GetResult<Prisma.$TimetablePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Timetable that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TimetableFindUniqueOrThrowArgs} args - Arguments to find a Timetable
     * @example
     * // Get one Timetable
     * const timetable = await prisma.timetable.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TimetableFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TimetableFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TimetableClient<$Result.GetResult<Prisma.$TimetablePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Timetable that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimetableFindFirstArgs} args - Arguments to find a Timetable
     * @example
     * // Get one Timetable
     * const timetable = await prisma.timetable.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TimetableFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TimetableFindFirstArgs<ExtArgs>>
    ): Prisma__TimetableClient<$Result.GetResult<Prisma.$TimetablePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Timetable that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimetableFindFirstOrThrowArgs} args - Arguments to find a Timetable
     * @example
     * // Get one Timetable
     * const timetable = await prisma.timetable.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TimetableFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TimetableFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TimetableClient<$Result.GetResult<Prisma.$TimetablePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Timetables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimetableFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Timetables
     * const timetables = await prisma.timetable.findMany()
     * 
     * // Get first 10 Timetables
     * const timetables = await prisma.timetable.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const timetableWithIdOnly = await prisma.timetable.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TimetableFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TimetableFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimetablePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Timetable.
     * @param {TimetableCreateArgs} args - Arguments to create a Timetable.
     * @example
     * // Create one Timetable
     * const Timetable = await prisma.timetable.create({
     *   data: {
     *     // ... data to create a Timetable
     *   }
     * })
     * 
    **/
    create<T extends TimetableCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TimetableCreateArgs<ExtArgs>>
    ): Prisma__TimetableClient<$Result.GetResult<Prisma.$TimetablePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Timetables.
     *     @param {TimetableCreateManyArgs} args - Arguments to create many Timetables.
     *     @example
     *     // Create many Timetables
     *     const timetable = await prisma.timetable.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TimetableCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TimetableCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Timetable.
     * @param {TimetableDeleteArgs} args - Arguments to delete one Timetable.
     * @example
     * // Delete one Timetable
     * const Timetable = await prisma.timetable.delete({
     *   where: {
     *     // ... filter to delete one Timetable
     *   }
     * })
     * 
    **/
    delete<T extends TimetableDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TimetableDeleteArgs<ExtArgs>>
    ): Prisma__TimetableClient<$Result.GetResult<Prisma.$TimetablePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Timetable.
     * @param {TimetableUpdateArgs} args - Arguments to update one Timetable.
     * @example
     * // Update one Timetable
     * const timetable = await prisma.timetable.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TimetableUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TimetableUpdateArgs<ExtArgs>>
    ): Prisma__TimetableClient<$Result.GetResult<Prisma.$TimetablePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Timetables.
     * @param {TimetableDeleteManyArgs} args - Arguments to filter Timetables to delete.
     * @example
     * // Delete a few Timetables
     * const { count } = await prisma.timetable.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TimetableDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TimetableDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Timetables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimetableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Timetables
     * const timetable = await prisma.timetable.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TimetableUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TimetableUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Timetable.
     * @param {TimetableUpsertArgs} args - Arguments to update or create a Timetable.
     * @example
     * // Update or create a Timetable
     * const timetable = await prisma.timetable.upsert({
     *   create: {
     *     // ... data to create a Timetable
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Timetable we want to update
     *   }
     * })
    **/
    upsert<T extends TimetableUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TimetableUpsertArgs<ExtArgs>>
    ): Prisma__TimetableClient<$Result.GetResult<Prisma.$TimetablePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Timetables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimetableCountArgs} args - Arguments to filter Timetables to count.
     * @example
     * // Count the number of Timetables
     * const count = await prisma.timetable.count({
     *   where: {
     *     // ... the filter for the Timetables we want to count
     *   }
     * })
    **/
    count<T extends TimetableCountArgs>(
      args?: Subset<T, TimetableCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TimetableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Timetable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimetableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TimetableAggregateArgs>(args: Subset<T, TimetableAggregateArgs>): Prisma.PrismaPromise<GetTimetableAggregateType<T>>

    /**
     * Group by Timetable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimetableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TimetableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TimetableGroupByArgs['orderBy'] }
        : { orderBy?: TimetableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TimetableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTimetableGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Timetable model
   */
  readonly fields: TimetableFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Timetable.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TimetableClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Days<T extends Timetable$DaysArgs<ExtArgs> = {}>(args?: Subset<T, Timetable$DaysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DaysPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Timetable model
   */ 
  interface TimetableFieldRefs {
    readonly id: FieldRef<"Timetable", 'String'>
    readonly year: FieldRef<"Timetable", 'String'>
    readonly academicyear: FieldRef<"Timetable", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Timetable findUnique
   */
  export type TimetableFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Timetable
     */
    select?: TimetableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimetableInclude<ExtArgs> | null
    /**
     * Filter, which Timetable to fetch.
     */
    where: TimetableWhereUniqueInput
  }


  /**
   * Timetable findUniqueOrThrow
   */
  export type TimetableFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Timetable
     */
    select?: TimetableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimetableInclude<ExtArgs> | null
    /**
     * Filter, which Timetable to fetch.
     */
    where: TimetableWhereUniqueInput
  }


  /**
   * Timetable findFirst
   */
  export type TimetableFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Timetable
     */
    select?: TimetableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimetableInclude<ExtArgs> | null
    /**
     * Filter, which Timetable to fetch.
     */
    where?: TimetableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Timetables to fetch.
     */
    orderBy?: TimetableOrderByWithRelationInput | TimetableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Timetables.
     */
    cursor?: TimetableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Timetables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Timetables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Timetables.
     */
    distinct?: TimetableScalarFieldEnum | TimetableScalarFieldEnum[]
  }


  /**
   * Timetable findFirstOrThrow
   */
  export type TimetableFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Timetable
     */
    select?: TimetableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimetableInclude<ExtArgs> | null
    /**
     * Filter, which Timetable to fetch.
     */
    where?: TimetableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Timetables to fetch.
     */
    orderBy?: TimetableOrderByWithRelationInput | TimetableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Timetables.
     */
    cursor?: TimetableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Timetables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Timetables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Timetables.
     */
    distinct?: TimetableScalarFieldEnum | TimetableScalarFieldEnum[]
  }


  /**
   * Timetable findMany
   */
  export type TimetableFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Timetable
     */
    select?: TimetableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimetableInclude<ExtArgs> | null
    /**
     * Filter, which Timetables to fetch.
     */
    where?: TimetableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Timetables to fetch.
     */
    orderBy?: TimetableOrderByWithRelationInput | TimetableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Timetables.
     */
    cursor?: TimetableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Timetables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Timetables.
     */
    skip?: number
    distinct?: TimetableScalarFieldEnum | TimetableScalarFieldEnum[]
  }


  /**
   * Timetable create
   */
  export type TimetableCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Timetable
     */
    select?: TimetableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimetableInclude<ExtArgs> | null
    /**
     * The data needed to create a Timetable.
     */
    data: XOR<TimetableCreateInput, TimetableUncheckedCreateInput>
  }


  /**
   * Timetable createMany
   */
  export type TimetableCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Timetables.
     */
    data: TimetableCreateManyInput | TimetableCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Timetable update
   */
  export type TimetableUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Timetable
     */
    select?: TimetableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimetableInclude<ExtArgs> | null
    /**
     * The data needed to update a Timetable.
     */
    data: XOR<TimetableUpdateInput, TimetableUncheckedUpdateInput>
    /**
     * Choose, which Timetable to update.
     */
    where: TimetableWhereUniqueInput
  }


  /**
   * Timetable updateMany
   */
  export type TimetableUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Timetables.
     */
    data: XOR<TimetableUpdateManyMutationInput, TimetableUncheckedUpdateManyInput>
    /**
     * Filter which Timetables to update
     */
    where?: TimetableWhereInput
  }


  /**
   * Timetable upsert
   */
  export type TimetableUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Timetable
     */
    select?: TimetableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimetableInclude<ExtArgs> | null
    /**
     * The filter to search for the Timetable to update in case it exists.
     */
    where: TimetableWhereUniqueInput
    /**
     * In case the Timetable found by the `where` argument doesn't exist, create a new Timetable with this data.
     */
    create: XOR<TimetableCreateInput, TimetableUncheckedCreateInput>
    /**
     * In case the Timetable was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TimetableUpdateInput, TimetableUncheckedUpdateInput>
  }


  /**
   * Timetable delete
   */
  export type TimetableDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Timetable
     */
    select?: TimetableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimetableInclude<ExtArgs> | null
    /**
     * Filter which Timetable to delete.
     */
    where: TimetableWhereUniqueInput
  }


  /**
   * Timetable deleteMany
   */
  export type TimetableDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Timetables to delete
     */
    where?: TimetableWhereInput
  }


  /**
   * Timetable.Days
   */
  export type Timetable$DaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Days
     */
    select?: DaysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DaysInclude<ExtArgs> | null
    where?: DaysWhereInput
    orderBy?: DaysOrderByWithRelationInput | DaysOrderByWithRelationInput[]
    cursor?: DaysWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DaysScalarFieldEnum | DaysScalarFieldEnum[]
  }


  /**
   * Timetable without action
   */
  export type TimetableDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Timetable
     */
    select?: TimetableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimetableInclude<ExtArgs> | null
  }



  /**
   * Model Days
   */

  export type AggregateDays = {
    _count: DaysCountAggregateOutputType | null
    _min: DaysMinAggregateOutputType | null
    _max: DaysMaxAggregateOutputType | null
  }

  export type DaysMinAggregateOutputType = {
    id: string | null
    day: string | null
    timetableId: string | null
  }

  export type DaysMaxAggregateOutputType = {
    id: string | null
    day: string | null
    timetableId: string | null
  }

  export type DaysCountAggregateOutputType = {
    id: number
    day: number
    timetableId: number
    _all: number
  }


  export type DaysMinAggregateInputType = {
    id?: true
    day?: true
    timetableId?: true
  }

  export type DaysMaxAggregateInputType = {
    id?: true
    day?: true
    timetableId?: true
  }

  export type DaysCountAggregateInputType = {
    id?: true
    day?: true
    timetableId?: true
    _all?: true
  }

  export type DaysAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Days to aggregate.
     */
    where?: DaysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Days to fetch.
     */
    orderBy?: DaysOrderByWithRelationInput | DaysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DaysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Days from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Days.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Days
    **/
    _count?: true | DaysCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DaysMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DaysMaxAggregateInputType
  }

  export type GetDaysAggregateType<T extends DaysAggregateArgs> = {
        [P in keyof T & keyof AggregateDays]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDays[P]>
      : GetScalarType<T[P], AggregateDays[P]>
  }




  export type DaysGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DaysWhereInput
    orderBy?: DaysOrderByWithAggregationInput | DaysOrderByWithAggregationInput[]
    by: DaysScalarFieldEnum[] | DaysScalarFieldEnum
    having?: DaysScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DaysCountAggregateInputType | true
    _min?: DaysMinAggregateInputType
    _max?: DaysMaxAggregateInputType
  }

  export type DaysGroupByOutputType = {
    id: string
    day: string
    timetableId: string
    _count: DaysCountAggregateOutputType | null
    _min: DaysMinAggregateOutputType | null
    _max: DaysMaxAggregateOutputType | null
  }

  type GetDaysGroupByPayload<T extends DaysGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DaysGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DaysGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DaysGroupByOutputType[P]>
            : GetScalarType<T[P], DaysGroupByOutputType[P]>
        }
      >
    >


  export type DaysSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    day?: boolean
    timetableId?: boolean
    Timetable?: boolean | TimetableDefaultArgs<ExtArgs>
    Periods?: boolean | Days$PeriodsArgs<ExtArgs>
    _count?: boolean | DaysCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["days"]>

  export type DaysSelectScalar = {
    id?: boolean
    day?: boolean
    timetableId?: boolean
  }

  export type DaysInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Timetable?: boolean | TimetableDefaultArgs<ExtArgs>
    Periods?: boolean | Days$PeriodsArgs<ExtArgs>
    _count?: boolean | DaysCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $DaysPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Days"
    objects: {
      Timetable: Prisma.$TimetablePayload<ExtArgs>
      Periods: Prisma.$PeriodsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      day: string
      timetableId: string
    }, ExtArgs["result"]["days"]>
    composites: {}
  }


  type DaysGetPayload<S extends boolean | null | undefined | DaysDefaultArgs> = $Result.GetResult<Prisma.$DaysPayload, S>

  type DaysCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DaysFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DaysCountAggregateInputType | true
    }

  export interface DaysDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Days'], meta: { name: 'Days' } }
    /**
     * Find zero or one Days that matches the filter.
     * @param {DaysFindUniqueArgs} args - Arguments to find a Days
     * @example
     * // Get one Days
     * const days = await prisma.days.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DaysFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DaysFindUniqueArgs<ExtArgs>>
    ): Prisma__DaysClient<$Result.GetResult<Prisma.$DaysPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Days that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DaysFindUniqueOrThrowArgs} args - Arguments to find a Days
     * @example
     * // Get one Days
     * const days = await prisma.days.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DaysFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DaysFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DaysClient<$Result.GetResult<Prisma.$DaysPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Days that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaysFindFirstArgs} args - Arguments to find a Days
     * @example
     * // Get one Days
     * const days = await prisma.days.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DaysFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DaysFindFirstArgs<ExtArgs>>
    ): Prisma__DaysClient<$Result.GetResult<Prisma.$DaysPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Days that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaysFindFirstOrThrowArgs} args - Arguments to find a Days
     * @example
     * // Get one Days
     * const days = await prisma.days.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DaysFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DaysFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DaysClient<$Result.GetResult<Prisma.$DaysPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Days that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaysFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Days
     * const days = await prisma.days.findMany()
     * 
     * // Get first 10 Days
     * const days = await prisma.days.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const daysWithIdOnly = await prisma.days.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DaysFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DaysFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DaysPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Days.
     * @param {DaysCreateArgs} args - Arguments to create a Days.
     * @example
     * // Create one Days
     * const Days = await prisma.days.create({
     *   data: {
     *     // ... data to create a Days
     *   }
     * })
     * 
    **/
    create<T extends DaysCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DaysCreateArgs<ExtArgs>>
    ): Prisma__DaysClient<$Result.GetResult<Prisma.$DaysPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Days.
     *     @param {DaysCreateManyArgs} args - Arguments to create many Days.
     *     @example
     *     // Create many Days
     *     const days = await prisma.days.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DaysCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DaysCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Days.
     * @param {DaysDeleteArgs} args - Arguments to delete one Days.
     * @example
     * // Delete one Days
     * const Days = await prisma.days.delete({
     *   where: {
     *     // ... filter to delete one Days
     *   }
     * })
     * 
    **/
    delete<T extends DaysDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DaysDeleteArgs<ExtArgs>>
    ): Prisma__DaysClient<$Result.GetResult<Prisma.$DaysPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Days.
     * @param {DaysUpdateArgs} args - Arguments to update one Days.
     * @example
     * // Update one Days
     * const days = await prisma.days.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DaysUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DaysUpdateArgs<ExtArgs>>
    ): Prisma__DaysClient<$Result.GetResult<Prisma.$DaysPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Days.
     * @param {DaysDeleteManyArgs} args - Arguments to filter Days to delete.
     * @example
     * // Delete a few Days
     * const { count } = await prisma.days.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DaysDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DaysDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Days.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaysUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Days
     * const days = await prisma.days.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DaysUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DaysUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Days.
     * @param {DaysUpsertArgs} args - Arguments to update or create a Days.
     * @example
     * // Update or create a Days
     * const days = await prisma.days.upsert({
     *   create: {
     *     // ... data to create a Days
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Days we want to update
     *   }
     * })
    **/
    upsert<T extends DaysUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DaysUpsertArgs<ExtArgs>>
    ): Prisma__DaysClient<$Result.GetResult<Prisma.$DaysPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Days.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaysCountArgs} args - Arguments to filter Days to count.
     * @example
     * // Count the number of Days
     * const count = await prisma.days.count({
     *   where: {
     *     // ... the filter for the Days we want to count
     *   }
     * })
    **/
    count<T extends DaysCountArgs>(
      args?: Subset<T, DaysCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DaysCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Days.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaysAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DaysAggregateArgs>(args: Subset<T, DaysAggregateArgs>): Prisma.PrismaPromise<GetDaysAggregateType<T>>

    /**
     * Group by Days.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaysGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DaysGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DaysGroupByArgs['orderBy'] }
        : { orderBy?: DaysGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DaysGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDaysGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Days model
   */
  readonly fields: DaysFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Days.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DaysClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Timetable<T extends TimetableDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TimetableDefaultArgs<ExtArgs>>): Prisma__TimetableClient<$Result.GetResult<Prisma.$TimetablePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Periods<T extends Days$PeriodsArgs<ExtArgs> = {}>(args?: Subset<T, Days$PeriodsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PeriodsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Days model
   */ 
  interface DaysFieldRefs {
    readonly id: FieldRef<"Days", 'String'>
    readonly day: FieldRef<"Days", 'String'>
    readonly timetableId: FieldRef<"Days", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Days findUnique
   */
  export type DaysFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Days
     */
    select?: DaysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DaysInclude<ExtArgs> | null
    /**
     * Filter, which Days to fetch.
     */
    where: DaysWhereUniqueInput
  }


  /**
   * Days findUniqueOrThrow
   */
  export type DaysFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Days
     */
    select?: DaysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DaysInclude<ExtArgs> | null
    /**
     * Filter, which Days to fetch.
     */
    where: DaysWhereUniqueInput
  }


  /**
   * Days findFirst
   */
  export type DaysFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Days
     */
    select?: DaysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DaysInclude<ExtArgs> | null
    /**
     * Filter, which Days to fetch.
     */
    where?: DaysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Days to fetch.
     */
    orderBy?: DaysOrderByWithRelationInput | DaysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Days.
     */
    cursor?: DaysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Days from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Days.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Days.
     */
    distinct?: DaysScalarFieldEnum | DaysScalarFieldEnum[]
  }


  /**
   * Days findFirstOrThrow
   */
  export type DaysFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Days
     */
    select?: DaysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DaysInclude<ExtArgs> | null
    /**
     * Filter, which Days to fetch.
     */
    where?: DaysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Days to fetch.
     */
    orderBy?: DaysOrderByWithRelationInput | DaysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Days.
     */
    cursor?: DaysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Days from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Days.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Days.
     */
    distinct?: DaysScalarFieldEnum | DaysScalarFieldEnum[]
  }


  /**
   * Days findMany
   */
  export type DaysFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Days
     */
    select?: DaysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DaysInclude<ExtArgs> | null
    /**
     * Filter, which Days to fetch.
     */
    where?: DaysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Days to fetch.
     */
    orderBy?: DaysOrderByWithRelationInput | DaysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Days.
     */
    cursor?: DaysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Days from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Days.
     */
    skip?: number
    distinct?: DaysScalarFieldEnum | DaysScalarFieldEnum[]
  }


  /**
   * Days create
   */
  export type DaysCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Days
     */
    select?: DaysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DaysInclude<ExtArgs> | null
    /**
     * The data needed to create a Days.
     */
    data: XOR<DaysCreateInput, DaysUncheckedCreateInput>
  }


  /**
   * Days createMany
   */
  export type DaysCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Days.
     */
    data: DaysCreateManyInput | DaysCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Days update
   */
  export type DaysUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Days
     */
    select?: DaysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DaysInclude<ExtArgs> | null
    /**
     * The data needed to update a Days.
     */
    data: XOR<DaysUpdateInput, DaysUncheckedUpdateInput>
    /**
     * Choose, which Days to update.
     */
    where: DaysWhereUniqueInput
  }


  /**
   * Days updateMany
   */
  export type DaysUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Days.
     */
    data: XOR<DaysUpdateManyMutationInput, DaysUncheckedUpdateManyInput>
    /**
     * Filter which Days to update
     */
    where?: DaysWhereInput
  }


  /**
   * Days upsert
   */
  export type DaysUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Days
     */
    select?: DaysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DaysInclude<ExtArgs> | null
    /**
     * The filter to search for the Days to update in case it exists.
     */
    where: DaysWhereUniqueInput
    /**
     * In case the Days found by the `where` argument doesn't exist, create a new Days with this data.
     */
    create: XOR<DaysCreateInput, DaysUncheckedCreateInput>
    /**
     * In case the Days was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DaysUpdateInput, DaysUncheckedUpdateInput>
  }


  /**
   * Days delete
   */
  export type DaysDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Days
     */
    select?: DaysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DaysInclude<ExtArgs> | null
    /**
     * Filter which Days to delete.
     */
    where: DaysWhereUniqueInput
  }


  /**
   * Days deleteMany
   */
  export type DaysDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Days to delete
     */
    where?: DaysWhereInput
  }


  /**
   * Days.Periods
   */
  export type Days$PeriodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Periods
     */
    select?: PeriodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PeriodsInclude<ExtArgs> | null
    where?: PeriodsWhereInput
    orderBy?: PeriodsOrderByWithRelationInput | PeriodsOrderByWithRelationInput[]
    cursor?: PeriodsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PeriodsScalarFieldEnum | PeriodsScalarFieldEnum[]
  }


  /**
   * Days without action
   */
  export type DaysDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Days
     */
    select?: DaysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DaysInclude<ExtArgs> | null
  }



  /**
   * Model Periods
   */

  export type AggregatePeriods = {
    _count: PeriodsCountAggregateOutputType | null
    _avg: PeriodsAvgAggregateOutputType | null
    _sum: PeriodsSumAggregateOutputType | null
    _min: PeriodsMinAggregateOutputType | null
    _max: PeriodsMaxAggregateOutputType | null
  }

  export type PeriodsAvgAggregateOutputType = {
    id: number | null
  }

  export type PeriodsSumAggregateOutputType = {
    id: number | null
  }

  export type PeriodsMinAggregateOutputType = {
    id: number | null
    daysId: string | null
    time: string | null
    subject: string | null
  }

  export type PeriodsMaxAggregateOutputType = {
    id: number | null
    daysId: string | null
    time: string | null
    subject: string | null
  }

  export type PeriodsCountAggregateOutputType = {
    id: number
    daysId: number
    time: number
    subject: number
    _all: number
  }


  export type PeriodsAvgAggregateInputType = {
    id?: true
  }

  export type PeriodsSumAggregateInputType = {
    id?: true
  }

  export type PeriodsMinAggregateInputType = {
    id?: true
    daysId?: true
    time?: true
    subject?: true
  }

  export type PeriodsMaxAggregateInputType = {
    id?: true
    daysId?: true
    time?: true
    subject?: true
  }

  export type PeriodsCountAggregateInputType = {
    id?: true
    daysId?: true
    time?: true
    subject?: true
    _all?: true
  }

  export type PeriodsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Periods to aggregate.
     */
    where?: PeriodsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Periods to fetch.
     */
    orderBy?: PeriodsOrderByWithRelationInput | PeriodsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PeriodsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Periods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Periods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Periods
    **/
    _count?: true | PeriodsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PeriodsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PeriodsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PeriodsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PeriodsMaxAggregateInputType
  }

  export type GetPeriodsAggregateType<T extends PeriodsAggregateArgs> = {
        [P in keyof T & keyof AggregatePeriods]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePeriods[P]>
      : GetScalarType<T[P], AggregatePeriods[P]>
  }




  export type PeriodsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PeriodsWhereInput
    orderBy?: PeriodsOrderByWithAggregationInput | PeriodsOrderByWithAggregationInput[]
    by: PeriodsScalarFieldEnum[] | PeriodsScalarFieldEnum
    having?: PeriodsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PeriodsCountAggregateInputType | true
    _avg?: PeriodsAvgAggregateInputType
    _sum?: PeriodsSumAggregateInputType
    _min?: PeriodsMinAggregateInputType
    _max?: PeriodsMaxAggregateInputType
  }

  export type PeriodsGroupByOutputType = {
    id: number
    daysId: string
    time: string
    subject: string
    _count: PeriodsCountAggregateOutputType | null
    _avg: PeriodsAvgAggregateOutputType | null
    _sum: PeriodsSumAggregateOutputType | null
    _min: PeriodsMinAggregateOutputType | null
    _max: PeriodsMaxAggregateOutputType | null
  }

  type GetPeriodsGroupByPayload<T extends PeriodsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PeriodsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PeriodsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PeriodsGroupByOutputType[P]>
            : GetScalarType<T[P], PeriodsGroupByOutputType[P]>
        }
      >
    >


  export type PeriodsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    daysId?: boolean
    time?: boolean
    subject?: boolean
    Days?: boolean | DaysDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["periods"]>

  export type PeriodsSelectScalar = {
    id?: boolean
    daysId?: boolean
    time?: boolean
    subject?: boolean
  }

  export type PeriodsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Days?: boolean | DaysDefaultArgs<ExtArgs>
  }


  export type $PeriodsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Periods"
    objects: {
      Days: Prisma.$DaysPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      daysId: string
      time: string
      subject: string
    }, ExtArgs["result"]["periods"]>
    composites: {}
  }


  type PeriodsGetPayload<S extends boolean | null | undefined | PeriodsDefaultArgs> = $Result.GetResult<Prisma.$PeriodsPayload, S>

  type PeriodsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PeriodsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PeriodsCountAggregateInputType | true
    }

  export interface PeriodsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Periods'], meta: { name: 'Periods' } }
    /**
     * Find zero or one Periods that matches the filter.
     * @param {PeriodsFindUniqueArgs} args - Arguments to find a Periods
     * @example
     * // Get one Periods
     * const periods = await prisma.periods.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PeriodsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PeriodsFindUniqueArgs<ExtArgs>>
    ): Prisma__PeriodsClient<$Result.GetResult<Prisma.$PeriodsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Periods that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PeriodsFindUniqueOrThrowArgs} args - Arguments to find a Periods
     * @example
     * // Get one Periods
     * const periods = await prisma.periods.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PeriodsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PeriodsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PeriodsClient<$Result.GetResult<Prisma.$PeriodsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Periods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PeriodsFindFirstArgs} args - Arguments to find a Periods
     * @example
     * // Get one Periods
     * const periods = await prisma.periods.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PeriodsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PeriodsFindFirstArgs<ExtArgs>>
    ): Prisma__PeriodsClient<$Result.GetResult<Prisma.$PeriodsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Periods that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PeriodsFindFirstOrThrowArgs} args - Arguments to find a Periods
     * @example
     * // Get one Periods
     * const periods = await prisma.periods.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PeriodsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PeriodsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PeriodsClient<$Result.GetResult<Prisma.$PeriodsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Periods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PeriodsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Periods
     * const periods = await prisma.periods.findMany()
     * 
     * // Get first 10 Periods
     * const periods = await prisma.periods.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const periodsWithIdOnly = await prisma.periods.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PeriodsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PeriodsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PeriodsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Periods.
     * @param {PeriodsCreateArgs} args - Arguments to create a Periods.
     * @example
     * // Create one Periods
     * const Periods = await prisma.periods.create({
     *   data: {
     *     // ... data to create a Periods
     *   }
     * })
     * 
    **/
    create<T extends PeriodsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PeriodsCreateArgs<ExtArgs>>
    ): Prisma__PeriodsClient<$Result.GetResult<Prisma.$PeriodsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Periods.
     *     @param {PeriodsCreateManyArgs} args - Arguments to create many Periods.
     *     @example
     *     // Create many Periods
     *     const periods = await prisma.periods.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PeriodsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PeriodsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Periods.
     * @param {PeriodsDeleteArgs} args - Arguments to delete one Periods.
     * @example
     * // Delete one Periods
     * const Periods = await prisma.periods.delete({
     *   where: {
     *     // ... filter to delete one Periods
     *   }
     * })
     * 
    **/
    delete<T extends PeriodsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PeriodsDeleteArgs<ExtArgs>>
    ): Prisma__PeriodsClient<$Result.GetResult<Prisma.$PeriodsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Periods.
     * @param {PeriodsUpdateArgs} args - Arguments to update one Periods.
     * @example
     * // Update one Periods
     * const periods = await prisma.periods.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PeriodsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PeriodsUpdateArgs<ExtArgs>>
    ): Prisma__PeriodsClient<$Result.GetResult<Prisma.$PeriodsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Periods.
     * @param {PeriodsDeleteManyArgs} args - Arguments to filter Periods to delete.
     * @example
     * // Delete a few Periods
     * const { count } = await prisma.periods.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PeriodsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PeriodsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Periods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PeriodsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Periods
     * const periods = await prisma.periods.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PeriodsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PeriodsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Periods.
     * @param {PeriodsUpsertArgs} args - Arguments to update or create a Periods.
     * @example
     * // Update or create a Periods
     * const periods = await prisma.periods.upsert({
     *   create: {
     *     // ... data to create a Periods
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Periods we want to update
     *   }
     * })
    **/
    upsert<T extends PeriodsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PeriodsUpsertArgs<ExtArgs>>
    ): Prisma__PeriodsClient<$Result.GetResult<Prisma.$PeriodsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Periods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PeriodsCountArgs} args - Arguments to filter Periods to count.
     * @example
     * // Count the number of Periods
     * const count = await prisma.periods.count({
     *   where: {
     *     // ... the filter for the Periods we want to count
     *   }
     * })
    **/
    count<T extends PeriodsCountArgs>(
      args?: Subset<T, PeriodsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PeriodsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Periods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PeriodsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PeriodsAggregateArgs>(args: Subset<T, PeriodsAggregateArgs>): Prisma.PrismaPromise<GetPeriodsAggregateType<T>>

    /**
     * Group by Periods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PeriodsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PeriodsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PeriodsGroupByArgs['orderBy'] }
        : { orderBy?: PeriodsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PeriodsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPeriodsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Periods model
   */
  readonly fields: PeriodsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Periods.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PeriodsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Days<T extends DaysDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DaysDefaultArgs<ExtArgs>>): Prisma__DaysClient<$Result.GetResult<Prisma.$DaysPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Periods model
   */ 
  interface PeriodsFieldRefs {
    readonly id: FieldRef<"Periods", 'Int'>
    readonly daysId: FieldRef<"Periods", 'String'>
    readonly time: FieldRef<"Periods", 'String'>
    readonly subject: FieldRef<"Periods", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Periods findUnique
   */
  export type PeriodsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Periods
     */
    select?: PeriodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PeriodsInclude<ExtArgs> | null
    /**
     * Filter, which Periods to fetch.
     */
    where: PeriodsWhereUniqueInput
  }


  /**
   * Periods findUniqueOrThrow
   */
  export type PeriodsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Periods
     */
    select?: PeriodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PeriodsInclude<ExtArgs> | null
    /**
     * Filter, which Periods to fetch.
     */
    where: PeriodsWhereUniqueInput
  }


  /**
   * Periods findFirst
   */
  export type PeriodsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Periods
     */
    select?: PeriodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PeriodsInclude<ExtArgs> | null
    /**
     * Filter, which Periods to fetch.
     */
    where?: PeriodsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Periods to fetch.
     */
    orderBy?: PeriodsOrderByWithRelationInput | PeriodsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Periods.
     */
    cursor?: PeriodsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Periods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Periods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Periods.
     */
    distinct?: PeriodsScalarFieldEnum | PeriodsScalarFieldEnum[]
  }


  /**
   * Periods findFirstOrThrow
   */
  export type PeriodsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Periods
     */
    select?: PeriodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PeriodsInclude<ExtArgs> | null
    /**
     * Filter, which Periods to fetch.
     */
    where?: PeriodsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Periods to fetch.
     */
    orderBy?: PeriodsOrderByWithRelationInput | PeriodsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Periods.
     */
    cursor?: PeriodsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Periods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Periods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Periods.
     */
    distinct?: PeriodsScalarFieldEnum | PeriodsScalarFieldEnum[]
  }


  /**
   * Periods findMany
   */
  export type PeriodsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Periods
     */
    select?: PeriodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PeriodsInclude<ExtArgs> | null
    /**
     * Filter, which Periods to fetch.
     */
    where?: PeriodsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Periods to fetch.
     */
    orderBy?: PeriodsOrderByWithRelationInput | PeriodsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Periods.
     */
    cursor?: PeriodsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Periods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Periods.
     */
    skip?: number
    distinct?: PeriodsScalarFieldEnum | PeriodsScalarFieldEnum[]
  }


  /**
   * Periods create
   */
  export type PeriodsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Periods
     */
    select?: PeriodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PeriodsInclude<ExtArgs> | null
    /**
     * The data needed to create a Periods.
     */
    data: XOR<PeriodsCreateInput, PeriodsUncheckedCreateInput>
  }


  /**
   * Periods createMany
   */
  export type PeriodsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Periods.
     */
    data: PeriodsCreateManyInput | PeriodsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Periods update
   */
  export type PeriodsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Periods
     */
    select?: PeriodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PeriodsInclude<ExtArgs> | null
    /**
     * The data needed to update a Periods.
     */
    data: XOR<PeriodsUpdateInput, PeriodsUncheckedUpdateInput>
    /**
     * Choose, which Periods to update.
     */
    where: PeriodsWhereUniqueInput
  }


  /**
   * Periods updateMany
   */
  export type PeriodsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Periods.
     */
    data: XOR<PeriodsUpdateManyMutationInput, PeriodsUncheckedUpdateManyInput>
    /**
     * Filter which Periods to update
     */
    where?: PeriodsWhereInput
  }


  /**
   * Periods upsert
   */
  export type PeriodsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Periods
     */
    select?: PeriodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PeriodsInclude<ExtArgs> | null
    /**
     * The filter to search for the Periods to update in case it exists.
     */
    where: PeriodsWhereUniqueInput
    /**
     * In case the Periods found by the `where` argument doesn't exist, create a new Periods with this data.
     */
    create: XOR<PeriodsCreateInput, PeriodsUncheckedCreateInput>
    /**
     * In case the Periods was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PeriodsUpdateInput, PeriodsUncheckedUpdateInput>
  }


  /**
   * Periods delete
   */
  export type PeriodsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Periods
     */
    select?: PeriodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PeriodsInclude<ExtArgs> | null
    /**
     * Filter which Periods to delete.
     */
    where: PeriodsWhereUniqueInput
  }


  /**
   * Periods deleteMany
   */
  export type PeriodsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Periods to delete
     */
    where?: PeriodsWhereInput
  }


  /**
   * Periods without action
   */
  export type PeriodsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Periods
     */
    select?: PeriodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PeriodsInclude<ExtArgs> | null
  }



  /**
   * Model Attendence
   */

  export type AggregateAttendence = {
    _count: AttendenceCountAggregateOutputType | null
    _min: AttendenceMinAggregateOutputType | null
    _max: AttendenceMaxAggregateOutputType | null
  }

  export type AttendenceMinAggregateOutputType = {
    id: string | null
    studentId: string | null
    date: string | null
  }

  export type AttendenceMaxAggregateOutputType = {
    id: string | null
    studentId: string | null
    date: string | null
  }

  export type AttendenceCountAggregateOutputType = {
    id: number
    studentId: number
    date: number
    _all: number
  }


  export type AttendenceMinAggregateInputType = {
    id?: true
    studentId?: true
    date?: true
  }

  export type AttendenceMaxAggregateInputType = {
    id?: true
    studentId?: true
    date?: true
  }

  export type AttendenceCountAggregateInputType = {
    id?: true
    studentId?: true
    date?: true
    _all?: true
  }

  export type AttendenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attendence to aggregate.
     */
    where?: AttendenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendences to fetch.
     */
    orderBy?: AttendenceOrderByWithRelationInput | AttendenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttendenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Attendences
    **/
    _count?: true | AttendenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttendenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttendenceMaxAggregateInputType
  }

  export type GetAttendenceAggregateType<T extends AttendenceAggregateArgs> = {
        [P in keyof T & keyof AggregateAttendence]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttendence[P]>
      : GetScalarType<T[P], AggregateAttendence[P]>
  }




  export type AttendenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendenceWhereInput
    orderBy?: AttendenceOrderByWithAggregationInput | AttendenceOrderByWithAggregationInput[]
    by: AttendenceScalarFieldEnum[] | AttendenceScalarFieldEnum
    having?: AttendenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttendenceCountAggregateInputType | true
    _min?: AttendenceMinAggregateInputType
    _max?: AttendenceMaxAggregateInputType
  }

  export type AttendenceGroupByOutputType = {
    id: string
    studentId: string
    date: string
    _count: AttendenceCountAggregateOutputType | null
    _min: AttendenceMinAggregateOutputType | null
    _max: AttendenceMaxAggregateOutputType | null
  }

  type GetAttendenceGroupByPayload<T extends AttendenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttendenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttendenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttendenceGroupByOutputType[P]>
            : GetScalarType<T[P], AttendenceGroupByOutputType[P]>
        }
      >
    >


  export type AttendenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    date?: boolean
    Student?: boolean | StudentDefaultArgs<ExtArgs>
    Subject?: boolean | Attendence$SubjectArgs<ExtArgs>
    _count?: boolean | AttendenceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendence"]>

  export type AttendenceSelectScalar = {
    id?: boolean
    studentId?: boolean
    date?: boolean
  }

  export type AttendenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Student?: boolean | StudentDefaultArgs<ExtArgs>
    Subject?: boolean | Attendence$SubjectArgs<ExtArgs>
    _count?: boolean | AttendenceCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AttendencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Attendence"
    objects: {
      Student: Prisma.$StudentPayload<ExtArgs>
      Subject: Prisma.$SubjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      studentId: string
      date: string
    }, ExtArgs["result"]["attendence"]>
    composites: {}
  }


  type AttendenceGetPayload<S extends boolean | null | undefined | AttendenceDefaultArgs> = $Result.GetResult<Prisma.$AttendencePayload, S>

  type AttendenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AttendenceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AttendenceCountAggregateInputType | true
    }

  export interface AttendenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Attendence'], meta: { name: 'Attendence' } }
    /**
     * Find zero or one Attendence that matches the filter.
     * @param {AttendenceFindUniqueArgs} args - Arguments to find a Attendence
     * @example
     * // Get one Attendence
     * const attendence = await prisma.attendence.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AttendenceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AttendenceFindUniqueArgs<ExtArgs>>
    ): Prisma__AttendenceClient<$Result.GetResult<Prisma.$AttendencePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Attendence that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AttendenceFindUniqueOrThrowArgs} args - Arguments to find a Attendence
     * @example
     * // Get one Attendence
     * const attendence = await prisma.attendence.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AttendenceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AttendenceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AttendenceClient<$Result.GetResult<Prisma.$AttendencePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Attendence that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendenceFindFirstArgs} args - Arguments to find a Attendence
     * @example
     * // Get one Attendence
     * const attendence = await prisma.attendence.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AttendenceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AttendenceFindFirstArgs<ExtArgs>>
    ): Prisma__AttendenceClient<$Result.GetResult<Prisma.$AttendencePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Attendence that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendenceFindFirstOrThrowArgs} args - Arguments to find a Attendence
     * @example
     * // Get one Attendence
     * const attendence = await prisma.attendence.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AttendenceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AttendenceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AttendenceClient<$Result.GetResult<Prisma.$AttendencePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Attendences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendenceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attendences
     * const attendences = await prisma.attendence.findMany()
     * 
     * // Get first 10 Attendences
     * const attendences = await prisma.attendence.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attendenceWithIdOnly = await prisma.attendence.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AttendenceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AttendenceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendencePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Attendence.
     * @param {AttendenceCreateArgs} args - Arguments to create a Attendence.
     * @example
     * // Create one Attendence
     * const Attendence = await prisma.attendence.create({
     *   data: {
     *     // ... data to create a Attendence
     *   }
     * })
     * 
    **/
    create<T extends AttendenceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AttendenceCreateArgs<ExtArgs>>
    ): Prisma__AttendenceClient<$Result.GetResult<Prisma.$AttendencePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Attendences.
     *     @param {AttendenceCreateManyArgs} args - Arguments to create many Attendences.
     *     @example
     *     // Create many Attendences
     *     const attendence = await prisma.attendence.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AttendenceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AttendenceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Attendence.
     * @param {AttendenceDeleteArgs} args - Arguments to delete one Attendence.
     * @example
     * // Delete one Attendence
     * const Attendence = await prisma.attendence.delete({
     *   where: {
     *     // ... filter to delete one Attendence
     *   }
     * })
     * 
    **/
    delete<T extends AttendenceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AttendenceDeleteArgs<ExtArgs>>
    ): Prisma__AttendenceClient<$Result.GetResult<Prisma.$AttendencePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Attendence.
     * @param {AttendenceUpdateArgs} args - Arguments to update one Attendence.
     * @example
     * // Update one Attendence
     * const attendence = await prisma.attendence.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AttendenceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AttendenceUpdateArgs<ExtArgs>>
    ): Prisma__AttendenceClient<$Result.GetResult<Prisma.$AttendencePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Attendences.
     * @param {AttendenceDeleteManyArgs} args - Arguments to filter Attendences to delete.
     * @example
     * // Delete a few Attendences
     * const { count } = await prisma.attendence.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AttendenceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AttendenceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attendences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attendences
     * const attendence = await prisma.attendence.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AttendenceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AttendenceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Attendence.
     * @param {AttendenceUpsertArgs} args - Arguments to update or create a Attendence.
     * @example
     * // Update or create a Attendence
     * const attendence = await prisma.attendence.upsert({
     *   create: {
     *     // ... data to create a Attendence
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attendence we want to update
     *   }
     * })
    **/
    upsert<T extends AttendenceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AttendenceUpsertArgs<ExtArgs>>
    ): Prisma__AttendenceClient<$Result.GetResult<Prisma.$AttendencePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Attendences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendenceCountArgs} args - Arguments to filter Attendences to count.
     * @example
     * // Count the number of Attendences
     * const count = await prisma.attendence.count({
     *   where: {
     *     // ... the filter for the Attendences we want to count
     *   }
     * })
    **/
    count<T extends AttendenceCountArgs>(
      args?: Subset<T, AttendenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttendenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attendence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttendenceAggregateArgs>(args: Subset<T, AttendenceAggregateArgs>): Prisma.PrismaPromise<GetAttendenceAggregateType<T>>

    /**
     * Group by Attendence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttendenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttendenceGroupByArgs['orderBy'] }
        : { orderBy?: AttendenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttendenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttendenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Attendence model
   */
  readonly fields: AttendenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Attendence.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttendenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Subject<T extends Attendence$SubjectArgs<ExtArgs> = {}>(args?: Subset<T, Attendence$SubjectArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Attendence model
   */ 
  interface AttendenceFieldRefs {
    readonly id: FieldRef<"Attendence", 'String'>
    readonly studentId: FieldRef<"Attendence", 'String'>
    readonly date: FieldRef<"Attendence", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Attendence findUnique
   */
  export type AttendenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendence
     */
    select?: AttendenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttendenceInclude<ExtArgs> | null
    /**
     * Filter, which Attendence to fetch.
     */
    where: AttendenceWhereUniqueInput
  }


  /**
   * Attendence findUniqueOrThrow
   */
  export type AttendenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendence
     */
    select?: AttendenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttendenceInclude<ExtArgs> | null
    /**
     * Filter, which Attendence to fetch.
     */
    where: AttendenceWhereUniqueInput
  }


  /**
   * Attendence findFirst
   */
  export type AttendenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendence
     */
    select?: AttendenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttendenceInclude<ExtArgs> | null
    /**
     * Filter, which Attendence to fetch.
     */
    where?: AttendenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendences to fetch.
     */
    orderBy?: AttendenceOrderByWithRelationInput | AttendenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attendences.
     */
    cursor?: AttendenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attendences.
     */
    distinct?: AttendenceScalarFieldEnum | AttendenceScalarFieldEnum[]
  }


  /**
   * Attendence findFirstOrThrow
   */
  export type AttendenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendence
     */
    select?: AttendenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttendenceInclude<ExtArgs> | null
    /**
     * Filter, which Attendence to fetch.
     */
    where?: AttendenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendences to fetch.
     */
    orderBy?: AttendenceOrderByWithRelationInput | AttendenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attendences.
     */
    cursor?: AttendenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attendences.
     */
    distinct?: AttendenceScalarFieldEnum | AttendenceScalarFieldEnum[]
  }


  /**
   * Attendence findMany
   */
  export type AttendenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendence
     */
    select?: AttendenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttendenceInclude<ExtArgs> | null
    /**
     * Filter, which Attendences to fetch.
     */
    where?: AttendenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendences to fetch.
     */
    orderBy?: AttendenceOrderByWithRelationInput | AttendenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Attendences.
     */
    cursor?: AttendenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendences.
     */
    skip?: number
    distinct?: AttendenceScalarFieldEnum | AttendenceScalarFieldEnum[]
  }


  /**
   * Attendence create
   */
  export type AttendenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendence
     */
    select?: AttendenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttendenceInclude<ExtArgs> | null
    /**
     * The data needed to create a Attendence.
     */
    data: XOR<AttendenceCreateInput, AttendenceUncheckedCreateInput>
  }


  /**
   * Attendence createMany
   */
  export type AttendenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Attendences.
     */
    data: AttendenceCreateManyInput | AttendenceCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Attendence update
   */
  export type AttendenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendence
     */
    select?: AttendenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttendenceInclude<ExtArgs> | null
    /**
     * The data needed to update a Attendence.
     */
    data: XOR<AttendenceUpdateInput, AttendenceUncheckedUpdateInput>
    /**
     * Choose, which Attendence to update.
     */
    where: AttendenceWhereUniqueInput
  }


  /**
   * Attendence updateMany
   */
  export type AttendenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Attendences.
     */
    data: XOR<AttendenceUpdateManyMutationInput, AttendenceUncheckedUpdateManyInput>
    /**
     * Filter which Attendences to update
     */
    where?: AttendenceWhereInput
  }


  /**
   * Attendence upsert
   */
  export type AttendenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendence
     */
    select?: AttendenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttendenceInclude<ExtArgs> | null
    /**
     * The filter to search for the Attendence to update in case it exists.
     */
    where: AttendenceWhereUniqueInput
    /**
     * In case the Attendence found by the `where` argument doesn't exist, create a new Attendence with this data.
     */
    create: XOR<AttendenceCreateInput, AttendenceUncheckedCreateInput>
    /**
     * In case the Attendence was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttendenceUpdateInput, AttendenceUncheckedUpdateInput>
  }


  /**
   * Attendence delete
   */
  export type AttendenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendence
     */
    select?: AttendenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttendenceInclude<ExtArgs> | null
    /**
     * Filter which Attendence to delete.
     */
    where: AttendenceWhereUniqueInput
  }


  /**
   * Attendence deleteMany
   */
  export type AttendenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attendences to delete
     */
    where?: AttendenceWhereInput
  }


  /**
   * Attendence.Subject
   */
  export type Attendence$SubjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    cursor?: SubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }


  /**
   * Attendence without action
   */
  export type AttendenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendence
     */
    select?: AttendenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttendenceInclude<ExtArgs> | null
  }



  /**
   * Model Subject
   */

  export type AggregateSubject = {
    _count: SubjectCountAggregateOutputType | null
    _avg: SubjectAvgAggregateOutputType | null
    _sum: SubjectSumAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  export type SubjectAvgAggregateOutputType = {
    id: number | null
  }

  export type SubjectSumAggregateOutputType = {
    id: number | null
  }

  export type SubjectMinAggregateOutputType = {
    id: number | null
    attendenceId: string | null
    time: string | null
    subject: string | null
    present: boolean | null
  }

  export type SubjectMaxAggregateOutputType = {
    id: number | null
    attendenceId: string | null
    time: string | null
    subject: string | null
    present: boolean | null
  }

  export type SubjectCountAggregateOutputType = {
    id: number
    attendenceId: number
    time: number
    subject: number
    present: number
    _all: number
  }


  export type SubjectAvgAggregateInputType = {
    id?: true
  }

  export type SubjectSumAggregateInputType = {
    id?: true
  }

  export type SubjectMinAggregateInputType = {
    id?: true
    attendenceId?: true
    time?: true
    subject?: true
    present?: true
  }

  export type SubjectMaxAggregateInputType = {
    id?: true
    attendenceId?: true
    time?: true
    subject?: true
    present?: true
  }

  export type SubjectCountAggregateInputType = {
    id?: true
    attendenceId?: true
    time?: true
    subject?: true
    present?: true
    _all?: true
  }

  export type SubjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subject to aggregate.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subjects
    **/
    _count?: true | SubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubjectMaxAggregateInputType
  }

  export type GetSubjectAggregateType<T extends SubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubject[P]>
      : GetScalarType<T[P], AggregateSubject[P]>
  }




  export type SubjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithAggregationInput | SubjectOrderByWithAggregationInput[]
    by: SubjectScalarFieldEnum[] | SubjectScalarFieldEnum
    having?: SubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubjectCountAggregateInputType | true
    _avg?: SubjectAvgAggregateInputType
    _sum?: SubjectSumAggregateInputType
    _min?: SubjectMinAggregateInputType
    _max?: SubjectMaxAggregateInputType
  }

  export type SubjectGroupByOutputType = {
    id: number
    attendenceId: string
    time: string
    subject: string
    present: boolean
    _count: SubjectCountAggregateOutputType | null
    _avg: SubjectAvgAggregateOutputType | null
    _sum: SubjectSumAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  type GetSubjectGroupByPayload<T extends SubjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubjectGroupByOutputType[P]>
            : GetScalarType<T[P], SubjectGroupByOutputType[P]>
        }
      >
    >


  export type SubjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    attendenceId?: boolean
    time?: boolean
    subject?: boolean
    present?: boolean
    Attendence?: boolean | AttendenceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subject"]>

  export type SubjectSelectScalar = {
    id?: boolean
    attendenceId?: boolean
    time?: boolean
    subject?: boolean
    present?: boolean
  }

  export type SubjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Attendence?: boolean | AttendenceDefaultArgs<ExtArgs>
  }


  export type $SubjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subject"
    objects: {
      Attendence: Prisma.$AttendencePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      attendenceId: string
      time: string
      subject: string
      present: boolean
    }, ExtArgs["result"]["subject"]>
    composites: {}
  }


  type SubjectGetPayload<S extends boolean | null | undefined | SubjectDefaultArgs> = $Result.GetResult<Prisma.$SubjectPayload, S>

  type SubjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SubjectCountAggregateInputType | true
    }

  export interface SubjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subject'], meta: { name: 'Subject' } }
    /**
     * Find zero or one Subject that matches the filter.
     * @param {SubjectFindUniqueArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SubjectFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SubjectFindUniqueArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Subject that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SubjectFindUniqueOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SubjectFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubjectFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Subject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SubjectFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SubjectFindFirstArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Subject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SubjectFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubjectFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Subjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subjects
     * const subjects = await prisma.subject.findMany()
     * 
     * // Get first 10 Subjects
     * const subjects = await prisma.subject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subjectWithIdOnly = await prisma.subject.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SubjectFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubjectFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Subject.
     * @param {SubjectCreateArgs} args - Arguments to create a Subject.
     * @example
     * // Create one Subject
     * const Subject = await prisma.subject.create({
     *   data: {
     *     // ... data to create a Subject
     *   }
     * })
     * 
    **/
    create<T extends SubjectCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SubjectCreateArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Subjects.
     *     @param {SubjectCreateManyArgs} args - Arguments to create many Subjects.
     *     @example
     *     // Create many Subjects
     *     const subject = await prisma.subject.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SubjectCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubjectCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Subject.
     * @param {SubjectDeleteArgs} args - Arguments to delete one Subject.
     * @example
     * // Delete one Subject
     * const Subject = await prisma.subject.delete({
     *   where: {
     *     // ... filter to delete one Subject
     *   }
     * })
     * 
    **/
    delete<T extends SubjectDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SubjectDeleteArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Subject.
     * @param {SubjectUpdateArgs} args - Arguments to update one Subject.
     * @example
     * // Update one Subject
     * const subject = await prisma.subject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SubjectUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SubjectUpdateArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Subjects.
     * @param {SubjectDeleteManyArgs} args - Arguments to filter Subjects to delete.
     * @example
     * // Delete a few Subjects
     * const { count } = await prisma.subject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SubjectDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubjectDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subjects
     * const subject = await prisma.subject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SubjectUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SubjectUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subject.
     * @param {SubjectUpsertArgs} args - Arguments to update or create a Subject.
     * @example
     * // Update or create a Subject
     * const subject = await prisma.subject.upsert({
     *   create: {
     *     // ... data to create a Subject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subject we want to update
     *   }
     * })
    **/
    upsert<T extends SubjectUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SubjectUpsertArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectCountArgs} args - Arguments to filter Subjects to count.
     * @example
     * // Count the number of Subjects
     * const count = await prisma.subject.count({
     *   where: {
     *     // ... the filter for the Subjects we want to count
     *   }
     * })
    **/
    count<T extends SubjectCountArgs>(
      args?: Subset<T, SubjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubjectAggregateArgs>(args: Subset<T, SubjectAggregateArgs>): Prisma.PrismaPromise<GetSubjectAggregateType<T>>

    /**
     * Group by Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubjectGroupByArgs['orderBy'] }
        : { orderBy?: SubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subject model
   */
  readonly fields: SubjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Attendence<T extends AttendenceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AttendenceDefaultArgs<ExtArgs>>): Prisma__AttendenceClient<$Result.GetResult<Prisma.$AttendencePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Subject model
   */ 
  interface SubjectFieldRefs {
    readonly id: FieldRef<"Subject", 'Int'>
    readonly attendenceId: FieldRef<"Subject", 'String'>
    readonly time: FieldRef<"Subject", 'String'>
    readonly subject: FieldRef<"Subject", 'String'>
    readonly present: FieldRef<"Subject", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Subject findUnique
   */
  export type SubjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }


  /**
   * Subject findUniqueOrThrow
   */
  export type SubjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }


  /**
   * Subject findFirst
   */
  export type SubjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }


  /**
   * Subject findFirstOrThrow
   */
  export type SubjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }


  /**
   * Subject findMany
   */
  export type SubjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subjects to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }


  /**
   * Subject create
   */
  export type SubjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Subject.
     */
    data: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
  }


  /**
   * Subject createMany
   */
  export type SubjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subjects.
     */
    data: SubjectCreateManyInput | SubjectCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Subject update
   */
  export type SubjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Subject.
     */
    data: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
    /**
     * Choose, which Subject to update.
     */
    where: SubjectWhereUniqueInput
  }


  /**
   * Subject updateMany
   */
  export type SubjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subjects.
     */
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyInput>
    /**
     * Filter which Subjects to update
     */
    where?: SubjectWhereInput
  }


  /**
   * Subject upsert
   */
  export type SubjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Subject to update in case it exists.
     */
    where: SubjectWhereUniqueInput
    /**
     * In case the Subject found by the `where` argument doesn't exist, create a new Subject with this data.
     */
    create: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
    /**
     * In case the Subject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
  }


  /**
   * Subject delete
   */
  export type SubjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter which Subject to delete.
     */
    where: SubjectWhereUniqueInput
  }


  /**
   * Subject deleteMany
   */
  export type SubjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subjects to delete
     */
    where?: SubjectWhereInput
  }


  /**
   * Subject without action
   */
  export type SubjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
  }



  /**
   * Model Assessment
   */

  export type AggregateAssessment = {
    _count: AssessmentCountAggregateOutputType | null
    _min: AssessmentMinAggregateOutputType | null
    _max: AssessmentMaxAggregateOutputType | null
  }

  export type AssessmentMinAggregateOutputType = {
    id: string | null
    studentId: string | null
    year: string | null
    academicyear: string | null
    assessment: string | null
  }

  export type AssessmentMaxAggregateOutputType = {
    id: string | null
    studentId: string | null
    year: string | null
    academicyear: string | null
    assessment: string | null
  }

  export type AssessmentCountAggregateOutputType = {
    id: number
    studentId: number
    year: number
    academicyear: number
    assessment: number
    _all: number
  }


  export type AssessmentMinAggregateInputType = {
    id?: true
    studentId?: true
    year?: true
    academicyear?: true
    assessment?: true
  }

  export type AssessmentMaxAggregateInputType = {
    id?: true
    studentId?: true
    year?: true
    academicyear?: true
    assessment?: true
  }

  export type AssessmentCountAggregateInputType = {
    id?: true
    studentId?: true
    year?: true
    academicyear?: true
    assessment?: true
    _all?: true
  }

  export type AssessmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assessment to aggregate.
     */
    where?: AssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assessments to fetch.
     */
    orderBy?: AssessmentOrderByWithRelationInput | AssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Assessments
    **/
    _count?: true | AssessmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssessmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssessmentMaxAggregateInputType
  }

  export type GetAssessmentAggregateType<T extends AssessmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAssessment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssessment[P]>
      : GetScalarType<T[P], AggregateAssessment[P]>
  }




  export type AssessmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssessmentWhereInput
    orderBy?: AssessmentOrderByWithAggregationInput | AssessmentOrderByWithAggregationInput[]
    by: AssessmentScalarFieldEnum[] | AssessmentScalarFieldEnum
    having?: AssessmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssessmentCountAggregateInputType | true
    _min?: AssessmentMinAggregateInputType
    _max?: AssessmentMaxAggregateInputType
  }

  export type AssessmentGroupByOutputType = {
    id: string
    studentId: string
    year: string
    academicyear: string
    assessment: string
    _count: AssessmentCountAggregateOutputType | null
    _min: AssessmentMinAggregateOutputType | null
    _max: AssessmentMaxAggregateOutputType | null
  }

  type GetAssessmentGroupByPayload<T extends AssessmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssessmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssessmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssessmentGroupByOutputType[P]>
            : GetScalarType<T[P], AssessmentGroupByOutputType[P]>
        }
      >
    >


  export type AssessmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    year?: boolean
    academicyear?: boolean
    assessment?: boolean
    Student?: boolean | StudentDefaultArgs<ExtArgs>
    AssessmentSubject?: boolean | Assessment$AssessmentSubjectArgs<ExtArgs>
    _count?: boolean | AssessmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assessment"]>

  export type AssessmentSelectScalar = {
    id?: boolean
    studentId?: boolean
    year?: boolean
    academicyear?: boolean
    assessment?: boolean
  }

  export type AssessmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Student?: boolean | StudentDefaultArgs<ExtArgs>
    AssessmentSubject?: boolean | Assessment$AssessmentSubjectArgs<ExtArgs>
    _count?: boolean | AssessmentCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AssessmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Assessment"
    objects: {
      Student: Prisma.$StudentPayload<ExtArgs>
      AssessmentSubject: Prisma.$AssessmentSubjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      studentId: string
      year: string
      academicyear: string
      assessment: string
    }, ExtArgs["result"]["assessment"]>
    composites: {}
  }


  type AssessmentGetPayload<S extends boolean | null | undefined | AssessmentDefaultArgs> = $Result.GetResult<Prisma.$AssessmentPayload, S>

  type AssessmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AssessmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AssessmentCountAggregateInputType | true
    }

  export interface AssessmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Assessment'], meta: { name: 'Assessment' } }
    /**
     * Find zero or one Assessment that matches the filter.
     * @param {AssessmentFindUniqueArgs} args - Arguments to find a Assessment
     * @example
     * // Get one Assessment
     * const assessment = await prisma.assessment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AssessmentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AssessmentFindUniqueArgs<ExtArgs>>
    ): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Assessment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AssessmentFindUniqueOrThrowArgs} args - Arguments to find a Assessment
     * @example
     * // Get one Assessment
     * const assessment = await prisma.assessment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AssessmentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AssessmentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Assessment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentFindFirstArgs} args - Arguments to find a Assessment
     * @example
     * // Get one Assessment
     * const assessment = await prisma.assessment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AssessmentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AssessmentFindFirstArgs<ExtArgs>>
    ): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Assessment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentFindFirstOrThrowArgs} args - Arguments to find a Assessment
     * @example
     * // Get one Assessment
     * const assessment = await prisma.assessment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AssessmentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AssessmentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Assessments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assessments
     * const assessments = await prisma.assessment.findMany()
     * 
     * // Get first 10 Assessments
     * const assessments = await prisma.assessment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assessmentWithIdOnly = await prisma.assessment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AssessmentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AssessmentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Assessment.
     * @param {AssessmentCreateArgs} args - Arguments to create a Assessment.
     * @example
     * // Create one Assessment
     * const Assessment = await prisma.assessment.create({
     *   data: {
     *     // ... data to create a Assessment
     *   }
     * })
     * 
    **/
    create<T extends AssessmentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AssessmentCreateArgs<ExtArgs>>
    ): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Assessments.
     *     @param {AssessmentCreateManyArgs} args - Arguments to create many Assessments.
     *     @example
     *     // Create many Assessments
     *     const assessment = await prisma.assessment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AssessmentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AssessmentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Assessment.
     * @param {AssessmentDeleteArgs} args - Arguments to delete one Assessment.
     * @example
     * // Delete one Assessment
     * const Assessment = await prisma.assessment.delete({
     *   where: {
     *     // ... filter to delete one Assessment
     *   }
     * })
     * 
    **/
    delete<T extends AssessmentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AssessmentDeleteArgs<ExtArgs>>
    ): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Assessment.
     * @param {AssessmentUpdateArgs} args - Arguments to update one Assessment.
     * @example
     * // Update one Assessment
     * const assessment = await prisma.assessment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AssessmentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AssessmentUpdateArgs<ExtArgs>>
    ): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Assessments.
     * @param {AssessmentDeleteManyArgs} args - Arguments to filter Assessments to delete.
     * @example
     * // Delete a few Assessments
     * const { count } = await prisma.assessment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AssessmentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AssessmentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assessments
     * const assessment = await prisma.assessment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AssessmentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AssessmentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Assessment.
     * @param {AssessmentUpsertArgs} args - Arguments to update or create a Assessment.
     * @example
     * // Update or create a Assessment
     * const assessment = await prisma.assessment.upsert({
     *   create: {
     *     // ... data to create a Assessment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Assessment we want to update
     *   }
     * })
    **/
    upsert<T extends AssessmentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AssessmentUpsertArgs<ExtArgs>>
    ): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Assessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentCountArgs} args - Arguments to filter Assessments to count.
     * @example
     * // Count the number of Assessments
     * const count = await prisma.assessment.count({
     *   where: {
     *     // ... the filter for the Assessments we want to count
     *   }
     * })
    **/
    count<T extends AssessmentCountArgs>(
      args?: Subset<T, AssessmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssessmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Assessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssessmentAggregateArgs>(args: Subset<T, AssessmentAggregateArgs>): Prisma.PrismaPromise<GetAssessmentAggregateType<T>>

    /**
     * Group by Assessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssessmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssessmentGroupByArgs['orderBy'] }
        : { orderBy?: AssessmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssessmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssessmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Assessment model
   */
  readonly fields: AssessmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Assessment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssessmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    AssessmentSubject<T extends Assessment$AssessmentSubjectArgs<ExtArgs> = {}>(args?: Subset<T, Assessment$AssessmentSubjectArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentSubjectPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Assessment model
   */ 
  interface AssessmentFieldRefs {
    readonly id: FieldRef<"Assessment", 'String'>
    readonly studentId: FieldRef<"Assessment", 'String'>
    readonly year: FieldRef<"Assessment", 'String'>
    readonly academicyear: FieldRef<"Assessment", 'String'>
    readonly assessment: FieldRef<"Assessment", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Assessment findUnique
   */
  export type AssessmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * Filter, which Assessment to fetch.
     */
    where: AssessmentWhereUniqueInput
  }


  /**
   * Assessment findUniqueOrThrow
   */
  export type AssessmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * Filter, which Assessment to fetch.
     */
    where: AssessmentWhereUniqueInput
  }


  /**
   * Assessment findFirst
   */
  export type AssessmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * Filter, which Assessment to fetch.
     */
    where?: AssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assessments to fetch.
     */
    orderBy?: AssessmentOrderByWithRelationInput | AssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assessments.
     */
    cursor?: AssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assessments.
     */
    distinct?: AssessmentScalarFieldEnum | AssessmentScalarFieldEnum[]
  }


  /**
   * Assessment findFirstOrThrow
   */
  export type AssessmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * Filter, which Assessment to fetch.
     */
    where?: AssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assessments to fetch.
     */
    orderBy?: AssessmentOrderByWithRelationInput | AssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assessments.
     */
    cursor?: AssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assessments.
     */
    distinct?: AssessmentScalarFieldEnum | AssessmentScalarFieldEnum[]
  }


  /**
   * Assessment findMany
   */
  export type AssessmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * Filter, which Assessments to fetch.
     */
    where?: AssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assessments to fetch.
     */
    orderBy?: AssessmentOrderByWithRelationInput | AssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Assessments.
     */
    cursor?: AssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assessments.
     */
    skip?: number
    distinct?: AssessmentScalarFieldEnum | AssessmentScalarFieldEnum[]
  }


  /**
   * Assessment create
   */
  export type AssessmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Assessment.
     */
    data: XOR<AssessmentCreateInput, AssessmentUncheckedCreateInput>
  }


  /**
   * Assessment createMany
   */
  export type AssessmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Assessments.
     */
    data: AssessmentCreateManyInput | AssessmentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Assessment update
   */
  export type AssessmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Assessment.
     */
    data: XOR<AssessmentUpdateInput, AssessmentUncheckedUpdateInput>
    /**
     * Choose, which Assessment to update.
     */
    where: AssessmentWhereUniqueInput
  }


  /**
   * Assessment updateMany
   */
  export type AssessmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Assessments.
     */
    data: XOR<AssessmentUpdateManyMutationInput, AssessmentUncheckedUpdateManyInput>
    /**
     * Filter which Assessments to update
     */
    where?: AssessmentWhereInput
  }


  /**
   * Assessment upsert
   */
  export type AssessmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Assessment to update in case it exists.
     */
    where: AssessmentWhereUniqueInput
    /**
     * In case the Assessment found by the `where` argument doesn't exist, create a new Assessment with this data.
     */
    create: XOR<AssessmentCreateInput, AssessmentUncheckedCreateInput>
    /**
     * In case the Assessment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssessmentUpdateInput, AssessmentUncheckedUpdateInput>
  }


  /**
   * Assessment delete
   */
  export type AssessmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * Filter which Assessment to delete.
     */
    where: AssessmentWhereUniqueInput
  }


  /**
   * Assessment deleteMany
   */
  export type AssessmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assessments to delete
     */
    where?: AssessmentWhereInput
  }


  /**
   * Assessment.AssessmentSubject
   */
  export type Assessment$AssessmentSubjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentSubject
     */
    select?: AssessmentSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssessmentSubjectInclude<ExtArgs> | null
    where?: AssessmentSubjectWhereInput
    orderBy?: AssessmentSubjectOrderByWithRelationInput | AssessmentSubjectOrderByWithRelationInput[]
    cursor?: AssessmentSubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssessmentSubjectScalarFieldEnum | AssessmentSubjectScalarFieldEnum[]
  }


  /**
   * Assessment without action
   */
  export type AssessmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssessmentInclude<ExtArgs> | null
  }



  /**
   * Model AssessmentSubject
   */

  export type AggregateAssessmentSubject = {
    _count: AssessmentSubjectCountAggregateOutputType | null
    _avg: AssessmentSubjectAvgAggregateOutputType | null
    _sum: AssessmentSubjectSumAggregateOutputType | null
    _min: AssessmentSubjectMinAggregateOutputType | null
    _max: AssessmentSubjectMaxAggregateOutputType | null
  }

  export type AssessmentSubjectAvgAggregateOutputType = {
    theoryMarks: number | null
    practicalMarks: number | null
  }

  export type AssessmentSubjectSumAggregateOutputType = {
    theoryMarks: number | null
    practicalMarks: number | null
  }

  export type AssessmentSubjectMinAggregateOutputType = {
    id: string | null
    assessmentId: string | null
    subject: string | null
    theoryMarks: number | null
    practicalMarks: number | null
  }

  export type AssessmentSubjectMaxAggregateOutputType = {
    id: string | null
    assessmentId: string | null
    subject: string | null
    theoryMarks: number | null
    practicalMarks: number | null
  }

  export type AssessmentSubjectCountAggregateOutputType = {
    id: number
    assessmentId: number
    subject: number
    theoryMarks: number
    practicalMarks: number
    _all: number
  }


  export type AssessmentSubjectAvgAggregateInputType = {
    theoryMarks?: true
    practicalMarks?: true
  }

  export type AssessmentSubjectSumAggregateInputType = {
    theoryMarks?: true
    practicalMarks?: true
  }

  export type AssessmentSubjectMinAggregateInputType = {
    id?: true
    assessmentId?: true
    subject?: true
    theoryMarks?: true
    practicalMarks?: true
  }

  export type AssessmentSubjectMaxAggregateInputType = {
    id?: true
    assessmentId?: true
    subject?: true
    theoryMarks?: true
    practicalMarks?: true
  }

  export type AssessmentSubjectCountAggregateInputType = {
    id?: true
    assessmentId?: true
    subject?: true
    theoryMarks?: true
    practicalMarks?: true
    _all?: true
  }

  export type AssessmentSubjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssessmentSubject to aggregate.
     */
    where?: AssessmentSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssessmentSubjects to fetch.
     */
    orderBy?: AssessmentSubjectOrderByWithRelationInput | AssessmentSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssessmentSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssessmentSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssessmentSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AssessmentSubjects
    **/
    _count?: true | AssessmentSubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssessmentSubjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssessmentSubjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssessmentSubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssessmentSubjectMaxAggregateInputType
  }

  export type GetAssessmentSubjectAggregateType<T extends AssessmentSubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateAssessmentSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssessmentSubject[P]>
      : GetScalarType<T[P], AggregateAssessmentSubject[P]>
  }




  export type AssessmentSubjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssessmentSubjectWhereInput
    orderBy?: AssessmentSubjectOrderByWithAggregationInput | AssessmentSubjectOrderByWithAggregationInput[]
    by: AssessmentSubjectScalarFieldEnum[] | AssessmentSubjectScalarFieldEnum
    having?: AssessmentSubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssessmentSubjectCountAggregateInputType | true
    _avg?: AssessmentSubjectAvgAggregateInputType
    _sum?: AssessmentSubjectSumAggregateInputType
    _min?: AssessmentSubjectMinAggregateInputType
    _max?: AssessmentSubjectMaxAggregateInputType
  }

  export type AssessmentSubjectGroupByOutputType = {
    id: string
    assessmentId: string
    subject: string
    theoryMarks: number
    practicalMarks: number
    _count: AssessmentSubjectCountAggregateOutputType | null
    _avg: AssessmentSubjectAvgAggregateOutputType | null
    _sum: AssessmentSubjectSumAggregateOutputType | null
    _min: AssessmentSubjectMinAggregateOutputType | null
    _max: AssessmentSubjectMaxAggregateOutputType | null
  }

  type GetAssessmentSubjectGroupByPayload<T extends AssessmentSubjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssessmentSubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssessmentSubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssessmentSubjectGroupByOutputType[P]>
            : GetScalarType<T[P], AssessmentSubjectGroupByOutputType[P]>
        }
      >
    >


  export type AssessmentSubjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assessmentId?: boolean
    subject?: boolean
    theoryMarks?: boolean
    practicalMarks?: boolean
    Assessment?: boolean | AssessmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assessmentSubject"]>

  export type AssessmentSubjectSelectScalar = {
    id?: boolean
    assessmentId?: boolean
    subject?: boolean
    theoryMarks?: boolean
    practicalMarks?: boolean
  }

  export type AssessmentSubjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Assessment?: boolean | AssessmentDefaultArgs<ExtArgs>
  }


  export type $AssessmentSubjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AssessmentSubject"
    objects: {
      Assessment: Prisma.$AssessmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      assessmentId: string
      subject: string
      theoryMarks: number
      practicalMarks: number
    }, ExtArgs["result"]["assessmentSubject"]>
    composites: {}
  }


  type AssessmentSubjectGetPayload<S extends boolean | null | undefined | AssessmentSubjectDefaultArgs> = $Result.GetResult<Prisma.$AssessmentSubjectPayload, S>

  type AssessmentSubjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AssessmentSubjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AssessmentSubjectCountAggregateInputType | true
    }

  export interface AssessmentSubjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AssessmentSubject'], meta: { name: 'AssessmentSubject' } }
    /**
     * Find zero or one AssessmentSubject that matches the filter.
     * @param {AssessmentSubjectFindUniqueArgs} args - Arguments to find a AssessmentSubject
     * @example
     * // Get one AssessmentSubject
     * const assessmentSubject = await prisma.assessmentSubject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AssessmentSubjectFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AssessmentSubjectFindUniqueArgs<ExtArgs>>
    ): Prisma__AssessmentSubjectClient<$Result.GetResult<Prisma.$AssessmentSubjectPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AssessmentSubject that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AssessmentSubjectFindUniqueOrThrowArgs} args - Arguments to find a AssessmentSubject
     * @example
     * // Get one AssessmentSubject
     * const assessmentSubject = await prisma.assessmentSubject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AssessmentSubjectFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AssessmentSubjectFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AssessmentSubjectClient<$Result.GetResult<Prisma.$AssessmentSubjectPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AssessmentSubject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentSubjectFindFirstArgs} args - Arguments to find a AssessmentSubject
     * @example
     * // Get one AssessmentSubject
     * const assessmentSubject = await prisma.assessmentSubject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AssessmentSubjectFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AssessmentSubjectFindFirstArgs<ExtArgs>>
    ): Prisma__AssessmentSubjectClient<$Result.GetResult<Prisma.$AssessmentSubjectPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AssessmentSubject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentSubjectFindFirstOrThrowArgs} args - Arguments to find a AssessmentSubject
     * @example
     * // Get one AssessmentSubject
     * const assessmentSubject = await prisma.assessmentSubject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AssessmentSubjectFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AssessmentSubjectFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AssessmentSubjectClient<$Result.GetResult<Prisma.$AssessmentSubjectPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AssessmentSubjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentSubjectFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AssessmentSubjects
     * const assessmentSubjects = await prisma.assessmentSubject.findMany()
     * 
     * // Get first 10 AssessmentSubjects
     * const assessmentSubjects = await prisma.assessmentSubject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assessmentSubjectWithIdOnly = await prisma.assessmentSubject.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AssessmentSubjectFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AssessmentSubjectFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentSubjectPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AssessmentSubject.
     * @param {AssessmentSubjectCreateArgs} args - Arguments to create a AssessmentSubject.
     * @example
     * // Create one AssessmentSubject
     * const AssessmentSubject = await prisma.assessmentSubject.create({
     *   data: {
     *     // ... data to create a AssessmentSubject
     *   }
     * })
     * 
    **/
    create<T extends AssessmentSubjectCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AssessmentSubjectCreateArgs<ExtArgs>>
    ): Prisma__AssessmentSubjectClient<$Result.GetResult<Prisma.$AssessmentSubjectPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many AssessmentSubjects.
     *     @param {AssessmentSubjectCreateManyArgs} args - Arguments to create many AssessmentSubjects.
     *     @example
     *     // Create many AssessmentSubjects
     *     const assessmentSubject = await prisma.assessmentSubject.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AssessmentSubjectCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AssessmentSubjectCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AssessmentSubject.
     * @param {AssessmentSubjectDeleteArgs} args - Arguments to delete one AssessmentSubject.
     * @example
     * // Delete one AssessmentSubject
     * const AssessmentSubject = await prisma.assessmentSubject.delete({
     *   where: {
     *     // ... filter to delete one AssessmentSubject
     *   }
     * })
     * 
    **/
    delete<T extends AssessmentSubjectDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AssessmentSubjectDeleteArgs<ExtArgs>>
    ): Prisma__AssessmentSubjectClient<$Result.GetResult<Prisma.$AssessmentSubjectPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AssessmentSubject.
     * @param {AssessmentSubjectUpdateArgs} args - Arguments to update one AssessmentSubject.
     * @example
     * // Update one AssessmentSubject
     * const assessmentSubject = await prisma.assessmentSubject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AssessmentSubjectUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AssessmentSubjectUpdateArgs<ExtArgs>>
    ): Prisma__AssessmentSubjectClient<$Result.GetResult<Prisma.$AssessmentSubjectPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AssessmentSubjects.
     * @param {AssessmentSubjectDeleteManyArgs} args - Arguments to filter AssessmentSubjects to delete.
     * @example
     * // Delete a few AssessmentSubjects
     * const { count } = await prisma.assessmentSubject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AssessmentSubjectDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AssessmentSubjectDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssessmentSubjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentSubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AssessmentSubjects
     * const assessmentSubject = await prisma.assessmentSubject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AssessmentSubjectUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AssessmentSubjectUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AssessmentSubject.
     * @param {AssessmentSubjectUpsertArgs} args - Arguments to update or create a AssessmentSubject.
     * @example
     * // Update or create a AssessmentSubject
     * const assessmentSubject = await prisma.assessmentSubject.upsert({
     *   create: {
     *     // ... data to create a AssessmentSubject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AssessmentSubject we want to update
     *   }
     * })
    **/
    upsert<T extends AssessmentSubjectUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AssessmentSubjectUpsertArgs<ExtArgs>>
    ): Prisma__AssessmentSubjectClient<$Result.GetResult<Prisma.$AssessmentSubjectPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AssessmentSubjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentSubjectCountArgs} args - Arguments to filter AssessmentSubjects to count.
     * @example
     * // Count the number of AssessmentSubjects
     * const count = await prisma.assessmentSubject.count({
     *   where: {
     *     // ... the filter for the AssessmentSubjects we want to count
     *   }
     * })
    **/
    count<T extends AssessmentSubjectCountArgs>(
      args?: Subset<T, AssessmentSubjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssessmentSubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AssessmentSubject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentSubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssessmentSubjectAggregateArgs>(args: Subset<T, AssessmentSubjectAggregateArgs>): Prisma.PrismaPromise<GetAssessmentSubjectAggregateType<T>>

    /**
     * Group by AssessmentSubject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentSubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssessmentSubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssessmentSubjectGroupByArgs['orderBy'] }
        : { orderBy?: AssessmentSubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssessmentSubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssessmentSubjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AssessmentSubject model
   */
  readonly fields: AssessmentSubjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AssessmentSubject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssessmentSubjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Assessment<T extends AssessmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssessmentDefaultArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the AssessmentSubject model
   */ 
  interface AssessmentSubjectFieldRefs {
    readonly id: FieldRef<"AssessmentSubject", 'String'>
    readonly assessmentId: FieldRef<"AssessmentSubject", 'String'>
    readonly subject: FieldRef<"AssessmentSubject", 'String'>
    readonly theoryMarks: FieldRef<"AssessmentSubject", 'Int'>
    readonly practicalMarks: FieldRef<"AssessmentSubject", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * AssessmentSubject findUnique
   */
  export type AssessmentSubjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentSubject
     */
    select?: AssessmentSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssessmentSubjectInclude<ExtArgs> | null
    /**
     * Filter, which AssessmentSubject to fetch.
     */
    where: AssessmentSubjectWhereUniqueInput
  }


  /**
   * AssessmentSubject findUniqueOrThrow
   */
  export type AssessmentSubjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentSubject
     */
    select?: AssessmentSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssessmentSubjectInclude<ExtArgs> | null
    /**
     * Filter, which AssessmentSubject to fetch.
     */
    where: AssessmentSubjectWhereUniqueInput
  }


  /**
   * AssessmentSubject findFirst
   */
  export type AssessmentSubjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentSubject
     */
    select?: AssessmentSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssessmentSubjectInclude<ExtArgs> | null
    /**
     * Filter, which AssessmentSubject to fetch.
     */
    where?: AssessmentSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssessmentSubjects to fetch.
     */
    orderBy?: AssessmentSubjectOrderByWithRelationInput | AssessmentSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssessmentSubjects.
     */
    cursor?: AssessmentSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssessmentSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssessmentSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssessmentSubjects.
     */
    distinct?: AssessmentSubjectScalarFieldEnum | AssessmentSubjectScalarFieldEnum[]
  }


  /**
   * AssessmentSubject findFirstOrThrow
   */
  export type AssessmentSubjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentSubject
     */
    select?: AssessmentSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssessmentSubjectInclude<ExtArgs> | null
    /**
     * Filter, which AssessmentSubject to fetch.
     */
    where?: AssessmentSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssessmentSubjects to fetch.
     */
    orderBy?: AssessmentSubjectOrderByWithRelationInput | AssessmentSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssessmentSubjects.
     */
    cursor?: AssessmentSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssessmentSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssessmentSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssessmentSubjects.
     */
    distinct?: AssessmentSubjectScalarFieldEnum | AssessmentSubjectScalarFieldEnum[]
  }


  /**
   * AssessmentSubject findMany
   */
  export type AssessmentSubjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentSubject
     */
    select?: AssessmentSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssessmentSubjectInclude<ExtArgs> | null
    /**
     * Filter, which AssessmentSubjects to fetch.
     */
    where?: AssessmentSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssessmentSubjects to fetch.
     */
    orderBy?: AssessmentSubjectOrderByWithRelationInput | AssessmentSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AssessmentSubjects.
     */
    cursor?: AssessmentSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssessmentSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssessmentSubjects.
     */
    skip?: number
    distinct?: AssessmentSubjectScalarFieldEnum | AssessmentSubjectScalarFieldEnum[]
  }


  /**
   * AssessmentSubject create
   */
  export type AssessmentSubjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentSubject
     */
    select?: AssessmentSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssessmentSubjectInclude<ExtArgs> | null
    /**
     * The data needed to create a AssessmentSubject.
     */
    data: XOR<AssessmentSubjectCreateInput, AssessmentSubjectUncheckedCreateInput>
  }


  /**
   * AssessmentSubject createMany
   */
  export type AssessmentSubjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AssessmentSubjects.
     */
    data: AssessmentSubjectCreateManyInput | AssessmentSubjectCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * AssessmentSubject update
   */
  export type AssessmentSubjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentSubject
     */
    select?: AssessmentSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssessmentSubjectInclude<ExtArgs> | null
    /**
     * The data needed to update a AssessmentSubject.
     */
    data: XOR<AssessmentSubjectUpdateInput, AssessmentSubjectUncheckedUpdateInput>
    /**
     * Choose, which AssessmentSubject to update.
     */
    where: AssessmentSubjectWhereUniqueInput
  }


  /**
   * AssessmentSubject updateMany
   */
  export type AssessmentSubjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AssessmentSubjects.
     */
    data: XOR<AssessmentSubjectUpdateManyMutationInput, AssessmentSubjectUncheckedUpdateManyInput>
    /**
     * Filter which AssessmentSubjects to update
     */
    where?: AssessmentSubjectWhereInput
  }


  /**
   * AssessmentSubject upsert
   */
  export type AssessmentSubjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentSubject
     */
    select?: AssessmentSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssessmentSubjectInclude<ExtArgs> | null
    /**
     * The filter to search for the AssessmentSubject to update in case it exists.
     */
    where: AssessmentSubjectWhereUniqueInput
    /**
     * In case the AssessmentSubject found by the `where` argument doesn't exist, create a new AssessmentSubject with this data.
     */
    create: XOR<AssessmentSubjectCreateInput, AssessmentSubjectUncheckedCreateInput>
    /**
     * In case the AssessmentSubject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssessmentSubjectUpdateInput, AssessmentSubjectUncheckedUpdateInput>
  }


  /**
   * AssessmentSubject delete
   */
  export type AssessmentSubjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentSubject
     */
    select?: AssessmentSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssessmentSubjectInclude<ExtArgs> | null
    /**
     * Filter which AssessmentSubject to delete.
     */
    where: AssessmentSubjectWhereUniqueInput
  }


  /**
   * AssessmentSubject deleteMany
   */
  export type AssessmentSubjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssessmentSubjects to delete
     */
    where?: AssessmentSubjectWhereInput
  }


  /**
   * AssessmentSubject without action
   */
  export type AssessmentSubjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentSubject
     */
    select?: AssessmentSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssessmentSubjectInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const StudentScalarFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    rollNo: 'rollNo',
    email: 'email',
    mobile: 'mobile',
    gender: 'gender',
    password: 'password',
    role: 'role'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const YearScalarFieldEnum: {
    id: 'id',
    year: 'year',
    studentId: 'studentId'
  };

  export type YearScalarFieldEnum = (typeof YearScalarFieldEnum)[keyof typeof YearScalarFieldEnum]


  export const AcademicyearScalarFieldEnum: {
    id: 'id',
    academicyear: 'academicyear',
    studentId: 'studentId'
  };

  export type AcademicyearScalarFieldEnum = (typeof AcademicyearScalarFieldEnum)[keyof typeof AcademicyearScalarFieldEnum]


  export const TimetableScalarFieldEnum: {
    id: 'id',
    year: 'year',
    academicyear: 'academicyear'
  };

  export type TimetableScalarFieldEnum = (typeof TimetableScalarFieldEnum)[keyof typeof TimetableScalarFieldEnum]


  export const DaysScalarFieldEnum: {
    id: 'id',
    day: 'day',
    timetableId: 'timetableId'
  };

  export type DaysScalarFieldEnum = (typeof DaysScalarFieldEnum)[keyof typeof DaysScalarFieldEnum]


  export const PeriodsScalarFieldEnum: {
    id: 'id',
    daysId: 'daysId',
    time: 'time',
    subject: 'subject'
  };

  export type PeriodsScalarFieldEnum = (typeof PeriodsScalarFieldEnum)[keyof typeof PeriodsScalarFieldEnum]


  export const AttendenceScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    date: 'date'
  };

  export type AttendenceScalarFieldEnum = (typeof AttendenceScalarFieldEnum)[keyof typeof AttendenceScalarFieldEnum]


  export const SubjectScalarFieldEnum: {
    id: 'id',
    attendenceId: 'attendenceId',
    time: 'time',
    subject: 'subject',
    present: 'present'
  };

  export type SubjectScalarFieldEnum = (typeof SubjectScalarFieldEnum)[keyof typeof SubjectScalarFieldEnum]


  export const AssessmentScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    year: 'year',
    academicyear: 'academicyear',
    assessment: 'assessment'
  };

  export type AssessmentScalarFieldEnum = (typeof AssessmentScalarFieldEnum)[keyof typeof AssessmentScalarFieldEnum]


  export const AssessmentSubjectScalarFieldEnum: {
    id: 'id',
    assessmentId: 'assessmentId',
    subject: 'subject',
    theoryMarks: 'theoryMarks',
    practicalMarks: 'practicalMarks'
  };

  export type AssessmentSubjectScalarFieldEnum = (typeof AssessmentSubjectScalarFieldEnum)[keyof typeof AssessmentSubjectScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type StudentWhereInput = {
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    id?: StringFilter<"Student"> | string
    fullName?: StringFilter<"Student"> | string
    rollNo?: IntNullableFilter<"Student"> | number | null
    email?: StringNullableFilter<"Student"> | string | null
    mobile?: StringNullableFilter<"Student"> | string | null
    gender?: StringNullableFilter<"Student"> | string | null
    password?: StringNullableFilter<"Student"> | string | null
    role?: StringFilter<"Student"> | string
    year?: YearListRelationFilter
    academicyear?: AcademicyearListRelationFilter
    Attendence?: AttendenceListRelationFilter
    Assessment?: AssessmentListRelationFilter
  }

  export type StudentOrderByWithRelationInput = {
    id?: SortOrder
    fullName?: SortOrder
    rollNo?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    mobile?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    role?: SortOrder
    year?: YearOrderByRelationAggregateInput
    academicyear?: AcademicyearOrderByRelationAggregateInput
    Attendence?: AttendenceOrderByRelationAggregateInput
    Assessment?: AssessmentOrderByRelationAggregateInput
  }

  export type StudentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    fullName?: StringFilter<"Student"> | string
    rollNo?: IntNullableFilter<"Student"> | number | null
    email?: StringNullableFilter<"Student"> | string | null
    mobile?: StringNullableFilter<"Student"> | string | null
    gender?: StringNullableFilter<"Student"> | string | null
    password?: StringNullableFilter<"Student"> | string | null
    role?: StringFilter<"Student"> | string
    year?: YearListRelationFilter
    academicyear?: AcademicyearListRelationFilter
    Attendence?: AttendenceListRelationFilter
    Assessment?: AssessmentListRelationFilter
  }, "id">

  export type StudentOrderByWithAggregationInput = {
    id?: SortOrder
    fullName?: SortOrder
    rollNo?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    mobile?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    role?: SortOrder
    _count?: StudentCountOrderByAggregateInput
    _avg?: StudentAvgOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
    _sum?: StudentSumOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    OR?: StudentScalarWhereWithAggregatesInput[]
    NOT?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Student"> | string
    fullName?: StringWithAggregatesFilter<"Student"> | string
    rollNo?: IntNullableWithAggregatesFilter<"Student"> | number | null
    email?: StringNullableWithAggregatesFilter<"Student"> | string | null
    mobile?: StringNullableWithAggregatesFilter<"Student"> | string | null
    gender?: StringNullableWithAggregatesFilter<"Student"> | string | null
    password?: StringNullableWithAggregatesFilter<"Student"> | string | null
    role?: StringWithAggregatesFilter<"Student"> | string
  }

  export type YearWhereInput = {
    AND?: YearWhereInput | YearWhereInput[]
    OR?: YearWhereInput[]
    NOT?: YearWhereInput | YearWhereInput[]
    id?: IntFilter<"Year"> | number
    year?: StringFilter<"Year"> | string
    studentId?: StringFilter<"Year"> | string
    Student?: XOR<StudentRelationFilter, StudentWhereInput>
  }

  export type YearOrderByWithRelationInput = {
    id?: SortOrder
    year?: SortOrder
    studentId?: SortOrder
    Student?: StudentOrderByWithRelationInput
  }

  export type YearWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: YearWhereInput | YearWhereInput[]
    OR?: YearWhereInput[]
    NOT?: YearWhereInput | YearWhereInput[]
    year?: StringFilter<"Year"> | string
    studentId?: StringFilter<"Year"> | string
    Student?: XOR<StudentRelationFilter, StudentWhereInput>
  }, "id">

  export type YearOrderByWithAggregationInput = {
    id?: SortOrder
    year?: SortOrder
    studentId?: SortOrder
    _count?: YearCountOrderByAggregateInput
    _avg?: YearAvgOrderByAggregateInput
    _max?: YearMaxOrderByAggregateInput
    _min?: YearMinOrderByAggregateInput
    _sum?: YearSumOrderByAggregateInput
  }

  export type YearScalarWhereWithAggregatesInput = {
    AND?: YearScalarWhereWithAggregatesInput | YearScalarWhereWithAggregatesInput[]
    OR?: YearScalarWhereWithAggregatesInput[]
    NOT?: YearScalarWhereWithAggregatesInput | YearScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Year"> | number
    year?: StringWithAggregatesFilter<"Year"> | string
    studentId?: StringWithAggregatesFilter<"Year"> | string
  }

  export type AcademicyearWhereInput = {
    AND?: AcademicyearWhereInput | AcademicyearWhereInput[]
    OR?: AcademicyearWhereInput[]
    NOT?: AcademicyearWhereInput | AcademicyearWhereInput[]
    id?: IntFilter<"Academicyear"> | number
    academicyear?: StringFilter<"Academicyear"> | string
    studentId?: StringFilter<"Academicyear"> | string
    Student?: XOR<StudentRelationFilter, StudentWhereInput>
  }

  export type AcademicyearOrderByWithRelationInput = {
    id?: SortOrder
    academicyear?: SortOrder
    studentId?: SortOrder
    Student?: StudentOrderByWithRelationInput
  }

  export type AcademicyearWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AcademicyearWhereInput | AcademicyearWhereInput[]
    OR?: AcademicyearWhereInput[]
    NOT?: AcademicyearWhereInput | AcademicyearWhereInput[]
    academicyear?: StringFilter<"Academicyear"> | string
    studentId?: StringFilter<"Academicyear"> | string
    Student?: XOR<StudentRelationFilter, StudentWhereInput>
  }, "id">

  export type AcademicyearOrderByWithAggregationInput = {
    id?: SortOrder
    academicyear?: SortOrder
    studentId?: SortOrder
    _count?: AcademicyearCountOrderByAggregateInput
    _avg?: AcademicyearAvgOrderByAggregateInput
    _max?: AcademicyearMaxOrderByAggregateInput
    _min?: AcademicyearMinOrderByAggregateInput
    _sum?: AcademicyearSumOrderByAggregateInput
  }

  export type AcademicyearScalarWhereWithAggregatesInput = {
    AND?: AcademicyearScalarWhereWithAggregatesInput | AcademicyearScalarWhereWithAggregatesInput[]
    OR?: AcademicyearScalarWhereWithAggregatesInput[]
    NOT?: AcademicyearScalarWhereWithAggregatesInput | AcademicyearScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Academicyear"> | number
    academicyear?: StringWithAggregatesFilter<"Academicyear"> | string
    studentId?: StringWithAggregatesFilter<"Academicyear"> | string
  }

  export type TimetableWhereInput = {
    AND?: TimetableWhereInput | TimetableWhereInput[]
    OR?: TimetableWhereInput[]
    NOT?: TimetableWhereInput | TimetableWhereInput[]
    id?: StringFilter<"Timetable"> | string
    year?: StringFilter<"Timetable"> | string
    academicyear?: StringFilter<"Timetable"> | string
    Days?: DaysListRelationFilter
  }

  export type TimetableOrderByWithRelationInput = {
    id?: SortOrder
    year?: SortOrder
    academicyear?: SortOrder
    Days?: DaysOrderByRelationAggregateInput
  }

  export type TimetableWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TimetableWhereInput | TimetableWhereInput[]
    OR?: TimetableWhereInput[]
    NOT?: TimetableWhereInput | TimetableWhereInput[]
    year?: StringFilter<"Timetable"> | string
    academicyear?: StringFilter<"Timetable"> | string
    Days?: DaysListRelationFilter
  }, "id">

  export type TimetableOrderByWithAggregationInput = {
    id?: SortOrder
    year?: SortOrder
    academicyear?: SortOrder
    _count?: TimetableCountOrderByAggregateInput
    _max?: TimetableMaxOrderByAggregateInput
    _min?: TimetableMinOrderByAggregateInput
  }

  export type TimetableScalarWhereWithAggregatesInput = {
    AND?: TimetableScalarWhereWithAggregatesInput | TimetableScalarWhereWithAggregatesInput[]
    OR?: TimetableScalarWhereWithAggregatesInput[]
    NOT?: TimetableScalarWhereWithAggregatesInput | TimetableScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Timetable"> | string
    year?: StringWithAggregatesFilter<"Timetable"> | string
    academicyear?: StringWithAggregatesFilter<"Timetable"> | string
  }

  export type DaysWhereInput = {
    AND?: DaysWhereInput | DaysWhereInput[]
    OR?: DaysWhereInput[]
    NOT?: DaysWhereInput | DaysWhereInput[]
    id?: StringFilter<"Days"> | string
    day?: StringFilter<"Days"> | string
    timetableId?: StringFilter<"Days"> | string
    Timetable?: XOR<TimetableRelationFilter, TimetableWhereInput>
    Periods?: PeriodsListRelationFilter
  }

  export type DaysOrderByWithRelationInput = {
    id?: SortOrder
    day?: SortOrder
    timetableId?: SortOrder
    Timetable?: TimetableOrderByWithRelationInput
    Periods?: PeriodsOrderByRelationAggregateInput
  }

  export type DaysWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DaysWhereInput | DaysWhereInput[]
    OR?: DaysWhereInput[]
    NOT?: DaysWhereInput | DaysWhereInput[]
    day?: StringFilter<"Days"> | string
    timetableId?: StringFilter<"Days"> | string
    Timetable?: XOR<TimetableRelationFilter, TimetableWhereInput>
    Periods?: PeriodsListRelationFilter
  }, "id">

  export type DaysOrderByWithAggregationInput = {
    id?: SortOrder
    day?: SortOrder
    timetableId?: SortOrder
    _count?: DaysCountOrderByAggregateInput
    _max?: DaysMaxOrderByAggregateInput
    _min?: DaysMinOrderByAggregateInput
  }

  export type DaysScalarWhereWithAggregatesInput = {
    AND?: DaysScalarWhereWithAggregatesInput | DaysScalarWhereWithAggregatesInput[]
    OR?: DaysScalarWhereWithAggregatesInput[]
    NOT?: DaysScalarWhereWithAggregatesInput | DaysScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Days"> | string
    day?: StringWithAggregatesFilter<"Days"> | string
    timetableId?: StringWithAggregatesFilter<"Days"> | string
  }

  export type PeriodsWhereInput = {
    AND?: PeriodsWhereInput | PeriodsWhereInput[]
    OR?: PeriodsWhereInput[]
    NOT?: PeriodsWhereInput | PeriodsWhereInput[]
    id?: IntFilter<"Periods"> | number
    daysId?: StringFilter<"Periods"> | string
    time?: StringFilter<"Periods"> | string
    subject?: StringFilter<"Periods"> | string
    Days?: XOR<DaysRelationFilter, DaysWhereInput>
  }

  export type PeriodsOrderByWithRelationInput = {
    id?: SortOrder
    daysId?: SortOrder
    time?: SortOrder
    subject?: SortOrder
    Days?: DaysOrderByWithRelationInput
  }

  export type PeriodsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PeriodsWhereInput | PeriodsWhereInput[]
    OR?: PeriodsWhereInput[]
    NOT?: PeriodsWhereInput | PeriodsWhereInput[]
    daysId?: StringFilter<"Periods"> | string
    time?: StringFilter<"Periods"> | string
    subject?: StringFilter<"Periods"> | string
    Days?: XOR<DaysRelationFilter, DaysWhereInput>
  }, "id">

  export type PeriodsOrderByWithAggregationInput = {
    id?: SortOrder
    daysId?: SortOrder
    time?: SortOrder
    subject?: SortOrder
    _count?: PeriodsCountOrderByAggregateInput
    _avg?: PeriodsAvgOrderByAggregateInput
    _max?: PeriodsMaxOrderByAggregateInput
    _min?: PeriodsMinOrderByAggregateInput
    _sum?: PeriodsSumOrderByAggregateInput
  }

  export type PeriodsScalarWhereWithAggregatesInput = {
    AND?: PeriodsScalarWhereWithAggregatesInput | PeriodsScalarWhereWithAggregatesInput[]
    OR?: PeriodsScalarWhereWithAggregatesInput[]
    NOT?: PeriodsScalarWhereWithAggregatesInput | PeriodsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Periods"> | number
    daysId?: StringWithAggregatesFilter<"Periods"> | string
    time?: StringWithAggregatesFilter<"Periods"> | string
    subject?: StringWithAggregatesFilter<"Periods"> | string
  }

  export type AttendenceWhereInput = {
    AND?: AttendenceWhereInput | AttendenceWhereInput[]
    OR?: AttendenceWhereInput[]
    NOT?: AttendenceWhereInput | AttendenceWhereInput[]
    id?: StringFilter<"Attendence"> | string
    studentId?: StringFilter<"Attendence"> | string
    date?: StringFilter<"Attendence"> | string
    Student?: XOR<StudentRelationFilter, StudentWhereInput>
    Subject?: SubjectListRelationFilter
  }

  export type AttendenceOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    date?: SortOrder
    Student?: StudentOrderByWithRelationInput
    Subject?: SubjectOrderByRelationAggregateInput
  }

  export type AttendenceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AttendenceWhereInput | AttendenceWhereInput[]
    OR?: AttendenceWhereInput[]
    NOT?: AttendenceWhereInput | AttendenceWhereInput[]
    studentId?: StringFilter<"Attendence"> | string
    date?: StringFilter<"Attendence"> | string
    Student?: XOR<StudentRelationFilter, StudentWhereInput>
    Subject?: SubjectListRelationFilter
  }, "id">

  export type AttendenceOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    date?: SortOrder
    _count?: AttendenceCountOrderByAggregateInput
    _max?: AttendenceMaxOrderByAggregateInput
    _min?: AttendenceMinOrderByAggregateInput
  }

  export type AttendenceScalarWhereWithAggregatesInput = {
    AND?: AttendenceScalarWhereWithAggregatesInput | AttendenceScalarWhereWithAggregatesInput[]
    OR?: AttendenceScalarWhereWithAggregatesInput[]
    NOT?: AttendenceScalarWhereWithAggregatesInput | AttendenceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Attendence"> | string
    studentId?: StringWithAggregatesFilter<"Attendence"> | string
    date?: StringWithAggregatesFilter<"Attendence"> | string
  }

  export type SubjectWhereInput = {
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    id?: IntFilter<"Subject"> | number
    attendenceId?: StringFilter<"Subject"> | string
    time?: StringFilter<"Subject"> | string
    subject?: StringFilter<"Subject"> | string
    present?: BoolFilter<"Subject"> | boolean
    Attendence?: XOR<AttendenceRelationFilter, AttendenceWhereInput>
  }

  export type SubjectOrderByWithRelationInput = {
    id?: SortOrder
    attendenceId?: SortOrder
    time?: SortOrder
    subject?: SortOrder
    present?: SortOrder
    Attendence?: AttendenceOrderByWithRelationInput
  }

  export type SubjectWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    attendenceId?: StringFilter<"Subject"> | string
    time?: StringFilter<"Subject"> | string
    subject?: StringFilter<"Subject"> | string
    present?: BoolFilter<"Subject"> | boolean
    Attendence?: XOR<AttendenceRelationFilter, AttendenceWhereInput>
  }, "id">

  export type SubjectOrderByWithAggregationInput = {
    id?: SortOrder
    attendenceId?: SortOrder
    time?: SortOrder
    subject?: SortOrder
    present?: SortOrder
    _count?: SubjectCountOrderByAggregateInput
    _avg?: SubjectAvgOrderByAggregateInput
    _max?: SubjectMaxOrderByAggregateInput
    _min?: SubjectMinOrderByAggregateInput
    _sum?: SubjectSumOrderByAggregateInput
  }

  export type SubjectScalarWhereWithAggregatesInput = {
    AND?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    OR?: SubjectScalarWhereWithAggregatesInput[]
    NOT?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Subject"> | number
    attendenceId?: StringWithAggregatesFilter<"Subject"> | string
    time?: StringWithAggregatesFilter<"Subject"> | string
    subject?: StringWithAggregatesFilter<"Subject"> | string
    present?: BoolWithAggregatesFilter<"Subject"> | boolean
  }

  export type AssessmentWhereInput = {
    AND?: AssessmentWhereInput | AssessmentWhereInput[]
    OR?: AssessmentWhereInput[]
    NOT?: AssessmentWhereInput | AssessmentWhereInput[]
    id?: StringFilter<"Assessment"> | string
    studentId?: StringFilter<"Assessment"> | string
    year?: StringFilter<"Assessment"> | string
    academicyear?: StringFilter<"Assessment"> | string
    assessment?: StringFilter<"Assessment"> | string
    Student?: XOR<StudentRelationFilter, StudentWhereInput>
    AssessmentSubject?: AssessmentSubjectListRelationFilter
  }

  export type AssessmentOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    year?: SortOrder
    academicyear?: SortOrder
    assessment?: SortOrder
    Student?: StudentOrderByWithRelationInput
    AssessmentSubject?: AssessmentSubjectOrderByRelationAggregateInput
  }

  export type AssessmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AssessmentWhereInput | AssessmentWhereInput[]
    OR?: AssessmentWhereInput[]
    NOT?: AssessmentWhereInput | AssessmentWhereInput[]
    studentId?: StringFilter<"Assessment"> | string
    year?: StringFilter<"Assessment"> | string
    academicyear?: StringFilter<"Assessment"> | string
    assessment?: StringFilter<"Assessment"> | string
    Student?: XOR<StudentRelationFilter, StudentWhereInput>
    AssessmentSubject?: AssessmentSubjectListRelationFilter
  }, "id">

  export type AssessmentOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    year?: SortOrder
    academicyear?: SortOrder
    assessment?: SortOrder
    _count?: AssessmentCountOrderByAggregateInput
    _max?: AssessmentMaxOrderByAggregateInput
    _min?: AssessmentMinOrderByAggregateInput
  }

  export type AssessmentScalarWhereWithAggregatesInput = {
    AND?: AssessmentScalarWhereWithAggregatesInput | AssessmentScalarWhereWithAggregatesInput[]
    OR?: AssessmentScalarWhereWithAggregatesInput[]
    NOT?: AssessmentScalarWhereWithAggregatesInput | AssessmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Assessment"> | string
    studentId?: StringWithAggregatesFilter<"Assessment"> | string
    year?: StringWithAggregatesFilter<"Assessment"> | string
    academicyear?: StringWithAggregatesFilter<"Assessment"> | string
    assessment?: StringWithAggregatesFilter<"Assessment"> | string
  }

  export type AssessmentSubjectWhereInput = {
    AND?: AssessmentSubjectWhereInput | AssessmentSubjectWhereInput[]
    OR?: AssessmentSubjectWhereInput[]
    NOT?: AssessmentSubjectWhereInput | AssessmentSubjectWhereInput[]
    id?: StringFilter<"AssessmentSubject"> | string
    assessmentId?: StringFilter<"AssessmentSubject"> | string
    subject?: StringFilter<"AssessmentSubject"> | string
    theoryMarks?: IntFilter<"AssessmentSubject"> | number
    practicalMarks?: IntFilter<"AssessmentSubject"> | number
    Assessment?: XOR<AssessmentRelationFilter, AssessmentWhereInput>
  }

  export type AssessmentSubjectOrderByWithRelationInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    subject?: SortOrder
    theoryMarks?: SortOrder
    practicalMarks?: SortOrder
    Assessment?: AssessmentOrderByWithRelationInput
  }

  export type AssessmentSubjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AssessmentSubjectWhereInput | AssessmentSubjectWhereInput[]
    OR?: AssessmentSubjectWhereInput[]
    NOT?: AssessmentSubjectWhereInput | AssessmentSubjectWhereInput[]
    assessmentId?: StringFilter<"AssessmentSubject"> | string
    subject?: StringFilter<"AssessmentSubject"> | string
    theoryMarks?: IntFilter<"AssessmentSubject"> | number
    practicalMarks?: IntFilter<"AssessmentSubject"> | number
    Assessment?: XOR<AssessmentRelationFilter, AssessmentWhereInput>
  }, "id">

  export type AssessmentSubjectOrderByWithAggregationInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    subject?: SortOrder
    theoryMarks?: SortOrder
    practicalMarks?: SortOrder
    _count?: AssessmentSubjectCountOrderByAggregateInput
    _avg?: AssessmentSubjectAvgOrderByAggregateInput
    _max?: AssessmentSubjectMaxOrderByAggregateInput
    _min?: AssessmentSubjectMinOrderByAggregateInput
    _sum?: AssessmentSubjectSumOrderByAggregateInput
  }

  export type AssessmentSubjectScalarWhereWithAggregatesInput = {
    AND?: AssessmentSubjectScalarWhereWithAggregatesInput | AssessmentSubjectScalarWhereWithAggregatesInput[]
    OR?: AssessmentSubjectScalarWhereWithAggregatesInput[]
    NOT?: AssessmentSubjectScalarWhereWithAggregatesInput | AssessmentSubjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AssessmentSubject"> | string
    assessmentId?: StringWithAggregatesFilter<"AssessmentSubject"> | string
    subject?: StringWithAggregatesFilter<"AssessmentSubject"> | string
    theoryMarks?: IntWithAggregatesFilter<"AssessmentSubject"> | number
    practicalMarks?: IntWithAggregatesFilter<"AssessmentSubject"> | number
  }

  export type StudentCreateInput = {
    id: string
    fullName: string
    rollNo?: number | null
    email?: string | null
    mobile?: string | null
    gender?: string | null
    password?: string | null
    role?: string
    year?: YearCreateNestedManyWithoutStudentInput
    academicyear?: AcademicyearCreateNestedManyWithoutStudentInput
    Attendence?: AttendenceCreateNestedManyWithoutStudentInput
    Assessment?: AssessmentCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateInput = {
    id: string
    fullName: string
    rollNo?: number | null
    email?: string | null
    mobile?: string | null
    gender?: string | null
    password?: string | null
    role?: string
    year?: YearUncheckedCreateNestedManyWithoutStudentInput
    academicyear?: AcademicyearUncheckedCreateNestedManyWithoutStudentInput
    Attendence?: AttendenceUncheckedCreateNestedManyWithoutStudentInput
    Assessment?: AssessmentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    rollNo?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    year?: YearUpdateManyWithoutStudentNestedInput
    academicyear?: AcademicyearUpdateManyWithoutStudentNestedInput
    Attendence?: AttendenceUpdateManyWithoutStudentNestedInput
    Assessment?: AssessmentUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    rollNo?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    year?: YearUncheckedUpdateManyWithoutStudentNestedInput
    academicyear?: AcademicyearUncheckedUpdateManyWithoutStudentNestedInput
    Attendence?: AttendenceUncheckedUpdateManyWithoutStudentNestedInput
    Assessment?: AssessmentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentCreateManyInput = {
    id: string
    fullName: string
    rollNo?: number | null
    email?: string | null
    mobile?: string | null
    gender?: string | null
    password?: string | null
    role?: string
  }

  export type StudentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    rollNo?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
  }

  export type StudentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    rollNo?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
  }

  export type YearCreateInput = {
    year: string
    Student: StudentCreateNestedOneWithoutYearInput
  }

  export type YearUncheckedCreateInput = {
    id?: number
    year: string
    studentId: string
  }

  export type YearUpdateInput = {
    year?: StringFieldUpdateOperationsInput | string
    Student?: StudentUpdateOneRequiredWithoutYearNestedInput
  }

  export type YearUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
  }

  export type YearCreateManyInput = {
    id?: number
    year: string
    studentId: string
  }

  export type YearUpdateManyMutationInput = {
    year?: StringFieldUpdateOperationsInput | string
  }

  export type YearUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
  }

  export type AcademicyearCreateInput = {
    academicyear: string
    Student: StudentCreateNestedOneWithoutAcademicyearInput
  }

  export type AcademicyearUncheckedCreateInput = {
    id?: number
    academicyear: string
    studentId: string
  }

  export type AcademicyearUpdateInput = {
    academicyear?: StringFieldUpdateOperationsInput | string
    Student?: StudentUpdateOneRequiredWithoutAcademicyearNestedInput
  }

  export type AcademicyearUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    academicyear?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
  }

  export type AcademicyearCreateManyInput = {
    id?: number
    academicyear: string
    studentId: string
  }

  export type AcademicyearUpdateManyMutationInput = {
    academicyear?: StringFieldUpdateOperationsInput | string
  }

  export type AcademicyearUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    academicyear?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
  }

  export type TimetableCreateInput = {
    id?: string
    year: string
    academicyear: string
    Days?: DaysCreateNestedManyWithoutTimetableInput
  }

  export type TimetableUncheckedCreateInput = {
    id?: string
    year: string
    academicyear: string
    Days?: DaysUncheckedCreateNestedManyWithoutTimetableInput
  }

  export type TimetableUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    academicyear?: StringFieldUpdateOperationsInput | string
    Days?: DaysUpdateManyWithoutTimetableNestedInput
  }

  export type TimetableUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    academicyear?: StringFieldUpdateOperationsInput | string
    Days?: DaysUncheckedUpdateManyWithoutTimetableNestedInput
  }

  export type TimetableCreateManyInput = {
    id?: string
    year: string
    academicyear: string
  }

  export type TimetableUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    academicyear?: StringFieldUpdateOperationsInput | string
  }

  export type TimetableUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    academicyear?: StringFieldUpdateOperationsInput | string
  }

  export type DaysCreateInput = {
    id?: string
    day: string
    Timetable: TimetableCreateNestedOneWithoutDaysInput
    Periods?: PeriodsCreateNestedManyWithoutDaysInput
  }

  export type DaysUncheckedCreateInput = {
    id?: string
    day: string
    timetableId: string
    Periods?: PeriodsUncheckedCreateNestedManyWithoutDaysInput
  }

  export type DaysUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    day?: StringFieldUpdateOperationsInput | string
    Timetable?: TimetableUpdateOneRequiredWithoutDaysNestedInput
    Periods?: PeriodsUpdateManyWithoutDaysNestedInput
  }

  export type DaysUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    day?: StringFieldUpdateOperationsInput | string
    timetableId?: StringFieldUpdateOperationsInput | string
    Periods?: PeriodsUncheckedUpdateManyWithoutDaysNestedInput
  }

  export type DaysCreateManyInput = {
    id?: string
    day: string
    timetableId: string
  }

  export type DaysUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    day?: StringFieldUpdateOperationsInput | string
  }

  export type DaysUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    day?: StringFieldUpdateOperationsInput | string
    timetableId?: StringFieldUpdateOperationsInput | string
  }

  export type PeriodsCreateInput = {
    time: string
    subject: string
    Days: DaysCreateNestedOneWithoutPeriodsInput
  }

  export type PeriodsUncheckedCreateInput = {
    id?: number
    daysId: string
    time: string
    subject: string
  }

  export type PeriodsUpdateInput = {
    time?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    Days?: DaysUpdateOneRequiredWithoutPeriodsNestedInput
  }

  export type PeriodsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    daysId?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
  }

  export type PeriodsCreateManyInput = {
    id?: number
    daysId: string
    time: string
    subject: string
  }

  export type PeriodsUpdateManyMutationInput = {
    time?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
  }

  export type PeriodsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    daysId?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
  }

  export type AttendenceCreateInput = {
    id?: string
    date: string
    Student: StudentCreateNestedOneWithoutAttendenceInput
    Subject?: SubjectCreateNestedManyWithoutAttendenceInput
  }

  export type AttendenceUncheckedCreateInput = {
    id?: string
    studentId: string
    date: string
    Subject?: SubjectUncheckedCreateNestedManyWithoutAttendenceInput
  }

  export type AttendenceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    Student?: StudentUpdateOneRequiredWithoutAttendenceNestedInput
    Subject?: SubjectUpdateManyWithoutAttendenceNestedInput
  }

  export type AttendenceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    Subject?: SubjectUncheckedUpdateManyWithoutAttendenceNestedInput
  }

  export type AttendenceCreateManyInput = {
    id?: string
    studentId: string
    date: string
  }

  export type AttendenceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
  }

  export type AttendenceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
  }

  export type SubjectCreateInput = {
    time: string
    subject: string
    present?: boolean
    Attendence: AttendenceCreateNestedOneWithoutSubjectInput
  }

  export type SubjectUncheckedCreateInput = {
    id?: number
    attendenceId: string
    time: string
    subject: string
    present?: boolean
  }

  export type SubjectUpdateInput = {
    time?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    present?: BoolFieldUpdateOperationsInput | boolean
    Attendence?: AttendenceUpdateOneRequiredWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    attendenceId?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    present?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SubjectCreateManyInput = {
    id?: number
    attendenceId: string
    time: string
    subject: string
    present?: boolean
  }

  export type SubjectUpdateManyMutationInput = {
    time?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    present?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SubjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    attendenceId?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    present?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AssessmentCreateInput = {
    id?: string
    year: string
    academicyear: string
    assessment: string
    Student: StudentCreateNestedOneWithoutAssessmentInput
    AssessmentSubject?: AssessmentSubjectCreateNestedManyWithoutAssessmentInput
  }

  export type AssessmentUncheckedCreateInput = {
    id?: string
    studentId: string
    year: string
    academicyear: string
    assessment: string
    AssessmentSubject?: AssessmentSubjectUncheckedCreateNestedManyWithoutAssessmentInput
  }

  export type AssessmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    academicyear?: StringFieldUpdateOperationsInput | string
    assessment?: StringFieldUpdateOperationsInput | string
    Student?: StudentUpdateOneRequiredWithoutAssessmentNestedInput
    AssessmentSubject?: AssessmentSubjectUpdateManyWithoutAssessmentNestedInput
  }

  export type AssessmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    academicyear?: StringFieldUpdateOperationsInput | string
    assessment?: StringFieldUpdateOperationsInput | string
    AssessmentSubject?: AssessmentSubjectUncheckedUpdateManyWithoutAssessmentNestedInput
  }

  export type AssessmentCreateManyInput = {
    id?: string
    studentId: string
    year: string
    academicyear: string
    assessment: string
  }

  export type AssessmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    academicyear?: StringFieldUpdateOperationsInput | string
    assessment?: StringFieldUpdateOperationsInput | string
  }

  export type AssessmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    academicyear?: StringFieldUpdateOperationsInput | string
    assessment?: StringFieldUpdateOperationsInput | string
  }

  export type AssessmentSubjectCreateInput = {
    id?: string
    subject: string
    theoryMarks: number
    practicalMarks: number
    Assessment: AssessmentCreateNestedOneWithoutAssessmentSubjectInput
  }

  export type AssessmentSubjectUncheckedCreateInput = {
    id?: string
    assessmentId: string
    subject: string
    theoryMarks: number
    practicalMarks: number
  }

  export type AssessmentSubjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    theoryMarks?: IntFieldUpdateOperationsInput | number
    practicalMarks?: IntFieldUpdateOperationsInput | number
    Assessment?: AssessmentUpdateOneRequiredWithoutAssessmentSubjectNestedInput
  }

  export type AssessmentSubjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assessmentId?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    theoryMarks?: IntFieldUpdateOperationsInput | number
    practicalMarks?: IntFieldUpdateOperationsInput | number
  }

  export type AssessmentSubjectCreateManyInput = {
    id?: string
    assessmentId: string
    subject: string
    theoryMarks: number
    practicalMarks: number
  }

  export type AssessmentSubjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    theoryMarks?: IntFieldUpdateOperationsInput | number
    practicalMarks?: IntFieldUpdateOperationsInput | number
  }

  export type AssessmentSubjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    assessmentId?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    theoryMarks?: IntFieldUpdateOperationsInput | number
    practicalMarks?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type YearListRelationFilter = {
    every?: YearWhereInput
    some?: YearWhereInput
    none?: YearWhereInput
  }

  export type AcademicyearListRelationFilter = {
    every?: AcademicyearWhereInput
    some?: AcademicyearWhereInput
    none?: AcademicyearWhereInput
  }

  export type AttendenceListRelationFilter = {
    every?: AttendenceWhereInput
    some?: AttendenceWhereInput
    none?: AttendenceWhereInput
  }

  export type AssessmentListRelationFilter = {
    every?: AssessmentWhereInput
    some?: AssessmentWhereInput
    none?: AssessmentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type YearOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AcademicyearOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AttendenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssessmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentCountOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    rollNo?: SortOrder
    email?: SortOrder
    mobile?: SortOrder
    gender?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type StudentAvgOrderByAggregateInput = {
    rollNo?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    rollNo?: SortOrder
    email?: SortOrder
    mobile?: SortOrder
    gender?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    rollNo?: SortOrder
    email?: SortOrder
    mobile?: SortOrder
    gender?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type StudentSumOrderByAggregateInput = {
    rollNo?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StudentRelationFilter = {
    is?: StudentWhereInput
    isNot?: StudentWhereInput
  }

  export type YearCountOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    studentId?: SortOrder
  }

  export type YearAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type YearMaxOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    studentId?: SortOrder
  }

  export type YearMinOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    studentId?: SortOrder
  }

  export type YearSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type AcademicyearCountOrderByAggregateInput = {
    id?: SortOrder
    academicyear?: SortOrder
    studentId?: SortOrder
  }

  export type AcademicyearAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AcademicyearMaxOrderByAggregateInput = {
    id?: SortOrder
    academicyear?: SortOrder
    studentId?: SortOrder
  }

  export type AcademicyearMinOrderByAggregateInput = {
    id?: SortOrder
    academicyear?: SortOrder
    studentId?: SortOrder
  }

  export type AcademicyearSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DaysListRelationFilter = {
    every?: DaysWhereInput
    some?: DaysWhereInput
    none?: DaysWhereInput
  }

  export type DaysOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TimetableCountOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    academicyear?: SortOrder
  }

  export type TimetableMaxOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    academicyear?: SortOrder
  }

  export type TimetableMinOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    academicyear?: SortOrder
  }

  export type TimetableRelationFilter = {
    is?: TimetableWhereInput
    isNot?: TimetableWhereInput
  }

  export type PeriodsListRelationFilter = {
    every?: PeriodsWhereInput
    some?: PeriodsWhereInput
    none?: PeriodsWhereInput
  }

  export type PeriodsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DaysCountOrderByAggregateInput = {
    id?: SortOrder
    day?: SortOrder
    timetableId?: SortOrder
  }

  export type DaysMaxOrderByAggregateInput = {
    id?: SortOrder
    day?: SortOrder
    timetableId?: SortOrder
  }

  export type DaysMinOrderByAggregateInput = {
    id?: SortOrder
    day?: SortOrder
    timetableId?: SortOrder
  }

  export type DaysRelationFilter = {
    is?: DaysWhereInput
    isNot?: DaysWhereInput
  }

  export type PeriodsCountOrderByAggregateInput = {
    id?: SortOrder
    daysId?: SortOrder
    time?: SortOrder
    subject?: SortOrder
  }

  export type PeriodsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PeriodsMaxOrderByAggregateInput = {
    id?: SortOrder
    daysId?: SortOrder
    time?: SortOrder
    subject?: SortOrder
  }

  export type PeriodsMinOrderByAggregateInput = {
    id?: SortOrder
    daysId?: SortOrder
    time?: SortOrder
    subject?: SortOrder
  }

  export type PeriodsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SubjectListRelationFilter = {
    every?: SubjectWhereInput
    some?: SubjectWhereInput
    none?: SubjectWhereInput
  }

  export type SubjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AttendenceCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    date?: SortOrder
  }

  export type AttendenceMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    date?: SortOrder
  }

  export type AttendenceMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    date?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type AttendenceRelationFilter = {
    is?: AttendenceWhereInput
    isNot?: AttendenceWhereInput
  }

  export type SubjectCountOrderByAggregateInput = {
    id?: SortOrder
    attendenceId?: SortOrder
    time?: SortOrder
    subject?: SortOrder
    present?: SortOrder
  }

  export type SubjectAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SubjectMaxOrderByAggregateInput = {
    id?: SortOrder
    attendenceId?: SortOrder
    time?: SortOrder
    subject?: SortOrder
    present?: SortOrder
  }

  export type SubjectMinOrderByAggregateInput = {
    id?: SortOrder
    attendenceId?: SortOrder
    time?: SortOrder
    subject?: SortOrder
    present?: SortOrder
  }

  export type SubjectSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type AssessmentSubjectListRelationFilter = {
    every?: AssessmentSubjectWhereInput
    some?: AssessmentSubjectWhereInput
    none?: AssessmentSubjectWhereInput
  }

  export type AssessmentSubjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssessmentCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    year?: SortOrder
    academicyear?: SortOrder
    assessment?: SortOrder
  }

  export type AssessmentMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    year?: SortOrder
    academicyear?: SortOrder
    assessment?: SortOrder
  }

  export type AssessmentMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    year?: SortOrder
    academicyear?: SortOrder
    assessment?: SortOrder
  }

  export type AssessmentRelationFilter = {
    is?: AssessmentWhereInput
    isNot?: AssessmentWhereInput
  }

  export type AssessmentSubjectCountOrderByAggregateInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    subject?: SortOrder
    theoryMarks?: SortOrder
    practicalMarks?: SortOrder
  }

  export type AssessmentSubjectAvgOrderByAggregateInput = {
    theoryMarks?: SortOrder
    practicalMarks?: SortOrder
  }

  export type AssessmentSubjectMaxOrderByAggregateInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    subject?: SortOrder
    theoryMarks?: SortOrder
    practicalMarks?: SortOrder
  }

  export type AssessmentSubjectMinOrderByAggregateInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    subject?: SortOrder
    theoryMarks?: SortOrder
    practicalMarks?: SortOrder
  }

  export type AssessmentSubjectSumOrderByAggregateInput = {
    theoryMarks?: SortOrder
    practicalMarks?: SortOrder
  }

  export type YearCreateNestedManyWithoutStudentInput = {
    create?: XOR<YearCreateWithoutStudentInput, YearUncheckedCreateWithoutStudentInput> | YearCreateWithoutStudentInput[] | YearUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: YearCreateOrConnectWithoutStudentInput | YearCreateOrConnectWithoutStudentInput[]
    createMany?: YearCreateManyStudentInputEnvelope
    connect?: YearWhereUniqueInput | YearWhereUniqueInput[]
  }

  export type AcademicyearCreateNestedManyWithoutStudentInput = {
    create?: XOR<AcademicyearCreateWithoutStudentInput, AcademicyearUncheckedCreateWithoutStudentInput> | AcademicyearCreateWithoutStudentInput[] | AcademicyearUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AcademicyearCreateOrConnectWithoutStudentInput | AcademicyearCreateOrConnectWithoutStudentInput[]
    createMany?: AcademicyearCreateManyStudentInputEnvelope
    connect?: AcademicyearWhereUniqueInput | AcademicyearWhereUniqueInput[]
  }

  export type AttendenceCreateNestedManyWithoutStudentInput = {
    create?: XOR<AttendenceCreateWithoutStudentInput, AttendenceUncheckedCreateWithoutStudentInput> | AttendenceCreateWithoutStudentInput[] | AttendenceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttendenceCreateOrConnectWithoutStudentInput | AttendenceCreateOrConnectWithoutStudentInput[]
    createMany?: AttendenceCreateManyStudentInputEnvelope
    connect?: AttendenceWhereUniqueInput | AttendenceWhereUniqueInput[]
  }

  export type AssessmentCreateNestedManyWithoutStudentInput = {
    create?: XOR<AssessmentCreateWithoutStudentInput, AssessmentUncheckedCreateWithoutStudentInput> | AssessmentCreateWithoutStudentInput[] | AssessmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AssessmentCreateOrConnectWithoutStudentInput | AssessmentCreateOrConnectWithoutStudentInput[]
    createMany?: AssessmentCreateManyStudentInputEnvelope
    connect?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
  }

  export type YearUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<YearCreateWithoutStudentInput, YearUncheckedCreateWithoutStudentInput> | YearCreateWithoutStudentInput[] | YearUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: YearCreateOrConnectWithoutStudentInput | YearCreateOrConnectWithoutStudentInput[]
    createMany?: YearCreateManyStudentInputEnvelope
    connect?: YearWhereUniqueInput | YearWhereUniqueInput[]
  }

  export type AcademicyearUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<AcademicyearCreateWithoutStudentInput, AcademicyearUncheckedCreateWithoutStudentInput> | AcademicyearCreateWithoutStudentInput[] | AcademicyearUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AcademicyearCreateOrConnectWithoutStudentInput | AcademicyearCreateOrConnectWithoutStudentInput[]
    createMany?: AcademicyearCreateManyStudentInputEnvelope
    connect?: AcademicyearWhereUniqueInput | AcademicyearWhereUniqueInput[]
  }

  export type AttendenceUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<AttendenceCreateWithoutStudentInput, AttendenceUncheckedCreateWithoutStudentInput> | AttendenceCreateWithoutStudentInput[] | AttendenceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttendenceCreateOrConnectWithoutStudentInput | AttendenceCreateOrConnectWithoutStudentInput[]
    createMany?: AttendenceCreateManyStudentInputEnvelope
    connect?: AttendenceWhereUniqueInput | AttendenceWhereUniqueInput[]
  }

  export type AssessmentUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<AssessmentCreateWithoutStudentInput, AssessmentUncheckedCreateWithoutStudentInput> | AssessmentCreateWithoutStudentInput[] | AssessmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AssessmentCreateOrConnectWithoutStudentInput | AssessmentCreateOrConnectWithoutStudentInput[]
    createMany?: AssessmentCreateManyStudentInputEnvelope
    connect?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type YearUpdateManyWithoutStudentNestedInput = {
    create?: XOR<YearCreateWithoutStudentInput, YearUncheckedCreateWithoutStudentInput> | YearCreateWithoutStudentInput[] | YearUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: YearCreateOrConnectWithoutStudentInput | YearCreateOrConnectWithoutStudentInput[]
    upsert?: YearUpsertWithWhereUniqueWithoutStudentInput | YearUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: YearCreateManyStudentInputEnvelope
    set?: YearWhereUniqueInput | YearWhereUniqueInput[]
    disconnect?: YearWhereUniqueInput | YearWhereUniqueInput[]
    delete?: YearWhereUniqueInput | YearWhereUniqueInput[]
    connect?: YearWhereUniqueInput | YearWhereUniqueInput[]
    update?: YearUpdateWithWhereUniqueWithoutStudentInput | YearUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: YearUpdateManyWithWhereWithoutStudentInput | YearUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: YearScalarWhereInput | YearScalarWhereInput[]
  }

  export type AcademicyearUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AcademicyearCreateWithoutStudentInput, AcademicyearUncheckedCreateWithoutStudentInput> | AcademicyearCreateWithoutStudentInput[] | AcademicyearUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AcademicyearCreateOrConnectWithoutStudentInput | AcademicyearCreateOrConnectWithoutStudentInput[]
    upsert?: AcademicyearUpsertWithWhereUniqueWithoutStudentInput | AcademicyearUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AcademicyearCreateManyStudentInputEnvelope
    set?: AcademicyearWhereUniqueInput | AcademicyearWhereUniqueInput[]
    disconnect?: AcademicyearWhereUniqueInput | AcademicyearWhereUniqueInput[]
    delete?: AcademicyearWhereUniqueInput | AcademicyearWhereUniqueInput[]
    connect?: AcademicyearWhereUniqueInput | AcademicyearWhereUniqueInput[]
    update?: AcademicyearUpdateWithWhereUniqueWithoutStudentInput | AcademicyearUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AcademicyearUpdateManyWithWhereWithoutStudentInput | AcademicyearUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AcademicyearScalarWhereInput | AcademicyearScalarWhereInput[]
  }

  export type AttendenceUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AttendenceCreateWithoutStudentInput, AttendenceUncheckedCreateWithoutStudentInput> | AttendenceCreateWithoutStudentInput[] | AttendenceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttendenceCreateOrConnectWithoutStudentInput | AttendenceCreateOrConnectWithoutStudentInput[]
    upsert?: AttendenceUpsertWithWhereUniqueWithoutStudentInput | AttendenceUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AttendenceCreateManyStudentInputEnvelope
    set?: AttendenceWhereUniqueInput | AttendenceWhereUniqueInput[]
    disconnect?: AttendenceWhereUniqueInput | AttendenceWhereUniqueInput[]
    delete?: AttendenceWhereUniqueInput | AttendenceWhereUniqueInput[]
    connect?: AttendenceWhereUniqueInput | AttendenceWhereUniqueInput[]
    update?: AttendenceUpdateWithWhereUniqueWithoutStudentInput | AttendenceUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AttendenceUpdateManyWithWhereWithoutStudentInput | AttendenceUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AttendenceScalarWhereInput | AttendenceScalarWhereInput[]
  }

  export type AssessmentUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AssessmentCreateWithoutStudentInput, AssessmentUncheckedCreateWithoutStudentInput> | AssessmentCreateWithoutStudentInput[] | AssessmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AssessmentCreateOrConnectWithoutStudentInput | AssessmentCreateOrConnectWithoutStudentInput[]
    upsert?: AssessmentUpsertWithWhereUniqueWithoutStudentInput | AssessmentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AssessmentCreateManyStudentInputEnvelope
    set?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    disconnect?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    delete?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    connect?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    update?: AssessmentUpdateWithWhereUniqueWithoutStudentInput | AssessmentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AssessmentUpdateManyWithWhereWithoutStudentInput | AssessmentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AssessmentScalarWhereInput | AssessmentScalarWhereInput[]
  }

  export type YearUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<YearCreateWithoutStudentInput, YearUncheckedCreateWithoutStudentInput> | YearCreateWithoutStudentInput[] | YearUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: YearCreateOrConnectWithoutStudentInput | YearCreateOrConnectWithoutStudentInput[]
    upsert?: YearUpsertWithWhereUniqueWithoutStudentInput | YearUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: YearCreateManyStudentInputEnvelope
    set?: YearWhereUniqueInput | YearWhereUniqueInput[]
    disconnect?: YearWhereUniqueInput | YearWhereUniqueInput[]
    delete?: YearWhereUniqueInput | YearWhereUniqueInput[]
    connect?: YearWhereUniqueInput | YearWhereUniqueInput[]
    update?: YearUpdateWithWhereUniqueWithoutStudentInput | YearUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: YearUpdateManyWithWhereWithoutStudentInput | YearUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: YearScalarWhereInput | YearScalarWhereInput[]
  }

  export type AcademicyearUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AcademicyearCreateWithoutStudentInput, AcademicyearUncheckedCreateWithoutStudentInput> | AcademicyearCreateWithoutStudentInput[] | AcademicyearUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AcademicyearCreateOrConnectWithoutStudentInput | AcademicyearCreateOrConnectWithoutStudentInput[]
    upsert?: AcademicyearUpsertWithWhereUniqueWithoutStudentInput | AcademicyearUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AcademicyearCreateManyStudentInputEnvelope
    set?: AcademicyearWhereUniqueInput | AcademicyearWhereUniqueInput[]
    disconnect?: AcademicyearWhereUniqueInput | AcademicyearWhereUniqueInput[]
    delete?: AcademicyearWhereUniqueInput | AcademicyearWhereUniqueInput[]
    connect?: AcademicyearWhereUniqueInput | AcademicyearWhereUniqueInput[]
    update?: AcademicyearUpdateWithWhereUniqueWithoutStudentInput | AcademicyearUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AcademicyearUpdateManyWithWhereWithoutStudentInput | AcademicyearUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AcademicyearScalarWhereInput | AcademicyearScalarWhereInput[]
  }

  export type AttendenceUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AttendenceCreateWithoutStudentInput, AttendenceUncheckedCreateWithoutStudentInput> | AttendenceCreateWithoutStudentInput[] | AttendenceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttendenceCreateOrConnectWithoutStudentInput | AttendenceCreateOrConnectWithoutStudentInput[]
    upsert?: AttendenceUpsertWithWhereUniqueWithoutStudentInput | AttendenceUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AttendenceCreateManyStudentInputEnvelope
    set?: AttendenceWhereUniqueInput | AttendenceWhereUniqueInput[]
    disconnect?: AttendenceWhereUniqueInput | AttendenceWhereUniqueInput[]
    delete?: AttendenceWhereUniqueInput | AttendenceWhereUniqueInput[]
    connect?: AttendenceWhereUniqueInput | AttendenceWhereUniqueInput[]
    update?: AttendenceUpdateWithWhereUniqueWithoutStudentInput | AttendenceUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AttendenceUpdateManyWithWhereWithoutStudentInput | AttendenceUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AttendenceScalarWhereInput | AttendenceScalarWhereInput[]
  }

  export type AssessmentUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AssessmentCreateWithoutStudentInput, AssessmentUncheckedCreateWithoutStudentInput> | AssessmentCreateWithoutStudentInput[] | AssessmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AssessmentCreateOrConnectWithoutStudentInput | AssessmentCreateOrConnectWithoutStudentInput[]
    upsert?: AssessmentUpsertWithWhereUniqueWithoutStudentInput | AssessmentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AssessmentCreateManyStudentInputEnvelope
    set?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    disconnect?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    delete?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    connect?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    update?: AssessmentUpdateWithWhereUniqueWithoutStudentInput | AssessmentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AssessmentUpdateManyWithWhereWithoutStudentInput | AssessmentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AssessmentScalarWhereInput | AssessmentScalarWhereInput[]
  }

  export type StudentCreateNestedOneWithoutYearInput = {
    create?: XOR<StudentCreateWithoutYearInput, StudentUncheckedCreateWithoutYearInput>
    connectOrCreate?: StudentCreateOrConnectWithoutYearInput
    connect?: StudentWhereUniqueInput
  }

  export type StudentUpdateOneRequiredWithoutYearNestedInput = {
    create?: XOR<StudentCreateWithoutYearInput, StudentUncheckedCreateWithoutYearInput>
    connectOrCreate?: StudentCreateOrConnectWithoutYearInput
    upsert?: StudentUpsertWithoutYearInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutYearInput, StudentUpdateWithoutYearInput>, StudentUncheckedUpdateWithoutYearInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StudentCreateNestedOneWithoutAcademicyearInput = {
    create?: XOR<StudentCreateWithoutAcademicyearInput, StudentUncheckedCreateWithoutAcademicyearInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAcademicyearInput
    connect?: StudentWhereUniqueInput
  }

  export type StudentUpdateOneRequiredWithoutAcademicyearNestedInput = {
    create?: XOR<StudentCreateWithoutAcademicyearInput, StudentUncheckedCreateWithoutAcademicyearInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAcademicyearInput
    upsert?: StudentUpsertWithoutAcademicyearInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutAcademicyearInput, StudentUpdateWithoutAcademicyearInput>, StudentUncheckedUpdateWithoutAcademicyearInput>
  }

  export type DaysCreateNestedManyWithoutTimetableInput = {
    create?: XOR<DaysCreateWithoutTimetableInput, DaysUncheckedCreateWithoutTimetableInput> | DaysCreateWithoutTimetableInput[] | DaysUncheckedCreateWithoutTimetableInput[]
    connectOrCreate?: DaysCreateOrConnectWithoutTimetableInput | DaysCreateOrConnectWithoutTimetableInput[]
    createMany?: DaysCreateManyTimetableInputEnvelope
    connect?: DaysWhereUniqueInput | DaysWhereUniqueInput[]
  }

  export type DaysUncheckedCreateNestedManyWithoutTimetableInput = {
    create?: XOR<DaysCreateWithoutTimetableInput, DaysUncheckedCreateWithoutTimetableInput> | DaysCreateWithoutTimetableInput[] | DaysUncheckedCreateWithoutTimetableInput[]
    connectOrCreate?: DaysCreateOrConnectWithoutTimetableInput | DaysCreateOrConnectWithoutTimetableInput[]
    createMany?: DaysCreateManyTimetableInputEnvelope
    connect?: DaysWhereUniqueInput | DaysWhereUniqueInput[]
  }

  export type DaysUpdateManyWithoutTimetableNestedInput = {
    create?: XOR<DaysCreateWithoutTimetableInput, DaysUncheckedCreateWithoutTimetableInput> | DaysCreateWithoutTimetableInput[] | DaysUncheckedCreateWithoutTimetableInput[]
    connectOrCreate?: DaysCreateOrConnectWithoutTimetableInput | DaysCreateOrConnectWithoutTimetableInput[]
    upsert?: DaysUpsertWithWhereUniqueWithoutTimetableInput | DaysUpsertWithWhereUniqueWithoutTimetableInput[]
    createMany?: DaysCreateManyTimetableInputEnvelope
    set?: DaysWhereUniqueInput | DaysWhereUniqueInput[]
    disconnect?: DaysWhereUniqueInput | DaysWhereUniqueInput[]
    delete?: DaysWhereUniqueInput | DaysWhereUniqueInput[]
    connect?: DaysWhereUniqueInput | DaysWhereUniqueInput[]
    update?: DaysUpdateWithWhereUniqueWithoutTimetableInput | DaysUpdateWithWhereUniqueWithoutTimetableInput[]
    updateMany?: DaysUpdateManyWithWhereWithoutTimetableInput | DaysUpdateManyWithWhereWithoutTimetableInput[]
    deleteMany?: DaysScalarWhereInput | DaysScalarWhereInput[]
  }

  export type DaysUncheckedUpdateManyWithoutTimetableNestedInput = {
    create?: XOR<DaysCreateWithoutTimetableInput, DaysUncheckedCreateWithoutTimetableInput> | DaysCreateWithoutTimetableInput[] | DaysUncheckedCreateWithoutTimetableInput[]
    connectOrCreate?: DaysCreateOrConnectWithoutTimetableInput | DaysCreateOrConnectWithoutTimetableInput[]
    upsert?: DaysUpsertWithWhereUniqueWithoutTimetableInput | DaysUpsertWithWhereUniqueWithoutTimetableInput[]
    createMany?: DaysCreateManyTimetableInputEnvelope
    set?: DaysWhereUniqueInput | DaysWhereUniqueInput[]
    disconnect?: DaysWhereUniqueInput | DaysWhereUniqueInput[]
    delete?: DaysWhereUniqueInput | DaysWhereUniqueInput[]
    connect?: DaysWhereUniqueInput | DaysWhereUniqueInput[]
    update?: DaysUpdateWithWhereUniqueWithoutTimetableInput | DaysUpdateWithWhereUniqueWithoutTimetableInput[]
    updateMany?: DaysUpdateManyWithWhereWithoutTimetableInput | DaysUpdateManyWithWhereWithoutTimetableInput[]
    deleteMany?: DaysScalarWhereInput | DaysScalarWhereInput[]
  }

  export type TimetableCreateNestedOneWithoutDaysInput = {
    create?: XOR<TimetableCreateWithoutDaysInput, TimetableUncheckedCreateWithoutDaysInput>
    connectOrCreate?: TimetableCreateOrConnectWithoutDaysInput
    connect?: TimetableWhereUniqueInput
  }

  export type PeriodsCreateNestedManyWithoutDaysInput = {
    create?: XOR<PeriodsCreateWithoutDaysInput, PeriodsUncheckedCreateWithoutDaysInput> | PeriodsCreateWithoutDaysInput[] | PeriodsUncheckedCreateWithoutDaysInput[]
    connectOrCreate?: PeriodsCreateOrConnectWithoutDaysInput | PeriodsCreateOrConnectWithoutDaysInput[]
    createMany?: PeriodsCreateManyDaysInputEnvelope
    connect?: PeriodsWhereUniqueInput | PeriodsWhereUniqueInput[]
  }

  export type PeriodsUncheckedCreateNestedManyWithoutDaysInput = {
    create?: XOR<PeriodsCreateWithoutDaysInput, PeriodsUncheckedCreateWithoutDaysInput> | PeriodsCreateWithoutDaysInput[] | PeriodsUncheckedCreateWithoutDaysInput[]
    connectOrCreate?: PeriodsCreateOrConnectWithoutDaysInput | PeriodsCreateOrConnectWithoutDaysInput[]
    createMany?: PeriodsCreateManyDaysInputEnvelope
    connect?: PeriodsWhereUniqueInput | PeriodsWhereUniqueInput[]
  }

  export type TimetableUpdateOneRequiredWithoutDaysNestedInput = {
    create?: XOR<TimetableCreateWithoutDaysInput, TimetableUncheckedCreateWithoutDaysInput>
    connectOrCreate?: TimetableCreateOrConnectWithoutDaysInput
    upsert?: TimetableUpsertWithoutDaysInput
    connect?: TimetableWhereUniqueInput
    update?: XOR<XOR<TimetableUpdateToOneWithWhereWithoutDaysInput, TimetableUpdateWithoutDaysInput>, TimetableUncheckedUpdateWithoutDaysInput>
  }

  export type PeriodsUpdateManyWithoutDaysNestedInput = {
    create?: XOR<PeriodsCreateWithoutDaysInput, PeriodsUncheckedCreateWithoutDaysInput> | PeriodsCreateWithoutDaysInput[] | PeriodsUncheckedCreateWithoutDaysInput[]
    connectOrCreate?: PeriodsCreateOrConnectWithoutDaysInput | PeriodsCreateOrConnectWithoutDaysInput[]
    upsert?: PeriodsUpsertWithWhereUniqueWithoutDaysInput | PeriodsUpsertWithWhereUniqueWithoutDaysInput[]
    createMany?: PeriodsCreateManyDaysInputEnvelope
    set?: PeriodsWhereUniqueInput | PeriodsWhereUniqueInput[]
    disconnect?: PeriodsWhereUniqueInput | PeriodsWhereUniqueInput[]
    delete?: PeriodsWhereUniqueInput | PeriodsWhereUniqueInput[]
    connect?: PeriodsWhereUniqueInput | PeriodsWhereUniqueInput[]
    update?: PeriodsUpdateWithWhereUniqueWithoutDaysInput | PeriodsUpdateWithWhereUniqueWithoutDaysInput[]
    updateMany?: PeriodsUpdateManyWithWhereWithoutDaysInput | PeriodsUpdateManyWithWhereWithoutDaysInput[]
    deleteMany?: PeriodsScalarWhereInput | PeriodsScalarWhereInput[]
  }

  export type PeriodsUncheckedUpdateManyWithoutDaysNestedInput = {
    create?: XOR<PeriodsCreateWithoutDaysInput, PeriodsUncheckedCreateWithoutDaysInput> | PeriodsCreateWithoutDaysInput[] | PeriodsUncheckedCreateWithoutDaysInput[]
    connectOrCreate?: PeriodsCreateOrConnectWithoutDaysInput | PeriodsCreateOrConnectWithoutDaysInput[]
    upsert?: PeriodsUpsertWithWhereUniqueWithoutDaysInput | PeriodsUpsertWithWhereUniqueWithoutDaysInput[]
    createMany?: PeriodsCreateManyDaysInputEnvelope
    set?: PeriodsWhereUniqueInput | PeriodsWhereUniqueInput[]
    disconnect?: PeriodsWhereUniqueInput | PeriodsWhereUniqueInput[]
    delete?: PeriodsWhereUniqueInput | PeriodsWhereUniqueInput[]
    connect?: PeriodsWhereUniqueInput | PeriodsWhereUniqueInput[]
    update?: PeriodsUpdateWithWhereUniqueWithoutDaysInput | PeriodsUpdateWithWhereUniqueWithoutDaysInput[]
    updateMany?: PeriodsUpdateManyWithWhereWithoutDaysInput | PeriodsUpdateManyWithWhereWithoutDaysInput[]
    deleteMany?: PeriodsScalarWhereInput | PeriodsScalarWhereInput[]
  }

  export type DaysCreateNestedOneWithoutPeriodsInput = {
    create?: XOR<DaysCreateWithoutPeriodsInput, DaysUncheckedCreateWithoutPeriodsInput>
    connectOrCreate?: DaysCreateOrConnectWithoutPeriodsInput
    connect?: DaysWhereUniqueInput
  }

  export type DaysUpdateOneRequiredWithoutPeriodsNestedInput = {
    create?: XOR<DaysCreateWithoutPeriodsInput, DaysUncheckedCreateWithoutPeriodsInput>
    connectOrCreate?: DaysCreateOrConnectWithoutPeriodsInput
    upsert?: DaysUpsertWithoutPeriodsInput
    connect?: DaysWhereUniqueInput
    update?: XOR<XOR<DaysUpdateToOneWithWhereWithoutPeriodsInput, DaysUpdateWithoutPeriodsInput>, DaysUncheckedUpdateWithoutPeriodsInput>
  }

  export type StudentCreateNestedOneWithoutAttendenceInput = {
    create?: XOR<StudentCreateWithoutAttendenceInput, StudentUncheckedCreateWithoutAttendenceInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAttendenceInput
    connect?: StudentWhereUniqueInput
  }

  export type SubjectCreateNestedManyWithoutAttendenceInput = {
    create?: XOR<SubjectCreateWithoutAttendenceInput, SubjectUncheckedCreateWithoutAttendenceInput> | SubjectCreateWithoutAttendenceInput[] | SubjectUncheckedCreateWithoutAttendenceInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutAttendenceInput | SubjectCreateOrConnectWithoutAttendenceInput[]
    createMany?: SubjectCreateManyAttendenceInputEnvelope
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
  }

  export type SubjectUncheckedCreateNestedManyWithoutAttendenceInput = {
    create?: XOR<SubjectCreateWithoutAttendenceInput, SubjectUncheckedCreateWithoutAttendenceInput> | SubjectCreateWithoutAttendenceInput[] | SubjectUncheckedCreateWithoutAttendenceInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutAttendenceInput | SubjectCreateOrConnectWithoutAttendenceInput[]
    createMany?: SubjectCreateManyAttendenceInputEnvelope
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
  }

  export type StudentUpdateOneRequiredWithoutAttendenceNestedInput = {
    create?: XOR<StudentCreateWithoutAttendenceInput, StudentUncheckedCreateWithoutAttendenceInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAttendenceInput
    upsert?: StudentUpsertWithoutAttendenceInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutAttendenceInput, StudentUpdateWithoutAttendenceInput>, StudentUncheckedUpdateWithoutAttendenceInput>
  }

  export type SubjectUpdateManyWithoutAttendenceNestedInput = {
    create?: XOR<SubjectCreateWithoutAttendenceInput, SubjectUncheckedCreateWithoutAttendenceInput> | SubjectCreateWithoutAttendenceInput[] | SubjectUncheckedCreateWithoutAttendenceInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutAttendenceInput | SubjectCreateOrConnectWithoutAttendenceInput[]
    upsert?: SubjectUpsertWithWhereUniqueWithoutAttendenceInput | SubjectUpsertWithWhereUniqueWithoutAttendenceInput[]
    createMany?: SubjectCreateManyAttendenceInputEnvelope
    set?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    disconnect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    delete?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    update?: SubjectUpdateWithWhereUniqueWithoutAttendenceInput | SubjectUpdateWithWhereUniqueWithoutAttendenceInput[]
    updateMany?: SubjectUpdateManyWithWhereWithoutAttendenceInput | SubjectUpdateManyWithWhereWithoutAttendenceInput[]
    deleteMany?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
  }

  export type SubjectUncheckedUpdateManyWithoutAttendenceNestedInput = {
    create?: XOR<SubjectCreateWithoutAttendenceInput, SubjectUncheckedCreateWithoutAttendenceInput> | SubjectCreateWithoutAttendenceInput[] | SubjectUncheckedCreateWithoutAttendenceInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutAttendenceInput | SubjectCreateOrConnectWithoutAttendenceInput[]
    upsert?: SubjectUpsertWithWhereUniqueWithoutAttendenceInput | SubjectUpsertWithWhereUniqueWithoutAttendenceInput[]
    createMany?: SubjectCreateManyAttendenceInputEnvelope
    set?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    disconnect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    delete?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    update?: SubjectUpdateWithWhereUniqueWithoutAttendenceInput | SubjectUpdateWithWhereUniqueWithoutAttendenceInput[]
    updateMany?: SubjectUpdateManyWithWhereWithoutAttendenceInput | SubjectUpdateManyWithWhereWithoutAttendenceInput[]
    deleteMany?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
  }

  export type AttendenceCreateNestedOneWithoutSubjectInput = {
    create?: XOR<AttendenceCreateWithoutSubjectInput, AttendenceUncheckedCreateWithoutSubjectInput>
    connectOrCreate?: AttendenceCreateOrConnectWithoutSubjectInput
    connect?: AttendenceWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type AttendenceUpdateOneRequiredWithoutSubjectNestedInput = {
    create?: XOR<AttendenceCreateWithoutSubjectInput, AttendenceUncheckedCreateWithoutSubjectInput>
    connectOrCreate?: AttendenceCreateOrConnectWithoutSubjectInput
    upsert?: AttendenceUpsertWithoutSubjectInput
    connect?: AttendenceWhereUniqueInput
    update?: XOR<XOR<AttendenceUpdateToOneWithWhereWithoutSubjectInput, AttendenceUpdateWithoutSubjectInput>, AttendenceUncheckedUpdateWithoutSubjectInput>
  }

  export type StudentCreateNestedOneWithoutAssessmentInput = {
    create?: XOR<StudentCreateWithoutAssessmentInput, StudentUncheckedCreateWithoutAssessmentInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAssessmentInput
    connect?: StudentWhereUniqueInput
  }

  export type AssessmentSubjectCreateNestedManyWithoutAssessmentInput = {
    create?: XOR<AssessmentSubjectCreateWithoutAssessmentInput, AssessmentSubjectUncheckedCreateWithoutAssessmentInput> | AssessmentSubjectCreateWithoutAssessmentInput[] | AssessmentSubjectUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: AssessmentSubjectCreateOrConnectWithoutAssessmentInput | AssessmentSubjectCreateOrConnectWithoutAssessmentInput[]
    createMany?: AssessmentSubjectCreateManyAssessmentInputEnvelope
    connect?: AssessmentSubjectWhereUniqueInput | AssessmentSubjectWhereUniqueInput[]
  }

  export type AssessmentSubjectUncheckedCreateNestedManyWithoutAssessmentInput = {
    create?: XOR<AssessmentSubjectCreateWithoutAssessmentInput, AssessmentSubjectUncheckedCreateWithoutAssessmentInput> | AssessmentSubjectCreateWithoutAssessmentInput[] | AssessmentSubjectUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: AssessmentSubjectCreateOrConnectWithoutAssessmentInput | AssessmentSubjectCreateOrConnectWithoutAssessmentInput[]
    createMany?: AssessmentSubjectCreateManyAssessmentInputEnvelope
    connect?: AssessmentSubjectWhereUniqueInput | AssessmentSubjectWhereUniqueInput[]
  }

  export type StudentUpdateOneRequiredWithoutAssessmentNestedInput = {
    create?: XOR<StudentCreateWithoutAssessmentInput, StudentUncheckedCreateWithoutAssessmentInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAssessmentInput
    upsert?: StudentUpsertWithoutAssessmentInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutAssessmentInput, StudentUpdateWithoutAssessmentInput>, StudentUncheckedUpdateWithoutAssessmentInput>
  }

  export type AssessmentSubjectUpdateManyWithoutAssessmentNestedInput = {
    create?: XOR<AssessmentSubjectCreateWithoutAssessmentInput, AssessmentSubjectUncheckedCreateWithoutAssessmentInput> | AssessmentSubjectCreateWithoutAssessmentInput[] | AssessmentSubjectUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: AssessmentSubjectCreateOrConnectWithoutAssessmentInput | AssessmentSubjectCreateOrConnectWithoutAssessmentInput[]
    upsert?: AssessmentSubjectUpsertWithWhereUniqueWithoutAssessmentInput | AssessmentSubjectUpsertWithWhereUniqueWithoutAssessmentInput[]
    createMany?: AssessmentSubjectCreateManyAssessmentInputEnvelope
    set?: AssessmentSubjectWhereUniqueInput | AssessmentSubjectWhereUniqueInput[]
    disconnect?: AssessmentSubjectWhereUniqueInput | AssessmentSubjectWhereUniqueInput[]
    delete?: AssessmentSubjectWhereUniqueInput | AssessmentSubjectWhereUniqueInput[]
    connect?: AssessmentSubjectWhereUniqueInput | AssessmentSubjectWhereUniqueInput[]
    update?: AssessmentSubjectUpdateWithWhereUniqueWithoutAssessmentInput | AssessmentSubjectUpdateWithWhereUniqueWithoutAssessmentInput[]
    updateMany?: AssessmentSubjectUpdateManyWithWhereWithoutAssessmentInput | AssessmentSubjectUpdateManyWithWhereWithoutAssessmentInput[]
    deleteMany?: AssessmentSubjectScalarWhereInput | AssessmentSubjectScalarWhereInput[]
  }

  export type AssessmentSubjectUncheckedUpdateManyWithoutAssessmentNestedInput = {
    create?: XOR<AssessmentSubjectCreateWithoutAssessmentInput, AssessmentSubjectUncheckedCreateWithoutAssessmentInput> | AssessmentSubjectCreateWithoutAssessmentInput[] | AssessmentSubjectUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: AssessmentSubjectCreateOrConnectWithoutAssessmentInput | AssessmentSubjectCreateOrConnectWithoutAssessmentInput[]
    upsert?: AssessmentSubjectUpsertWithWhereUniqueWithoutAssessmentInput | AssessmentSubjectUpsertWithWhereUniqueWithoutAssessmentInput[]
    createMany?: AssessmentSubjectCreateManyAssessmentInputEnvelope
    set?: AssessmentSubjectWhereUniqueInput | AssessmentSubjectWhereUniqueInput[]
    disconnect?: AssessmentSubjectWhereUniqueInput | AssessmentSubjectWhereUniqueInput[]
    delete?: AssessmentSubjectWhereUniqueInput | AssessmentSubjectWhereUniqueInput[]
    connect?: AssessmentSubjectWhereUniqueInput | AssessmentSubjectWhereUniqueInput[]
    update?: AssessmentSubjectUpdateWithWhereUniqueWithoutAssessmentInput | AssessmentSubjectUpdateWithWhereUniqueWithoutAssessmentInput[]
    updateMany?: AssessmentSubjectUpdateManyWithWhereWithoutAssessmentInput | AssessmentSubjectUpdateManyWithWhereWithoutAssessmentInput[]
    deleteMany?: AssessmentSubjectScalarWhereInput | AssessmentSubjectScalarWhereInput[]
  }

  export type AssessmentCreateNestedOneWithoutAssessmentSubjectInput = {
    create?: XOR<AssessmentCreateWithoutAssessmentSubjectInput, AssessmentUncheckedCreateWithoutAssessmentSubjectInput>
    connectOrCreate?: AssessmentCreateOrConnectWithoutAssessmentSubjectInput
    connect?: AssessmentWhereUniqueInput
  }

  export type AssessmentUpdateOneRequiredWithoutAssessmentSubjectNestedInput = {
    create?: XOR<AssessmentCreateWithoutAssessmentSubjectInput, AssessmentUncheckedCreateWithoutAssessmentSubjectInput>
    connectOrCreate?: AssessmentCreateOrConnectWithoutAssessmentSubjectInput
    upsert?: AssessmentUpsertWithoutAssessmentSubjectInput
    connect?: AssessmentWhereUniqueInput
    update?: XOR<XOR<AssessmentUpdateToOneWithWhereWithoutAssessmentSubjectInput, AssessmentUpdateWithoutAssessmentSubjectInput>, AssessmentUncheckedUpdateWithoutAssessmentSubjectInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type YearCreateWithoutStudentInput = {
    year: string
  }

  export type YearUncheckedCreateWithoutStudentInput = {
    id?: number
    year: string
  }

  export type YearCreateOrConnectWithoutStudentInput = {
    where: YearWhereUniqueInput
    create: XOR<YearCreateWithoutStudentInput, YearUncheckedCreateWithoutStudentInput>
  }

  export type YearCreateManyStudentInputEnvelope = {
    data: YearCreateManyStudentInput | YearCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type AcademicyearCreateWithoutStudentInput = {
    academicyear: string
  }

  export type AcademicyearUncheckedCreateWithoutStudentInput = {
    id?: number
    academicyear: string
  }

  export type AcademicyearCreateOrConnectWithoutStudentInput = {
    where: AcademicyearWhereUniqueInput
    create: XOR<AcademicyearCreateWithoutStudentInput, AcademicyearUncheckedCreateWithoutStudentInput>
  }

  export type AcademicyearCreateManyStudentInputEnvelope = {
    data: AcademicyearCreateManyStudentInput | AcademicyearCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type AttendenceCreateWithoutStudentInput = {
    id?: string
    date: string
    Subject?: SubjectCreateNestedManyWithoutAttendenceInput
  }

  export type AttendenceUncheckedCreateWithoutStudentInput = {
    id?: string
    date: string
    Subject?: SubjectUncheckedCreateNestedManyWithoutAttendenceInput
  }

  export type AttendenceCreateOrConnectWithoutStudentInput = {
    where: AttendenceWhereUniqueInput
    create: XOR<AttendenceCreateWithoutStudentInput, AttendenceUncheckedCreateWithoutStudentInput>
  }

  export type AttendenceCreateManyStudentInputEnvelope = {
    data: AttendenceCreateManyStudentInput | AttendenceCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type AssessmentCreateWithoutStudentInput = {
    id?: string
    year: string
    academicyear: string
    assessment: string
    AssessmentSubject?: AssessmentSubjectCreateNestedManyWithoutAssessmentInput
  }

  export type AssessmentUncheckedCreateWithoutStudentInput = {
    id?: string
    year: string
    academicyear: string
    assessment: string
    AssessmentSubject?: AssessmentSubjectUncheckedCreateNestedManyWithoutAssessmentInput
  }

  export type AssessmentCreateOrConnectWithoutStudentInput = {
    where: AssessmentWhereUniqueInput
    create: XOR<AssessmentCreateWithoutStudentInput, AssessmentUncheckedCreateWithoutStudentInput>
  }

  export type AssessmentCreateManyStudentInputEnvelope = {
    data: AssessmentCreateManyStudentInput | AssessmentCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type YearUpsertWithWhereUniqueWithoutStudentInput = {
    where: YearWhereUniqueInput
    update: XOR<YearUpdateWithoutStudentInput, YearUncheckedUpdateWithoutStudentInput>
    create: XOR<YearCreateWithoutStudentInput, YearUncheckedCreateWithoutStudentInput>
  }

  export type YearUpdateWithWhereUniqueWithoutStudentInput = {
    where: YearWhereUniqueInput
    data: XOR<YearUpdateWithoutStudentInput, YearUncheckedUpdateWithoutStudentInput>
  }

  export type YearUpdateManyWithWhereWithoutStudentInput = {
    where: YearScalarWhereInput
    data: XOR<YearUpdateManyMutationInput, YearUncheckedUpdateManyWithoutStudentInput>
  }

  export type YearScalarWhereInput = {
    AND?: YearScalarWhereInput | YearScalarWhereInput[]
    OR?: YearScalarWhereInput[]
    NOT?: YearScalarWhereInput | YearScalarWhereInput[]
    id?: IntFilter<"Year"> | number
    year?: StringFilter<"Year"> | string
    studentId?: StringFilter<"Year"> | string
  }

  export type AcademicyearUpsertWithWhereUniqueWithoutStudentInput = {
    where: AcademicyearWhereUniqueInput
    update: XOR<AcademicyearUpdateWithoutStudentInput, AcademicyearUncheckedUpdateWithoutStudentInput>
    create: XOR<AcademicyearCreateWithoutStudentInput, AcademicyearUncheckedCreateWithoutStudentInput>
  }

  export type AcademicyearUpdateWithWhereUniqueWithoutStudentInput = {
    where: AcademicyearWhereUniqueInput
    data: XOR<AcademicyearUpdateWithoutStudentInput, AcademicyearUncheckedUpdateWithoutStudentInput>
  }

  export type AcademicyearUpdateManyWithWhereWithoutStudentInput = {
    where: AcademicyearScalarWhereInput
    data: XOR<AcademicyearUpdateManyMutationInput, AcademicyearUncheckedUpdateManyWithoutStudentInput>
  }

  export type AcademicyearScalarWhereInput = {
    AND?: AcademicyearScalarWhereInput | AcademicyearScalarWhereInput[]
    OR?: AcademicyearScalarWhereInput[]
    NOT?: AcademicyearScalarWhereInput | AcademicyearScalarWhereInput[]
    id?: IntFilter<"Academicyear"> | number
    academicyear?: StringFilter<"Academicyear"> | string
    studentId?: StringFilter<"Academicyear"> | string
  }

  export type AttendenceUpsertWithWhereUniqueWithoutStudentInput = {
    where: AttendenceWhereUniqueInput
    update: XOR<AttendenceUpdateWithoutStudentInput, AttendenceUncheckedUpdateWithoutStudentInput>
    create: XOR<AttendenceCreateWithoutStudentInput, AttendenceUncheckedCreateWithoutStudentInput>
  }

  export type AttendenceUpdateWithWhereUniqueWithoutStudentInput = {
    where: AttendenceWhereUniqueInput
    data: XOR<AttendenceUpdateWithoutStudentInput, AttendenceUncheckedUpdateWithoutStudentInput>
  }

  export type AttendenceUpdateManyWithWhereWithoutStudentInput = {
    where: AttendenceScalarWhereInput
    data: XOR<AttendenceUpdateManyMutationInput, AttendenceUncheckedUpdateManyWithoutStudentInput>
  }

  export type AttendenceScalarWhereInput = {
    AND?: AttendenceScalarWhereInput | AttendenceScalarWhereInput[]
    OR?: AttendenceScalarWhereInput[]
    NOT?: AttendenceScalarWhereInput | AttendenceScalarWhereInput[]
    id?: StringFilter<"Attendence"> | string
    studentId?: StringFilter<"Attendence"> | string
    date?: StringFilter<"Attendence"> | string
  }

  export type AssessmentUpsertWithWhereUniqueWithoutStudentInput = {
    where: AssessmentWhereUniqueInput
    update: XOR<AssessmentUpdateWithoutStudentInput, AssessmentUncheckedUpdateWithoutStudentInput>
    create: XOR<AssessmentCreateWithoutStudentInput, AssessmentUncheckedCreateWithoutStudentInput>
  }

  export type AssessmentUpdateWithWhereUniqueWithoutStudentInput = {
    where: AssessmentWhereUniqueInput
    data: XOR<AssessmentUpdateWithoutStudentInput, AssessmentUncheckedUpdateWithoutStudentInput>
  }

  export type AssessmentUpdateManyWithWhereWithoutStudentInput = {
    where: AssessmentScalarWhereInput
    data: XOR<AssessmentUpdateManyMutationInput, AssessmentUncheckedUpdateManyWithoutStudentInput>
  }

  export type AssessmentScalarWhereInput = {
    AND?: AssessmentScalarWhereInput | AssessmentScalarWhereInput[]
    OR?: AssessmentScalarWhereInput[]
    NOT?: AssessmentScalarWhereInput | AssessmentScalarWhereInput[]
    id?: StringFilter<"Assessment"> | string
    studentId?: StringFilter<"Assessment"> | string
    year?: StringFilter<"Assessment"> | string
    academicyear?: StringFilter<"Assessment"> | string
    assessment?: StringFilter<"Assessment"> | string
  }

  export type StudentCreateWithoutYearInput = {
    id: string
    fullName: string
    rollNo?: number | null
    email?: string | null
    mobile?: string | null
    gender?: string | null
    password?: string | null
    role?: string
    academicyear?: AcademicyearCreateNestedManyWithoutStudentInput
    Attendence?: AttendenceCreateNestedManyWithoutStudentInput
    Assessment?: AssessmentCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutYearInput = {
    id: string
    fullName: string
    rollNo?: number | null
    email?: string | null
    mobile?: string | null
    gender?: string | null
    password?: string | null
    role?: string
    academicyear?: AcademicyearUncheckedCreateNestedManyWithoutStudentInput
    Attendence?: AttendenceUncheckedCreateNestedManyWithoutStudentInput
    Assessment?: AssessmentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutYearInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutYearInput, StudentUncheckedCreateWithoutYearInput>
  }

  export type StudentUpsertWithoutYearInput = {
    update: XOR<StudentUpdateWithoutYearInput, StudentUncheckedUpdateWithoutYearInput>
    create: XOR<StudentCreateWithoutYearInput, StudentUncheckedCreateWithoutYearInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutYearInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutYearInput, StudentUncheckedUpdateWithoutYearInput>
  }

  export type StudentUpdateWithoutYearInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    rollNo?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    academicyear?: AcademicyearUpdateManyWithoutStudentNestedInput
    Attendence?: AttendenceUpdateManyWithoutStudentNestedInput
    Assessment?: AssessmentUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutYearInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    rollNo?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    academicyear?: AcademicyearUncheckedUpdateManyWithoutStudentNestedInput
    Attendence?: AttendenceUncheckedUpdateManyWithoutStudentNestedInput
    Assessment?: AssessmentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentCreateWithoutAcademicyearInput = {
    id: string
    fullName: string
    rollNo?: number | null
    email?: string | null
    mobile?: string | null
    gender?: string | null
    password?: string | null
    role?: string
    year?: YearCreateNestedManyWithoutStudentInput
    Attendence?: AttendenceCreateNestedManyWithoutStudentInput
    Assessment?: AssessmentCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutAcademicyearInput = {
    id: string
    fullName: string
    rollNo?: number | null
    email?: string | null
    mobile?: string | null
    gender?: string | null
    password?: string | null
    role?: string
    year?: YearUncheckedCreateNestedManyWithoutStudentInput
    Attendence?: AttendenceUncheckedCreateNestedManyWithoutStudentInput
    Assessment?: AssessmentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutAcademicyearInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutAcademicyearInput, StudentUncheckedCreateWithoutAcademicyearInput>
  }

  export type StudentUpsertWithoutAcademicyearInput = {
    update: XOR<StudentUpdateWithoutAcademicyearInput, StudentUncheckedUpdateWithoutAcademicyearInput>
    create: XOR<StudentCreateWithoutAcademicyearInput, StudentUncheckedCreateWithoutAcademicyearInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutAcademicyearInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutAcademicyearInput, StudentUncheckedUpdateWithoutAcademicyearInput>
  }

  export type StudentUpdateWithoutAcademicyearInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    rollNo?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    year?: YearUpdateManyWithoutStudentNestedInput
    Attendence?: AttendenceUpdateManyWithoutStudentNestedInput
    Assessment?: AssessmentUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutAcademicyearInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    rollNo?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    year?: YearUncheckedUpdateManyWithoutStudentNestedInput
    Attendence?: AttendenceUncheckedUpdateManyWithoutStudentNestedInput
    Assessment?: AssessmentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type DaysCreateWithoutTimetableInput = {
    id?: string
    day: string
    Periods?: PeriodsCreateNestedManyWithoutDaysInput
  }

  export type DaysUncheckedCreateWithoutTimetableInput = {
    id?: string
    day: string
    Periods?: PeriodsUncheckedCreateNestedManyWithoutDaysInput
  }

  export type DaysCreateOrConnectWithoutTimetableInput = {
    where: DaysWhereUniqueInput
    create: XOR<DaysCreateWithoutTimetableInput, DaysUncheckedCreateWithoutTimetableInput>
  }

  export type DaysCreateManyTimetableInputEnvelope = {
    data: DaysCreateManyTimetableInput | DaysCreateManyTimetableInput[]
    skipDuplicates?: boolean
  }

  export type DaysUpsertWithWhereUniqueWithoutTimetableInput = {
    where: DaysWhereUniqueInput
    update: XOR<DaysUpdateWithoutTimetableInput, DaysUncheckedUpdateWithoutTimetableInput>
    create: XOR<DaysCreateWithoutTimetableInput, DaysUncheckedCreateWithoutTimetableInput>
  }

  export type DaysUpdateWithWhereUniqueWithoutTimetableInput = {
    where: DaysWhereUniqueInput
    data: XOR<DaysUpdateWithoutTimetableInput, DaysUncheckedUpdateWithoutTimetableInput>
  }

  export type DaysUpdateManyWithWhereWithoutTimetableInput = {
    where: DaysScalarWhereInput
    data: XOR<DaysUpdateManyMutationInput, DaysUncheckedUpdateManyWithoutTimetableInput>
  }

  export type DaysScalarWhereInput = {
    AND?: DaysScalarWhereInput | DaysScalarWhereInput[]
    OR?: DaysScalarWhereInput[]
    NOT?: DaysScalarWhereInput | DaysScalarWhereInput[]
    id?: StringFilter<"Days"> | string
    day?: StringFilter<"Days"> | string
    timetableId?: StringFilter<"Days"> | string
  }

  export type TimetableCreateWithoutDaysInput = {
    id?: string
    year: string
    academicyear: string
  }

  export type TimetableUncheckedCreateWithoutDaysInput = {
    id?: string
    year: string
    academicyear: string
  }

  export type TimetableCreateOrConnectWithoutDaysInput = {
    where: TimetableWhereUniqueInput
    create: XOR<TimetableCreateWithoutDaysInput, TimetableUncheckedCreateWithoutDaysInput>
  }

  export type PeriodsCreateWithoutDaysInput = {
    time: string
    subject: string
  }

  export type PeriodsUncheckedCreateWithoutDaysInput = {
    id?: number
    time: string
    subject: string
  }

  export type PeriodsCreateOrConnectWithoutDaysInput = {
    where: PeriodsWhereUniqueInput
    create: XOR<PeriodsCreateWithoutDaysInput, PeriodsUncheckedCreateWithoutDaysInput>
  }

  export type PeriodsCreateManyDaysInputEnvelope = {
    data: PeriodsCreateManyDaysInput | PeriodsCreateManyDaysInput[]
    skipDuplicates?: boolean
  }

  export type TimetableUpsertWithoutDaysInput = {
    update: XOR<TimetableUpdateWithoutDaysInput, TimetableUncheckedUpdateWithoutDaysInput>
    create: XOR<TimetableCreateWithoutDaysInput, TimetableUncheckedCreateWithoutDaysInput>
    where?: TimetableWhereInput
  }

  export type TimetableUpdateToOneWithWhereWithoutDaysInput = {
    where?: TimetableWhereInput
    data: XOR<TimetableUpdateWithoutDaysInput, TimetableUncheckedUpdateWithoutDaysInput>
  }

  export type TimetableUpdateWithoutDaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    academicyear?: StringFieldUpdateOperationsInput | string
  }

  export type TimetableUncheckedUpdateWithoutDaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    academicyear?: StringFieldUpdateOperationsInput | string
  }

  export type PeriodsUpsertWithWhereUniqueWithoutDaysInput = {
    where: PeriodsWhereUniqueInput
    update: XOR<PeriodsUpdateWithoutDaysInput, PeriodsUncheckedUpdateWithoutDaysInput>
    create: XOR<PeriodsCreateWithoutDaysInput, PeriodsUncheckedCreateWithoutDaysInput>
  }

  export type PeriodsUpdateWithWhereUniqueWithoutDaysInput = {
    where: PeriodsWhereUniqueInput
    data: XOR<PeriodsUpdateWithoutDaysInput, PeriodsUncheckedUpdateWithoutDaysInput>
  }

  export type PeriodsUpdateManyWithWhereWithoutDaysInput = {
    where: PeriodsScalarWhereInput
    data: XOR<PeriodsUpdateManyMutationInput, PeriodsUncheckedUpdateManyWithoutDaysInput>
  }

  export type PeriodsScalarWhereInput = {
    AND?: PeriodsScalarWhereInput | PeriodsScalarWhereInput[]
    OR?: PeriodsScalarWhereInput[]
    NOT?: PeriodsScalarWhereInput | PeriodsScalarWhereInput[]
    id?: IntFilter<"Periods"> | number
    daysId?: StringFilter<"Periods"> | string
    time?: StringFilter<"Periods"> | string
    subject?: StringFilter<"Periods"> | string
  }

  export type DaysCreateWithoutPeriodsInput = {
    id?: string
    day: string
    Timetable: TimetableCreateNestedOneWithoutDaysInput
  }

  export type DaysUncheckedCreateWithoutPeriodsInput = {
    id?: string
    day: string
    timetableId: string
  }

  export type DaysCreateOrConnectWithoutPeriodsInput = {
    where: DaysWhereUniqueInput
    create: XOR<DaysCreateWithoutPeriodsInput, DaysUncheckedCreateWithoutPeriodsInput>
  }

  export type DaysUpsertWithoutPeriodsInput = {
    update: XOR<DaysUpdateWithoutPeriodsInput, DaysUncheckedUpdateWithoutPeriodsInput>
    create: XOR<DaysCreateWithoutPeriodsInput, DaysUncheckedCreateWithoutPeriodsInput>
    where?: DaysWhereInput
  }

  export type DaysUpdateToOneWithWhereWithoutPeriodsInput = {
    where?: DaysWhereInput
    data: XOR<DaysUpdateWithoutPeriodsInput, DaysUncheckedUpdateWithoutPeriodsInput>
  }

  export type DaysUpdateWithoutPeriodsInput = {
    id?: StringFieldUpdateOperationsInput | string
    day?: StringFieldUpdateOperationsInput | string
    Timetable?: TimetableUpdateOneRequiredWithoutDaysNestedInput
  }

  export type DaysUncheckedUpdateWithoutPeriodsInput = {
    id?: StringFieldUpdateOperationsInput | string
    day?: StringFieldUpdateOperationsInput | string
    timetableId?: StringFieldUpdateOperationsInput | string
  }

  export type StudentCreateWithoutAttendenceInput = {
    id: string
    fullName: string
    rollNo?: number | null
    email?: string | null
    mobile?: string | null
    gender?: string | null
    password?: string | null
    role?: string
    year?: YearCreateNestedManyWithoutStudentInput
    academicyear?: AcademicyearCreateNestedManyWithoutStudentInput
    Assessment?: AssessmentCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutAttendenceInput = {
    id: string
    fullName: string
    rollNo?: number | null
    email?: string | null
    mobile?: string | null
    gender?: string | null
    password?: string | null
    role?: string
    year?: YearUncheckedCreateNestedManyWithoutStudentInput
    academicyear?: AcademicyearUncheckedCreateNestedManyWithoutStudentInput
    Assessment?: AssessmentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutAttendenceInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutAttendenceInput, StudentUncheckedCreateWithoutAttendenceInput>
  }

  export type SubjectCreateWithoutAttendenceInput = {
    time: string
    subject: string
    present?: boolean
  }

  export type SubjectUncheckedCreateWithoutAttendenceInput = {
    id?: number
    time: string
    subject: string
    present?: boolean
  }

  export type SubjectCreateOrConnectWithoutAttendenceInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutAttendenceInput, SubjectUncheckedCreateWithoutAttendenceInput>
  }

  export type SubjectCreateManyAttendenceInputEnvelope = {
    data: SubjectCreateManyAttendenceInput | SubjectCreateManyAttendenceInput[]
    skipDuplicates?: boolean
  }

  export type StudentUpsertWithoutAttendenceInput = {
    update: XOR<StudentUpdateWithoutAttendenceInput, StudentUncheckedUpdateWithoutAttendenceInput>
    create: XOR<StudentCreateWithoutAttendenceInput, StudentUncheckedCreateWithoutAttendenceInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutAttendenceInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutAttendenceInput, StudentUncheckedUpdateWithoutAttendenceInput>
  }

  export type StudentUpdateWithoutAttendenceInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    rollNo?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    year?: YearUpdateManyWithoutStudentNestedInput
    academicyear?: AcademicyearUpdateManyWithoutStudentNestedInput
    Assessment?: AssessmentUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutAttendenceInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    rollNo?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    year?: YearUncheckedUpdateManyWithoutStudentNestedInput
    academicyear?: AcademicyearUncheckedUpdateManyWithoutStudentNestedInput
    Assessment?: AssessmentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type SubjectUpsertWithWhereUniqueWithoutAttendenceInput = {
    where: SubjectWhereUniqueInput
    update: XOR<SubjectUpdateWithoutAttendenceInput, SubjectUncheckedUpdateWithoutAttendenceInput>
    create: XOR<SubjectCreateWithoutAttendenceInput, SubjectUncheckedCreateWithoutAttendenceInput>
  }

  export type SubjectUpdateWithWhereUniqueWithoutAttendenceInput = {
    where: SubjectWhereUniqueInput
    data: XOR<SubjectUpdateWithoutAttendenceInput, SubjectUncheckedUpdateWithoutAttendenceInput>
  }

  export type SubjectUpdateManyWithWhereWithoutAttendenceInput = {
    where: SubjectScalarWhereInput
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyWithoutAttendenceInput>
  }

  export type SubjectScalarWhereInput = {
    AND?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
    OR?: SubjectScalarWhereInput[]
    NOT?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
    id?: IntFilter<"Subject"> | number
    attendenceId?: StringFilter<"Subject"> | string
    time?: StringFilter<"Subject"> | string
    subject?: StringFilter<"Subject"> | string
    present?: BoolFilter<"Subject"> | boolean
  }

  export type AttendenceCreateWithoutSubjectInput = {
    id?: string
    date: string
    Student: StudentCreateNestedOneWithoutAttendenceInput
  }

  export type AttendenceUncheckedCreateWithoutSubjectInput = {
    id?: string
    studentId: string
    date: string
  }

  export type AttendenceCreateOrConnectWithoutSubjectInput = {
    where: AttendenceWhereUniqueInput
    create: XOR<AttendenceCreateWithoutSubjectInput, AttendenceUncheckedCreateWithoutSubjectInput>
  }

  export type AttendenceUpsertWithoutSubjectInput = {
    update: XOR<AttendenceUpdateWithoutSubjectInput, AttendenceUncheckedUpdateWithoutSubjectInput>
    create: XOR<AttendenceCreateWithoutSubjectInput, AttendenceUncheckedCreateWithoutSubjectInput>
    where?: AttendenceWhereInput
  }

  export type AttendenceUpdateToOneWithWhereWithoutSubjectInput = {
    where?: AttendenceWhereInput
    data: XOR<AttendenceUpdateWithoutSubjectInput, AttendenceUncheckedUpdateWithoutSubjectInput>
  }

  export type AttendenceUpdateWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    Student?: StudentUpdateOneRequiredWithoutAttendenceNestedInput
  }

  export type AttendenceUncheckedUpdateWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
  }

  export type StudentCreateWithoutAssessmentInput = {
    id: string
    fullName: string
    rollNo?: number | null
    email?: string | null
    mobile?: string | null
    gender?: string | null
    password?: string | null
    role?: string
    year?: YearCreateNestedManyWithoutStudentInput
    academicyear?: AcademicyearCreateNestedManyWithoutStudentInput
    Attendence?: AttendenceCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutAssessmentInput = {
    id: string
    fullName: string
    rollNo?: number | null
    email?: string | null
    mobile?: string | null
    gender?: string | null
    password?: string | null
    role?: string
    year?: YearUncheckedCreateNestedManyWithoutStudentInput
    academicyear?: AcademicyearUncheckedCreateNestedManyWithoutStudentInput
    Attendence?: AttendenceUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutAssessmentInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutAssessmentInput, StudentUncheckedCreateWithoutAssessmentInput>
  }

  export type AssessmentSubjectCreateWithoutAssessmentInput = {
    id?: string
    subject: string
    theoryMarks: number
    practicalMarks: number
  }

  export type AssessmentSubjectUncheckedCreateWithoutAssessmentInput = {
    id?: string
    subject: string
    theoryMarks: number
    practicalMarks: number
  }

  export type AssessmentSubjectCreateOrConnectWithoutAssessmentInput = {
    where: AssessmentSubjectWhereUniqueInput
    create: XOR<AssessmentSubjectCreateWithoutAssessmentInput, AssessmentSubjectUncheckedCreateWithoutAssessmentInput>
  }

  export type AssessmentSubjectCreateManyAssessmentInputEnvelope = {
    data: AssessmentSubjectCreateManyAssessmentInput | AssessmentSubjectCreateManyAssessmentInput[]
    skipDuplicates?: boolean
  }

  export type StudentUpsertWithoutAssessmentInput = {
    update: XOR<StudentUpdateWithoutAssessmentInput, StudentUncheckedUpdateWithoutAssessmentInput>
    create: XOR<StudentCreateWithoutAssessmentInput, StudentUncheckedCreateWithoutAssessmentInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutAssessmentInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutAssessmentInput, StudentUncheckedUpdateWithoutAssessmentInput>
  }

  export type StudentUpdateWithoutAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    rollNo?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    year?: YearUpdateManyWithoutStudentNestedInput
    academicyear?: AcademicyearUpdateManyWithoutStudentNestedInput
    Attendence?: AttendenceUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    rollNo?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    year?: YearUncheckedUpdateManyWithoutStudentNestedInput
    academicyear?: AcademicyearUncheckedUpdateManyWithoutStudentNestedInput
    Attendence?: AttendenceUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type AssessmentSubjectUpsertWithWhereUniqueWithoutAssessmentInput = {
    where: AssessmentSubjectWhereUniqueInput
    update: XOR<AssessmentSubjectUpdateWithoutAssessmentInput, AssessmentSubjectUncheckedUpdateWithoutAssessmentInput>
    create: XOR<AssessmentSubjectCreateWithoutAssessmentInput, AssessmentSubjectUncheckedCreateWithoutAssessmentInput>
  }

  export type AssessmentSubjectUpdateWithWhereUniqueWithoutAssessmentInput = {
    where: AssessmentSubjectWhereUniqueInput
    data: XOR<AssessmentSubjectUpdateWithoutAssessmentInput, AssessmentSubjectUncheckedUpdateWithoutAssessmentInput>
  }

  export type AssessmentSubjectUpdateManyWithWhereWithoutAssessmentInput = {
    where: AssessmentSubjectScalarWhereInput
    data: XOR<AssessmentSubjectUpdateManyMutationInput, AssessmentSubjectUncheckedUpdateManyWithoutAssessmentInput>
  }

  export type AssessmentSubjectScalarWhereInput = {
    AND?: AssessmentSubjectScalarWhereInput | AssessmentSubjectScalarWhereInput[]
    OR?: AssessmentSubjectScalarWhereInput[]
    NOT?: AssessmentSubjectScalarWhereInput | AssessmentSubjectScalarWhereInput[]
    id?: StringFilter<"AssessmentSubject"> | string
    assessmentId?: StringFilter<"AssessmentSubject"> | string
    subject?: StringFilter<"AssessmentSubject"> | string
    theoryMarks?: IntFilter<"AssessmentSubject"> | number
    practicalMarks?: IntFilter<"AssessmentSubject"> | number
  }

  export type AssessmentCreateWithoutAssessmentSubjectInput = {
    id?: string
    year: string
    academicyear: string
    assessment: string
    Student: StudentCreateNestedOneWithoutAssessmentInput
  }

  export type AssessmentUncheckedCreateWithoutAssessmentSubjectInput = {
    id?: string
    studentId: string
    year: string
    academicyear: string
    assessment: string
  }

  export type AssessmentCreateOrConnectWithoutAssessmentSubjectInput = {
    where: AssessmentWhereUniqueInput
    create: XOR<AssessmentCreateWithoutAssessmentSubjectInput, AssessmentUncheckedCreateWithoutAssessmentSubjectInput>
  }

  export type AssessmentUpsertWithoutAssessmentSubjectInput = {
    update: XOR<AssessmentUpdateWithoutAssessmentSubjectInput, AssessmentUncheckedUpdateWithoutAssessmentSubjectInput>
    create: XOR<AssessmentCreateWithoutAssessmentSubjectInput, AssessmentUncheckedCreateWithoutAssessmentSubjectInput>
    where?: AssessmentWhereInput
  }

  export type AssessmentUpdateToOneWithWhereWithoutAssessmentSubjectInput = {
    where?: AssessmentWhereInput
    data: XOR<AssessmentUpdateWithoutAssessmentSubjectInput, AssessmentUncheckedUpdateWithoutAssessmentSubjectInput>
  }

  export type AssessmentUpdateWithoutAssessmentSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    academicyear?: StringFieldUpdateOperationsInput | string
    assessment?: StringFieldUpdateOperationsInput | string
    Student?: StudentUpdateOneRequiredWithoutAssessmentNestedInput
  }

  export type AssessmentUncheckedUpdateWithoutAssessmentSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    academicyear?: StringFieldUpdateOperationsInput | string
    assessment?: StringFieldUpdateOperationsInput | string
  }

  export type YearCreateManyStudentInput = {
    id?: number
    year: string
  }

  export type AcademicyearCreateManyStudentInput = {
    id?: number
    academicyear: string
  }

  export type AttendenceCreateManyStudentInput = {
    id?: string
    date: string
  }

  export type AssessmentCreateManyStudentInput = {
    id?: string
    year: string
    academicyear: string
    assessment: string
  }

  export type YearUpdateWithoutStudentInput = {
    year?: StringFieldUpdateOperationsInput | string
  }

  export type YearUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: StringFieldUpdateOperationsInput | string
  }

  export type YearUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: StringFieldUpdateOperationsInput | string
  }

  export type AcademicyearUpdateWithoutStudentInput = {
    academicyear?: StringFieldUpdateOperationsInput | string
  }

  export type AcademicyearUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    academicyear?: StringFieldUpdateOperationsInput | string
  }

  export type AcademicyearUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    academicyear?: StringFieldUpdateOperationsInput | string
  }

  export type AttendenceUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    Subject?: SubjectUpdateManyWithoutAttendenceNestedInput
  }

  export type AttendenceUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    Subject?: SubjectUncheckedUpdateManyWithoutAttendenceNestedInput
  }

  export type AttendenceUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
  }

  export type AssessmentUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    academicyear?: StringFieldUpdateOperationsInput | string
    assessment?: StringFieldUpdateOperationsInput | string
    AssessmentSubject?: AssessmentSubjectUpdateManyWithoutAssessmentNestedInput
  }

  export type AssessmentUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    academicyear?: StringFieldUpdateOperationsInput | string
    assessment?: StringFieldUpdateOperationsInput | string
    AssessmentSubject?: AssessmentSubjectUncheckedUpdateManyWithoutAssessmentNestedInput
  }

  export type AssessmentUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    academicyear?: StringFieldUpdateOperationsInput | string
    assessment?: StringFieldUpdateOperationsInput | string
  }

  export type DaysCreateManyTimetableInput = {
    id?: string
    day: string
  }

  export type DaysUpdateWithoutTimetableInput = {
    id?: StringFieldUpdateOperationsInput | string
    day?: StringFieldUpdateOperationsInput | string
    Periods?: PeriodsUpdateManyWithoutDaysNestedInput
  }

  export type DaysUncheckedUpdateWithoutTimetableInput = {
    id?: StringFieldUpdateOperationsInput | string
    day?: StringFieldUpdateOperationsInput | string
    Periods?: PeriodsUncheckedUpdateManyWithoutDaysNestedInput
  }

  export type DaysUncheckedUpdateManyWithoutTimetableInput = {
    id?: StringFieldUpdateOperationsInput | string
    day?: StringFieldUpdateOperationsInput | string
  }

  export type PeriodsCreateManyDaysInput = {
    id?: number
    time: string
    subject: string
  }

  export type PeriodsUpdateWithoutDaysInput = {
    time?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
  }

  export type PeriodsUncheckedUpdateWithoutDaysInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
  }

  export type PeriodsUncheckedUpdateManyWithoutDaysInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
  }

  export type SubjectCreateManyAttendenceInput = {
    id?: number
    time: string
    subject: string
    present?: boolean
  }

  export type SubjectUpdateWithoutAttendenceInput = {
    time?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    present?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SubjectUncheckedUpdateWithoutAttendenceInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    present?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SubjectUncheckedUpdateManyWithoutAttendenceInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    present?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AssessmentSubjectCreateManyAssessmentInput = {
    id?: string
    subject: string
    theoryMarks: number
    practicalMarks: number
  }

  export type AssessmentSubjectUpdateWithoutAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    theoryMarks?: IntFieldUpdateOperationsInput | number
    practicalMarks?: IntFieldUpdateOperationsInput | number
  }

  export type AssessmentSubjectUncheckedUpdateWithoutAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    theoryMarks?: IntFieldUpdateOperationsInput | number
    practicalMarks?: IntFieldUpdateOperationsInput | number
  }

  export type AssessmentSubjectUncheckedUpdateManyWithoutAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    theoryMarks?: IntFieldUpdateOperationsInput | number
    practicalMarks?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use StudentCountOutputTypeDefaultArgs instead
     */
    export type StudentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TimetableCountOutputTypeDefaultArgs instead
     */
    export type TimetableCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TimetableCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DaysCountOutputTypeDefaultArgs instead
     */
    export type DaysCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DaysCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AttendenceCountOutputTypeDefaultArgs instead
     */
    export type AttendenceCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AttendenceCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssessmentCountOutputTypeDefaultArgs instead
     */
    export type AssessmentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssessmentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudentDefaultArgs instead
     */
    export type StudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use YearDefaultArgs instead
     */
    export type YearArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = YearDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AcademicyearDefaultArgs instead
     */
    export type AcademicyearArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AcademicyearDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TimetableDefaultArgs instead
     */
    export type TimetableArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TimetableDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DaysDefaultArgs instead
     */
    export type DaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DaysDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PeriodsDefaultArgs instead
     */
    export type PeriodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PeriodsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AttendenceDefaultArgs instead
     */
    export type AttendenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AttendenceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubjectDefaultArgs instead
     */
    export type SubjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssessmentDefaultArgs instead
     */
    export type AssessmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssessmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssessmentSubjectDefaultArgs instead
     */
    export type AssessmentSubjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssessmentSubjectDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}